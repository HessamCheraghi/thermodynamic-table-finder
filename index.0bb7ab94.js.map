{"mappings":"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","sources":["js/view/inputValidation.js","js/model/data.js","node_modules/@swc/helpers/src/_define_property.js","node_modules/@swc/helpers/src/_object_spread.js","node_modules/@swc/helpers/src/_iterable_to_array.js","node_modules/@swc/helpers/src/_array_like_to_array.js","node_modules/@swc/helpers/src/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/src/_sliced_to_array.js","node_modules/@swc/helpers/src/_array_with_holes.js","node_modules/@swc/helpers/src/_non_iterable_rest.js","node_modules/@swc/helpers/src/_to_consumable_array.js","node_modules/@swc/helpers/src/_array_without_holes.js","node_modules/@swc/helpers/src/_non_iterable_spread.js","js/controller/propertyIndex.js","js/controller/smartSearch/smartSearch.js","js/controller/smartSearch/isInsideTable.js","js/controller/smartSearch/findSurrounding.js","js/controller/interpolator.js","js/controller/findSubstanceName.js","js/controller/phaseFinder/phaseFinder.js","js/controller/phaseFinder/onPressureTemperature.js","js/controller/phaseFinder/onTemperature.js","js/controller/phaseFinder/onPressure.js","js/controller/twoDimensionalSearch/onPressure/onPressure.js","js/controller/twoDimensionalSearch/onPressure/isInsideTable.js","js/controller/twoDimensionalSearch/onPressure/findSurrounding.js","js/controller/twoDimensionalSearch/twoDimensionalSearch.js","js/controller/twoDimensionalSearch/notOnPressure/notOnPressure.js","js/controller/propertyFinder/silentInterpolator.js","js/controller/propertyFinder/doubleInterpolator.js","js/controller/propertyFinder/inputReader.js","js/controller/propertyFinder/fallback/fallback.js","js/controller/propertyFinder/onSupVapor/onSupVapor.js","js/controller/propertyFinder/onSupVapor/ancillary.js","js/controller/propertyFinder/onSupVapor/edgeCaseInterpolation.js","js/controller/propertyFinder/onCompLiquid/onCompLiquid.js","js/controller/propertyFinder/onCompLiquid/ancillary.js","js/controller/propertyFinder/onCompLiquid/edgeCaseInterpolation.js","js/controller/propertyFinder/propertyFinder.js","js/controller/propertyFinder/onSatVapor/onSatVapor.js","js/controller/controller.js","js/controller/rounder.js","js/view/index.js","js/view/showCorrectTemperature.js","js/view/toggleCalculations.js","js/view/inputBlocker.js","js/view/requestInputValues.js","js/view/updateUI.js","js/main.js"],"sourcesContent":["export default function () {\r\n  const allInputs = document.querySelectorAll(\"input[type='number']\");\r\n\r\n  const validator = function (input) {\r\n    input.addEventListener(\"invalid\", (e) => {\r\n      e.preventDefault();\r\n      const message = input.parentNode.querySelector(\".help\");\r\n      if (!message) {\r\n        const errorMassage = document.createElement(\"p\");\r\n        errorMassage.classList.add(\"help\", \"is-danger\");\r\n        errorMassage.textContent = input.validationMessage;\r\n        input.after(errorMassage);\r\n        input.classList.add(\"is-danger\");\r\n      }\r\n    });\r\n    input.addEventListener(\"change\", () => {\r\n      allInputs.forEach((input) => {\r\n        const message = input.parentNode.querySelector(\".help\");\r\n        if (message) {\r\n          message.remove();\r\n          input.classList.remove(\"is-danger\");\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  allInputs.forEach((input) => {\r\n    validator(input);\r\n  });\r\n}\r\n","const tables = {\r\n  b11: [\r\n    [0.01, 0.6113, 0.001, 206.131, 206.132, 0, 2375.33, 2375.33, 0, 2501.35, 2501.35, 0, 9.1562, 9.1562],\r\n    [5, 0.8721, 0.001, 147.117, 147.118, 20.97, 2361.27, 2382.24, 20.98, 2489.57, 2510.54, 0.0761, 8.9496, 9.0257],\r\n    [10, 1.2276, 0.001, 106.376, 106.377, 41.99, 2347.16, 2389.15, 41.99, 2477.75, 2519.74, 0.151, 8.7498, 8.9007],\r\n    [15, 1.705, 0.001001, 77.924, 77.925, 62.98, 2333.06, 2396.04, 62.98, 2465.93, 2528.91, 0.2245, 8.5569, 8.7813],\r\n    [20, 2.339, 0.001002, 57.7887, 57.7897, 83.94, 2318.98, 2402.91, 83.94, 2454.12, 2538.06, 0.2966, 8.3706, 8.6671],\r\n    [25, 3.169, 0.001003, 43.3583, 43.3593, 104.86, 2304.9, 2409.76, 104.87, 2442.3, 2547.17, 0.3673, 8.1905, 8.5579],\r\n    [30, 4.246, 0.001004, 32.8922, 32.8932, 125.77, 2290.81, 2416.58, 125.77, 2430.48, 2556.25, 0.4369, 8.0164, 8.4533],\r\n    [35, 5.628, 0.001006, 25.2148, 25.2158, 146.65, 2276.71, 2423.36, 146.66, 2418.62, 2565.28, 0.5052, 7.8478, 8.353],\r\n    [40, 7.384, 0.001008, 19.5219, 19.5229, 167.53, 2262.57, 2430.11, 167.54, 2406.72, 2574.26, 0.5724, 7.6845, 8.2569],\r\n    [45, 9.593, 0.00101, 15.2571, 15.2581, 188.41, 2248.4, 2436.81, 188.42, 2394.77, 2583.19, 0.6386, 7.5261, 8.1647],\r\n    [50, 12.35, 0.001012, 12.0308, 12.0318, 209.3, 2234.17, 2443.47, 209.31, 2382.75, 2592.06, 0.7037, 7.3725, 8.0762],\r\n    [55, 15.758, 0.001015, 9.56734, 9.56835, 230.19, 2219.89, 2450.08, 230.2, 2370.66, 2600.86, 0.7679, 7.2234, 7.9912],\r\n    [60, 19.941, 0.001017, 7.66969, 7.67071, 251.09, 2205.54, 2456.63, 251.11, 2358.48, 2609.59, 0.8311, 7.0784, 7.9095],\r\n    [65, 25.03, 0.00102, 6.19554, 6.19656, 272, 2191.12, 2463.12, 272.03, 2346.21, 2618.24, 0.8934, 6.9375, 7.8309],\r\n    [70, 31.19, 0.001023, 5.04114, 5.04217, 292.93, 2176.62, 2469.55, 292.96, 2333.85, 2626.8, 0.9548, 6.8004, 7.7552],\r\n    [75, 38.58, 0.001026, 4.13021, 4.13123, 313.87, 2162.03, 2475.91, 313.91, 2321.37, 2635.28, 1.0154, 6.667, 7.6824],\r\n    [80, 47.39, 0.001029, 3.40612, 3.40715, 334.84, 2147.36, 2482.19, 334.88, 2308.77, 2643.66, 1.0752, 6.5369, 7.6121],\r\n    [85, 57.83, 0.001032, 2.82654, 2.82757, 355.82, 2132.58, 2488.4, 355.88, 2296.05, 2651.93, 1.1342, 6.4102, 7.5444],\r\n    [90, 70.14, 0.001036, 2.35953, 2.36056, 376.82, 2117.7, 2494.52, 376.9, 2283.19, 2660.09, 1.1924, 6.2866, 7.479],\r\n    [95, 84.55, 0.00104, 1.98082, 1.98186, 397.86, 2102.7, 2500.56, 397.94, 2270.19, 2668.13, 1.25, 6.1659, 7.4158],\r\n    [100, 101.3, 0.001044, 1.67185, 1.6729, 418.91, 2087.58, 2506.5, 419.02, 2257.03, 2676.05, 1.3068, 6.048, 7.3548],\r\n    [105, 120.8, 0.001047, 1.41831, 1.41936, 440, 2072.34, 2512.34, 440.13, 2243.7, 2683.83, 1.3629, 5.9328, 7.2958],\r\n    [110, 143.3, 0.001052, 1.20909, 1.21014, 461.12, 2056.96, 2518.09, 461.27, 2230.2, 2691.47, 1.4184, 5.8202, 7.2386],\r\n    [115, 169.1, 0.001056, 1.03552, 1.03658, 482.28, 2041.44, 2523.72, 482.46, 2216.5, 2698.96, 1.4733, 5.71, 7.1832],\r\n    [120, 198.5, 0.00106, 0.8908, 0.89186, 503.48, 2025.76, 2529.24, 503.69, 2202.61, 2706.3, 1.5275, 5.602, 7.1295],\r\n    [125, 232.1, 0.001065, 0.76953, 0.77059, 524.72, 2009.91, 2534.63, 524.96, 2188.5, 2713.46, 1.5812, 5.4962, 7.0774],\r\n    [130, 270.1, 0.00107, 0.66744, 0.6685, 546, 1993.9, 2539.9, 546.29, 2174.16, 2720.46, 1.6343, 5.3925, 7.0269],\r\n    [135, 313, 0.001075, 0.5811, 0.58217, 567.34, 1977.69, 2545.03, 567.67, 2159.59, 2727.26, 1.6869, 5.2907, 6.9777],\r\n    [140, 361.3, 0.00108, 0.50777, 0.50885, 588.72, 1961.3, 2550.02, 589.11, 2144.75, 2733.87, 1.739, 5.1908, 6.9298],\r\n    [145, 415.4, 0.001085, 0.44524, 0.44632, 610.16, 1944.69, 2554.86, 610.61, 2129.65, 2740.26, 1.7906, 5.0926, 6.8832],\r\n    [150, 475.9, 0.00109, 0.39169, 0.39278, 631.66, 1927.87, 2559.54, 632.18, 2114.26, 2746.44, 1.8417, 4.996, 6.8378],\r\n    [155, 543.1, 0.001096, 0.34566, 0.34676, 653.23, 1910.82, 2564.04, 653.82, 2098.56, 2752.39, 1.8924, 4.901, 6.7934],\r\n    [160, 617.8, 0.001102, 0.30596, 0.30706, 674.85, 1893.52, 2568.37, 675.53, 2082.55, 2758.09, 1.9426, 4.8075, 6.7501],\r\n    [165, 700.5, 0.001108, 0.27158, 0.27269, 696.55, 1875.97, 2572.51, 697.32, 2066.2, 2763.53, 1.9924, 4.7153, 6.7078],\r\n    [170, 791.7, 0.001114, 0.24171, 0.24283, 718.31, 1858.14, 2576.46, 719.2, 2049.5, 2768.7, 2.0418, 4.6244, 6.6663],\r\n    [175, 892, 0.001121, 0.21568, 0.2168, 740.16, 1840.03, 2580.19, 741.16, 2032.42, 2773.58, 2.0909, 4.5347, 6.6256],\r\n    [180, 1002.2, 0.001127, 0.19292, 0.19405, 762.08, 1821.62, 2583.7, 763.21, 2014.96, 2778.16, 2.1395, 4.4461, 6.5857],\r\n    [185, 1122.7, 0.001134, 0.17295, 0.17409, 784.08, 1802.9, 2586.98, 785.36, 1997.07, 2782.43, 2.1878, 4.3586, 6.5464],\r\n    [190, 1254.4, 0.001141, 0.15539, 0.15654, 806.17, 1783.84, 2590.01, 807.61, 1978.76, 2786.37, 2.2358, 4.272, 6.5078],\r\n    [195, 1397.8, 0.001149, 0.1399, 0.14105, 828.36, 1764.43, 2592.79, 829.96, 1959.99, 2789.96, 2.2835, 4.1863, 6.4697],\r\n    [200, 1553.8, 0.001156, 0.1262, 0.12736, 850.64, 1744.66, 2595.29, 852.43, 1940.75, 2793.18, 2.3308, 4.1014, 6.4322],\r\n    [205, 1723, 0.001164, 0.11405, 0.11521, 873.02, 1724.49, 2597.52, 875.03, 1921, 2796.03, 2.3779, 4.0172, 6.3951],\r\n    [210, 1906.3, 0.001173, 0.10324, 0.10441, 895.51, 1703.93, 2599.44, 897.75, 1900.73, 2798.48, 2.4247, 3.9337, 6.3584],\r\n    [215, 2104.2, 0.001181, 0.09361, 0.09479, 918.12, 1682.94, 2601.06, 920.61, 1879.91, 2800.51, 2.4713, 3.8507, 6.3221],\r\n    [220, 2317.8, 0.00119, 0.085, 0.08619, 940.85, 1661.49, 2602.35, 943.61, 1858.51, 2802.12, 2.5177, 3.7683, 6.286],\r\n    [225, 2547.7, 0.001199, 0.07729, 0.07849, 963.72, 1639.58, 2603.3, 966.77, 1836.5, 2803.27, 2.5639, 3.6863, 6.2502],\r\n    [230, 2794.9, 0.001209, 0.07037, 0.07158, 986.72, 1617.17, 2603.89, 990.1, 1813.85, 2803.95, 2.6099, 3.6047, 6.2146],\r\n    [235, 3060.1, 0.001219, 0.06415, 0.06536, 1009.88, 1594.24, 2604.11, 1013.61, 1790.53, 2804.13, 2.6557, 3.5233, 6.1791],\r\n    [240, 3344.2, 0.001229, 0.05853, 0.05976, 1033.19, 1570.75, 2603.95, 1037.31, 1766.5, 2803.81, 2.7015, 3.4422, 6.1436],\r\n    [245, 3648.2, 0.00124, 0.05346, 0.0547, 1056.69, 1546.68, 2603.37, 1061.21, 1741.73, 2802.95, 2.7471, 3.3612, 6.1083],\r\n    [250, 3973, 0.001251, 0.04887, 0.05013, 1080.37, 1522, 2602.37, 1085.34, 1716.18, 2801.52, 2.7927, 3.2802, 6.0729],\r\n    [255, 4319.5, 0.001263, 0.04471, 0.04598, 1104.26, 1496.66, 2600.93, 1109.72, 1689.8, 2799.51, 2.8382, 3.1992, 6.0374],\r\n    [260, 4688.6, 0.001276, 0.04093, 0.0422, 1128.37, 1470.64, 2599.01, 1134.35, 1662.54, 2796.89, 2.8837, 3.1181, 6.0018],\r\n    [265, 5081.3, 0.001289, 0.03748, 0.03877, 1152.72, 1443.87, 2596.6, 1159.27, 1634.34, 2793.61, 2.9293, 3.0368, 5.9661],\r\n    [270, 5498.7, 0.001302, 0.03434, 0.03564, 1177.33, 1416.33, 2593.66, 1184.49, 1605.16, 2789.65, 2.975, 2.9551, 5.9301],\r\n    [275, 5941.8, 0.001317, 0.03147, 0.03279, 1202.23, 1387.94, 2590.17, 1210.05, 1574.92, 2784.97, 3.0208, 2.873, 5.8937],\r\n    [280, 6411.7, 0.001332, 0.02884, 0.03017, 1227.43, 1358.66, 2586.09, 1235.97, 1543.55, 2779.53, 3.0667, 2.7903, 5.857],\r\n    [285, 6909.4, 0.001348, 0.02642, 0.02777, 1252.98, 1328.41, 2581.38, 1262.29, 1510.97, 2773.27, 3.1129, 2.7069, 5.8198],\r\n    [290, 7436, 0.001366, 0.0242, 0.02557, 1278.89, 1297.11, 2575.99, 1289.04, 1477.08, 2766.13, 3.1593, 2.6227, 5.7821],\r\n    [295, 7992.8, 0.001384, 0.02216, 0.02354, 1305.21, 1264.67, 2569.87, 1316.27, 1441.78, 2758.05, 3.2061, 2.5375, 5.7436],\r\n    [300, 8581, 0.001404, 0.02027, 0.02167, 1331.97, 1230.99, 2562.96, 1344.01, 1404.93, 2748.94, 3.2533, 2.4511, 5.7044],\r\n    [305, 9201.8, 0.001425, 0.01852, 0.01995, 1359.22, 1195.94, 2555.16, 1372.33, 1366.38, 2738.72, 3.3009, 2.3633, 5.6642],\r\n    [310, 9856.6, 0.001447, 0.0169, 0.01835, 1387.03, 1159.37, 2546.4, 1401.29, 1325.97, 2727.27, 3.3492, 2.2737, 5.6229],\r\n    [315, 10547, 0.001472, 0.01539, 0.01687, 1415.44, 1121.11, 2536.55, 1430.97, 1283.48, 2714.44, 3.3981, 2.1821, 5.5803],\r\n    [320, 11274, 0.001499, 0.01399, 0.01549, 1444.55, 1080.93, 2525.48, 1461.45, 1238.64, 2700.08, 3.4479, 2.0882, 5.5361],\r\n    [325, 12040, 0.001528, 0.01267, 0.0142, 1474.44, 1038.57, 2513.01, 1492.84, 1191.13, 2683.97, 3.4987, 1.9913, 5.49],\r\n    [330, 12845, 0.001561, 0.01144, 0.013, 1505.24, 993.66, 2498.91, 1525.29, 1140.56, 2665.85, 3.5506, 1.8909, 5.4416],\r\n    [335, 13694, 0.001597, 0.01027, 0.01186, 1537.11, 945.77, 2482.88, 1558.98, 1086.37, 2645.35, 3.604, 1.7863, 5.3903],\r\n    [340, 14586, 0.001638, 0.00916, 0.0108, 1570.26, 894.26, 2464.53, 1594.15, 1027.86, 2622.01, 3.6593, 1.6763, 5.3356],\r\n    [345, 15525, 0.001685, 0.0081, 0.00978, 1605.01, 838.29, 2443.3, 1631.17, 964.02, 2595.19, 3.7169, 1.5594, 5.2763],\r\n    [350, 16514, 0.00174, 0.00707, 0.00881, 1641.81, 776.58, 2418.39, 1670.54, 893.38, 2563.92, 3.7776, 1.4336, 5.2111],\r\n    [355, 17554, 0.001807, 0.00607, 0.00787, 1681.41, 707.11, 2388.52, 1713.13, 813.59, 2526.72, 3.8427, 1.2951, 5.1378],\r\n    [360, 18651, 0.001892, 0.00505, 0.00694, 1725.19, 626.29, 2351.47, 1760.48, 720.52, 2481, 3.9146, 1.1379, 5.0525],\r\n    [365, 19807, 0.002011, 0.00398, 0.00599, 1776.13, 526.54, 2302.67, 1815.96, 605.44, 2421.4, 3.9983, 0.9487, 4.947],\r\n    [370, 21028, 0.002213, 0.00271, 0.00493, 1843.84, 384.69, 2228.53, 1890.37, 441.75, 2332.12, 4.1104, 0.6868, 4.7972],\r\n    [374.1, 22089, 0.003155, 0, 0.00315, 2029.58, 0, 2029.58, 2099.26, 0, 2099.26, 4.4297, 0, 4.4297],\r\n  ],\r\n  b12: [\r\n    [0.6113, 0.01, 0.001, 206.131, 206.132, 0, 2375.3, 2375.3, 0, 2501.3, 2501.3, 0, 9.1562, 9.1562],\r\n    [1, 6.98, 0.001, 129.20702, 129.20802, 29.29, 2355.69, 2384.98, 29.29, 2484.89, 2514.18, 0.1059, 8.8697, 8.9756],\r\n    [1.5, 13.03, 0.001001, 87.97913, 87.98013, 54.7, 2338.63, 2393.32, 54.7, 2470.59, 2525.3, 0.1956, 8.6322, 8.8278],\r\n    [2, 17.5, 0.001001, 67.00285, 67.00385, 73.47, 2326.02, 2399.48, 73.47, 2460.02, 2533.49, 0.2607, 8.4629, 8.7236],\r\n    [2.5, 21.08, 0.001002, 54.25285, 54.25385, 88.47, 2315.93, 2404.4, 88.47, 2451.56, 2540.03, 0.312, 8.3311, 8.6431],\r\n    [3, 24.08, 0.001003, 45.66402, 45.66502, 101.03, 2307.48, 2408.51, 101.03, 2444.47, 2545.5, 0.3545, 8.2231, 8.5775],\r\n    [4, 28.96, 0.001004, 34.79915, 34.80015, 121.44, 2293.73, 2415.17, 121.44, 2432.93, 2554.37, 0.4226, 8.052, 8.4746],\r\n    [5, 32.88, 0.001005, 28.1915, 28.19251, 137.79, 2282.7, 2420.49, 137.79, 2423.66, 2561.45, 0.4763, 7.9187, 8.395],\r\n    [7.5, 40.29, 0.001008, 19.23674, 19.23775, 168.76, 2261.74, 2430.5, 168.77, 2406.02, 2574.79, 0.5763, 7.6751, 8.2514],\r\n    [10, 45.81, 0.00101, 14.67254, 14.67355, 191.79, 2246.1, 2437.89, 191.81, 2392.82, 2584.63, 0.6492, 7.501, 8.1501],\r\n    [15, 53.97, 0.001014, 10.02117, 10.02218, 225.9, 2222.83, 2448.73, 225.91, 2373.14, 2599.06, 0.7548, 7.2536, 8.0084],\r\n    [20, 60.06, 0.001017, 7.64835, 7.64937, 251.35, 2205.36, 2456.71, 251.38, 2358.33, 2609.7, 0.8319, 7.0766, 7.9085],\r\n    [25, 64.97, 0.00102, 6.20322, 6.20424, 271.88, 2191.21, 2463.08, 271.9, 2346.29, 2618.19, 0.893, 6.9383, 7.8313],\r\n    [30, 69.1, 0.001022, 5.22816, 5.22918, 289.18, 2179.22, 2468.4, 289.21, 2336.07, 2625.28, 0.9439, 6.8247, 7.7686],\r\n    [40, 75.87, 0.001026, 3.99243, 3.99345, 317.51, 2159.49, 2477, 317.55, 2319.19, 2636.74, 1.0258, 6.6441, 7.67],\r\n    [50, 81.33, 0.00103, 3.23931, 3.24034, 340.42, 2143.43, 2483.85, 340.47, 2305.4, 2645.87, 1.091, 6.5029, 7.5939],\r\n    [75, 91.77, 0.001037, 2.21607, 2.21711, 394.29, 2112.39, 2496.67, 384.36, 2278.59, 2662.96, 1.2129, 6.2434, 7.4563],\r\n    [100, 99.62, 0.001043, 1.69296, 1.694, 417.33, 2088.72, 2506.06, 417.44, 2258.02, 2675.46, 1.3025, 6.0568, 7.3593],\r\n    [125, 105.99, 0.001048, 1.37385, 1.3749, 444.16, 2069.32, 2513.48, 444.3, 2241.05, 2685.35, 1.3739, 5.9104, 7.2843],\r\n    [150, 111.37, 0.001053, 1.15828, 1.15933, 466.92, 2052.72, 2519.64, 467.08, 2226.46, 2693.54, 1.4335, 5.7897, 7.2232],\r\n    [175, 116.06, 0.001057, 1.00257, 1.00363, 486.78, 2038.12, 2524.9, 486.97, 2213.57, 2700.53, 1.4848, 5.6868, 7.1717],\r\n    [200, 120.23, 0.001061, 0.88467, 0.88573, 504.47, 2025.02, 2529.49, 504.68, 2201.96, 2706.63, 1.53, 5.597, 7.1271],\r\n    [225, 124, 0.001064, 0.79219, 0.79325, 520.45, 2013.1, 2533.56, 520.69, 2191.35, 2712.04, 1.5705, 5.5173, 7.0878],\r\n    [250, 127.43, 0.001067, 0.71765, 0.71871, 535.08, 2002.14, 2537.21, 535.34, 2181.55, 2716.89, 1.6072, 5.4455, 7.0526],\r\n    [275, 130.6, 0.00107, 0.65624, 0.65731, 548.57, 1991.95, 2540.53, 548.87, 2172.42, 2721.29, 1.6407, 5.3801, 7.0208],\r\n    [300, 133.55, 0.001073, 0.60475, 0.60582, 561.13, 1982.43, 2543.55, 561.45, 2163.85, 2725.3, 1.6717, 5.3201, 6.9918],\r\n    [325, 136.3, 0.001076, 0.56093, 0.56201, 572.88, 1973.46, 2546.34, 573.23, 2155.76, 2728.99, 1.7005, 5.2646, 6.9651],\r\n    [350, 138.88, 0.001079, 0.52317, 0.52425, 583.93, 1964.98, 2548.92, 584.31, 2148.1, 2732.4, 1.7274, 5.213, 6.9404],\r\n    [375, 141.32, 0.001081, 0.49029, 0.49137, 594.38, 1956.93, 2551.31, 594.79, 2140.79, 2735.58, 1.7527, 5.1647, 6.9174],\r\n    [400, 143.63, 0.001084, 0.46138, 0.46246, 604.29, 1949.26, 2553.55, 604.73, 2133.81, 2738.53, 1.7766, 5.1193, 6.8958],\r\n    [450, 147.93, 0.001088, 0.41289, 0.41398, 622.75, 1934.87, 2557.62, 623.24, 2120.67, 2743.91, 1.8206, 5.0359, 6.8565],\r\n    [500, 151.86, 0.001093, 0.3738, 0.37489, 639.66, 1921.57, 2561.23, 640.21, 2108.47, 2748.67, 1.8606, 4.9606, 6.8212],\r\n    [550, 155.48, 0.001097, 0.34159, 0.34268, 655.3, 1909.17, 2564.47, 655.91, 2097.04, 2752.94, 1.8972, 4.892, 6.7892],\r\n    [600, 158.85, 0.001101, 0.31457, 0.31567, 669.88, 1897.52, 2567.4, 670.54, 2086.26, 2756.8, 1.9311, 4.8289, 6.76],\r\n    [650, 162.01, 0.001104, 0.29158, 0.29268, 683.55, 1886.51, 2570.06, 684.26, 2076.04, 2760.3, 1.9627, 4.7704, 6.733],\r\n    [700, 164.97, 0.001108, 0.27176, 0.27286, 696.43, 1876.07, 2572.49, 697.2, 2066.3, 2763.5, 1.9922, 4.7158, 6.708],\r\n    [750, 167.77, 0.001111, 0.25449, 0.2556, 708.62, 1866.11, 2574.73, 709.45, 2056.98, 2766.43, 2.0199, 4.6647, 6.6846],\r\n    [800, 170.43, 0.001115, 0.23931, 0.24043, 720.2, 1856.58, 2576.79, 721.1, 2048.04, 2769.13, 2.0461, 4.6166, 6.6627],\r\n    [850, 172.96, 0.001118, 0.22586, 0.22698, 731.25, 1847.45, 2578.69, 732.2, 2039.43, 2771.63, 2.0709, 4.5711, 6.6421],\r\n    [900, 175.38, 0.001121, 0.21385, 0.21497, 741.81, 1838.65, 2580.46, 742.82, 2031.12, 2773.94, 2.0946, 4.528, 6.6225],\r\n    [950, 177.69, 0.001124, 0.20306, 0.20419, 751.94, 1830.17, 2582.11, 753, 2023.08, 2776.08, 2.1171, 4.4869, 6.604],\r\n    [1000, 179.91, 0.001127, 0.19332, 0.19444, 761.67, 1821.97, 2583.64, 762.79, 2015.29, 2778.08, 2.1386, 4.4478, 6.5864],\r\n    [1100, 184.09, 0.001133, 0.17639, 0.17753, 780.08, 1806.32, 2586.4, 781.32, 2000.36, 2781.68, 2.1791, 4.3744, 6.5535],\r\n    [1200, 187.99, 0.001139, 0.1622, 0.16333, 797.27, 1791.55, 2588.82, 798.64, 1986.19, 2784.82, 2.2165, 4.3067, 6.5233],\r\n    [1300, 191.64, 0.001144, 0.15011, 0.15125, 813.42, 1777.53, 2590.95, 814.91, 1972.67, 2787.58, 2.2514, 4.2438, 6.4953],\r\n    [1400, 195.07, 0.001149, 0.13969, 0.14084, 828.68, 1764.15, 2592.83, 830.29, 1959.72, 2790, 2.2842, 4.185, 6.4692],\r\n    [1500, 198.32, 0.001154, 0.13062, 0.13177, 843.14, 1751.3, 2594.5, 844.87, 1947.28, 2792.15, 2.315, 4.1298, 6.4448],\r\n    [1750, 205.76, 0.001166, 0.11232, 0.11349, 876.44, 1721.39, 2597.83, 878.48, 1917.95, 2796.43, 2.3851, 4.0044, 6.3895],\r\n    [2000, 212.42, 0.001177, 0.09845, 0.09963, 906.42, 1693.84, 2600.26, 908.77, 1890.74, 2799.51, 2.4473, 3.8935, 6.3408],\r\n    [2250, 218.45, 0.001187, 0.08756, 0.08875, 933.81, 1668.18, 2601.98, 936.48, 1865.19, 2801.67, 2.5034, 3.7938, 6.2971],\r\n    [2500, 223.99, 0.001197, 0.07878, 0.07998, 959.09, 1644.04, 2603.13, 962.09, 1840.98, 2803.07, 2.5546, 3.7028, 6.2574],\r\n    [2750, 229.12, 0.001207, 0.07154, 0.07275, 982.65, 1621.16, 2603.81, 985.97, 1817.89, 2803.86, 2.6018, 3.619, 6.2208],\r\n    [3000, 233.9, 0.001216, 0.06546, 0.06668, 1004.76, 1599.34, 2604.1, 1008.41, 1795.73, 2804.14, 2.6456, 3.5412, 6.1869],\r\n    [3250, 238.38, 0.001226, 0.06029, 0.06152, 1025.62, 1578.43, 2604.04, 1029.6, 1774.37, 2803.97, 2.6866, 3.4685, 6.1551],\r\n    [3500, 242.6, 0.001235, 0.05583, 0.05707, 1045.41, 1558.29, 2603.7, 1049.73, 1753.7, 2803.43, 2.7252, 3.4, 6.1252],\r\n    [4000, 250.4, 0.001252, 0.04853, 0.04978, 1082.28, 1519.99, 2602.27, 1087.29, 1714.09, 2801.38, 2.7963, 3.2737, 6.07],\r\n    [5000, 263.99, 0.001286, 0.03815, 0.03944, 1147.78, 1449.34, 2597.12, 1154.21, 1640.12, 2794.33, 2.9201, 3.0532, 5.9733],\r\n    [6000, 275.64, 0.001319, 0.03112, 0.03244, 1205.41, 1384.27, 2589.69, 1213.32, 1571, 2784.33, 3.0266, 2.8625, 5.8891],\r\n    [7000, 285.88, 0.001351, 0.02602, 0.02737, 1257.51, 1322.97, 2580.48, 1266.97, 1505.1, 2772.07, 3.121, 2.6922, 5.8132],\r\n    [8000, 295.06, 0.001384, 0.02213, 0.02352, 1305.54, 1264.25, 2569.79, 1316.61, 1441.33, 2757.94, 3.2067, 2.5365, 5.7431],\r\n    [9000, 303.4, 0.001418, 0.01907, 0.02048, 1350.47, 1207.28, 2557.75, 1363.23, 1378.88, 2742.11, 3.2857, 2.3915, 5.6771],\r\n    [10000, 311.06, 0.001452, 0.01657, 0.01803, 1393, 1151.4, 2544.41, 1407.53, 1317.14, 2724.67, 3.3595, 2.2545, 5.614],\r\n    [11000, 318.15, 0.001489, 0.0145, 0.01599, 1433.68, 1096.06, 2529.74, 1450.05, 1255.55, 2705.6, 3.4294, 2.1233, 5.5527],\r\n    [12000, 324.75, 0.001527, 0.01274, 0.01426, 1472.92, 1040.76, 2513.67, 1491.24, 1193.59, 2684.83, 3.4961, 1.9962, 5.4923],\r\n    [13000, 330.93, 0.001567, 0.01121, 0.01278, 1511.09, 984.99, 2496.08, 1531.46, 1130.76, 2662.22, 3.5604, 1.8718, 5.4323],\r\n    [14000, 336.75, 0.001611, 0.00987, 0.01149, 1548.53, 928.23, 2476.76, 1571.08, 1066.47, 2637.55, 3.6231, 1.7485, 5.3716],\r\n    [15000, 342.24, 0.001658, 0.00868, 0.01034, 1585.58, 869.85, 2455.43, 1610.45, 1000.04, 2610.49, 3.6847, 1.625, 5.3097],\r\n    [16000, 347.43, 0.001711, 0.0076, 0.00931, 1622.63, 809.07, 2431.7, 1650, 930.59, 2580.59, 3.746, 1.4995, 5.2454],\r\n    [17000, 352.37, 0.00177, 0.00659, 0.00836, 1660.16, 744.8, 2404.96, 1690.25, 856.9, 2547.15, 3.8078, 1.3698, 5.1776],\r\n    [18000, 357.06, 0.00184, 0.00565, 0.00749, 1698.86, 675.42, 2374.28, 1731.97, 777.13, 2509.09, 3.8713, 1.233, 5.1044],\r\n    [19000, 361.54, 0.001924, 0.00473, 0.00666, 1739.87, 598.18, 2338.05, 1776.43, 688.11, 2464.54, 3.9387, 1.0841, 5.0227],\r\n    [20000, 365.81, 0.002035, 0.0038, 0.00583, 1785.47, 507.58, 2293.05, 1826.18, 583.56, 2409.74, 4.0137, 0.9132, 4.9269],\r\n    [21000, 369.89, 0.002206, 0.00275, 0.00495, 1841.97, 388.74, 2230.71, 1888.3, 446.42, 2334.72, 4.1073, 0.6942, 4.8015],\r\n    [22000, 373.8, 0.002808, 0.00072, 0.00353, 1973.16, 108.24, 2081.39, 2034.92, 124.04, 2158.97, 4.3307, 0.1917, 4.5224],\r\n    [22089, 374.14, 0.003155, 0, 0.00315, 2029.58, 0, 2029.58, 2099.26, 0, 2099.26, 4.4297, 0, 4.4297],\r\n  ],\r\n  b13: [\r\n    [10, 45.81, 14.67355, 2437.89, 2584.63, 8.1501],\r\n    [10, 50, 14.8692, 2443.87, 2592.56, 8.1749],\r\n    [10, 100, 17.19561, 2515.5, 2687.46, 8.4479],\r\n    [10, 150, 19.51251, 2587.86, 2782.99, 8.6881],\r\n    [10, 200, 21.82507, 2661.27, 2879.52, 8.9037],\r\n    [10, 250, 24.13559, 2735.95, 2977.31, 9.1002],\r\n    [10, 300, 26.44508, 2812.06, 3076.51, 9.2812],\r\n    [10, 400, 31.06252, 2968.89, 3279.51, 9.6076],\r\n    [10, 500, 35.67896, 3132.26, 3489.05, 9.8977],\r\n    [10, 600, 40.29488, 3302.45, 3705.4, 10.1608],\r\n    [10, 700, 44.91052, 3479.63, 3928.73, 10.4028],\r\n    [10, 800, 49.52599, 3663.84, 4159.1, 10.6281],\r\n    [10, 900, 54.14137, 3855.03, 4396.44, 10.8395],\r\n    [10, 1000, 58.75669, 4053.01, 4640.58, 11.0392],\r\n    [10, 1100, 63.37198, 4257.47, 4891.19, 11.2287],\r\n    [10, 1200, 67.98724, 4467.91, 5147.78, 11.409],\r\n    [10, 1300, 72.6025, 4683.68, 5409.7, 14.581],\r\n    [50, 81.33, 3.24034, 2483.85, 2645.87, 7.5939],\r\n    [50, 100, 3.41833, 2511.61, 2682.52, 7.6947],\r\n    [50, 150, 3.88937, 2585.61, 2780.08, 7.94],\r\n    [50, 200, 4.35595, 2659.85, 2877.64, 8.1579],\r\n    [50, 250, 4.82045, 2734.97, 2975.99, 8.3555],\r\n    [50, 300, 5.28391, 2811.33, 3075.52, 8.5372],\r\n    [50, 400, 6.20929, 2968.43, 3278.89, 8.8641],\r\n    [50, 500, 7.13364, 3131.94, 3488.62, 9.1545],\r\n    [50, 600, 8.05748, 3302.22, 3705.1, 9.4177],\r\n    [50, 700, 8.98104, 3479.45, 3928.51, 9.6599],\r\n    [50, 800, 9.90444, 3663.7, 4158.92, 9.8852],\r\n    [50, 900, 10.82773, 3854.91, 4396.3, 10.0967],\r\n    [50, 1000, 11.75097, 4052.91, 4640.46, 10.2964],\r\n    [50, 1100, 12.67418, 4257.37, 4891.08, 10.4858],\r\n    [50, 1200, 13.59737, 4467.82, 5147.69, 10.6662],\r\n    [50, 1300, 14.52054, 4683.58, 5409.61, 10.8382],\r\n    [100, 99.62, 1.694, 2506.06, 2675.46, 7.3593],\r\n    [100, 150, 1.93636, 2582.75, 2776.38, 7.6133],\r\n    [100, 200, 2.17226, 2658.05, 2875.27, 7.8342],\r\n    [100, 250, 2.40604, 2733.73, 2974.33, 8.0332],\r\n    [100, 300, 2.63876, 2810.41, 3074.28, 8.2157],\r\n    [100, 400, 3.10263, 2967.85, 3278.11, 8.5434],\r\n    [100, 500, 3.56547, 3131.54, 3488.09, 8.8341],\r\n    [100, 600, 4.02781, 3301.94, 3704.72, 9.0975],\r\n    [100, 700, 4.48986, 3479.24, 3928.23, 9.3398],\r\n    [100, 800, 4.95174, 3663.53, 4158.71, 9.5652],\r\n    [100, 900, 5.41353, 3854.77, 4396.12, 9.7767],\r\n    [100, 1000, 5.87526, 4052.78, 4640.31, 9.9764],\r\n    [100, 1100, 6.33696, 4257.25, 4890.95, 10.1658],\r\n    [100, 1200, 6.79863, 4467.7, 5147.56, 10.3462],\r\n    [100, 1300, 7.2603, 4683.47, 5409.49, 10.5182],\r\n    [200, 120.23, 0.88573, 2529.49, 2706.63, 7.1271],\r\n    [200, 150, 0.95964, 2576.87, 2768.8, 7.2795],\r\n    [200, 200, 1.08034, 2654.39, 2870.46, 7.5066],\r\n    [200, 250, 1.1988, 2731.22, 2970.98, 7.7085],\r\n    [200, 300, 1.31616, 2808.55, 3071.79, 7.8926],\r\n    [200, 400, 1.5493, 2966.69, 3276.55, 8.2217],\r\n    [200, 500, 1.78139, 3130.75, 3487.03, 8.5132],\r\n    [200, 600, 2.01297, 3301.36, 3703.96, 8.7769],\r\n    [200, 700, 2.24426, 3478.81, 3927.66, 9.0194],\r\n    [200, 800, 2.47539, 3663.19, 4158.27, 9.245],\r\n    [200, 900, 2.70643, 3854.49, 4395.77, 9.4565],\r\n    [200, 1000, 2.9374, 4052.53, 4640.01, 9.6563],\r\n    [200, 1100, 3.16834, 4257.01, 4890.68, 9.8458],\r\n    [200, 1200, 3.39927, 4467.46, 5147.32, 10.0262],\r\n    [200, 1300, 3.63018, 4683.23, 5409.26, 10.1982],\r\n    [300, 133.55, 0.60582, 2543.55, 2725.3, 6.9918],\r\n    [300, 150, 0.63388, 2570.79, 2760.95, 7.0778],\r\n    [300, 200, 0.71629, 2650.65, 2865.54, 7.3115],\r\n    [300, 250, 0.79636, 2728.69, 2967.59, 7.5165],\r\n    [300, 300, 0.87529, 2806.69, 3069.28, 7.7022],\r\n    [300, 400, 1.03151, 2965.53, 3274.98, 8.0329],\r\n    [300, 500, 1.18669, 3129.95, 3485.96, 8.325],\r\n    [300, 600, 1.34136, 3300.79, 3703.2, 8.5892],\r\n    [300, 700, 1.49573, 3478.38, 3927.1, 8.8319],\r\n    [300, 800, 1.64994, 3662.85, 4157.83, 9.0575],\r\n    [300, 900, 1.80406, 3854.2, 4395.42, 9.2691],\r\n    [300, 1000, 1.95812, 4052.27, 4639.71, 9.4689],\r\n    [300, 1100, 2.11214, 4256.77, 4890.41, 9.6585],\r\n    [300, 1200, 2.26614, 4467.23, 5147.07, 9.8389],\r\n    [300, 1300, 2.42013, 4682.99, 5409.03, 10.0109],\r\n    [400, 143.63, 0.46246, 2553.55, 2738.53, 6.8958],\r\n    [400, 150, 0.47084, 2564.48, 2752.82, 6.9299],\r\n    [400, 200, 0.53422, 2646.83, 2860.51, 7.1706],\r\n    [400, 250, 0.59512, 2726.11, 2964.16, 7.3788],\r\n    [400, 300, 0.65484, 2804.81, 3066.75, 7.5661],\r\n    [400, 400, 0.77262, 2964.36, 3273.41, 7.8984],\r\n    [400, 500, 0.88934, 3129.15, 3484.89, 8.1912],\r\n    [400, 600, 1.00555, 3300.22, 3702.44, 8.4557],\r\n    [400, 700, 1.12147, 3477.95, 3926.53, 8.6987],\r\n    [400, 800, 1.23722, 3662.51, 4157.4, 8.9244],\r\n    [400, 900, 1.35288, 3853.91, 4395.06, 9.1361],\r\n    [400, 1000, 1.46847, 4052.02, 4639.41, 9.336],\r\n    [400, 1100, 1.58404, 4256.53, 4890.15, 9.5255],\r\n    [400, 1200, 1.69958, 4466.99, 5146.83, 9.7059],\r\n    [400, 1300, 1.81511, 4682.75, 5408.8, 9.878],\r\n    [500, 151.86, 0.37489, 2561.23, 2748.67, 6.8212],\r\n    [500, 200, 0.42492, 2642.91, 2855.37, 7.0592],\r\n    [500, 250, 0.47436, 2723.5, 2960.68, 7.2708],\r\n    [500, 300, 0.52256, 2802.91, 3064.2, 7.4598],\r\n    [500, 350, 0.57012, 2882.59, 3167.65, 7.6328],\r\n    [500, 400, 0.61728, 2963.19, 3271.83, 7.7937],\r\n    [500, 500, 0.71093, 3128.35, 3483.82, 8.0872],\r\n    [500, 600, 0.80406, 3299.64, 3701.67, 8.3521],\r\n    [500, 700, 0.89691, 3477.52, 3925.97, 8.5952],\r\n    [500, 800, 0.98959, 3662.17, 4156.96, 8.8211],\r\n    [500, 900, 1.08217, 3853.63, 4394.71, 9.0329],\r\n    [500, 1000, 1.17469, 4051.76, 4639.11, 9.2328],\r\n    [500, 1100, 1.26718, 4256.29, 4889.88, 9.4224],\r\n    [500, 1200, 1.35964, 4466.76, 5146.58, 9.6028],\r\n    [500, 1300, 1.4521, 4682.52, 5408.57, 9.7749],\r\n    [600, 158.85, 0.31567, 2567.4, 2756.8, 6.76],\r\n    [600, 200, 0.35202, 2638.91, 2850.12, 6.9665],\r\n    [600, 250, 0.39383, 2720.86, 2957.16, 7.1816],\r\n    [600, 300, 0.43437, 2801, 3061.63, 7.3723],\r\n    [600, 350, 0.47424, 2881.12, 3165.66, 7.5463],\r\n    [600, 400, 0.51372, 2962.02, 3270.25, 7.7078],\r\n    [600, 500, 0.59199, 3127.55, 3482.75, 8.002],\r\n    [600, 600, 0.66974, 3299.07, 3700.91, 8.2673],\r\n    [600, 700, 0.7472, 3477.08, 3925.41, 8.5107],\r\n    [600, 800, 0.8245, 3661.83, 4156.52, 8.7367],\r\n    [600, 900, 0.90169, 3853.34, 4394.36, 8.9485],\r\n    [600, 1000, 0.97883, 4051.51, 4638.81, 9.1484],\r\n    [600, 1100, 1.05594, 4256.05, 4889.61, 9.3381],\r\n    [600, 1200, 1.13302, 4466.52, 5146.34, 9.5185],\r\n    [600, 1300, 1.21009, 4682.28, 5408.34, 9.6906],\r\n    [800, 170.43, 0.24043, 2576.79, 2769.13, 6.6627],\r\n    [800, 200, 0.2608, 2630.61, 2839.25, 6.8158],\r\n    [800, 250, 0.29314, 2715.46, 2949.97, 7.0384],\r\n    [800, 300, 0.32411, 2797.14, 3056.43, 7.2327],\r\n    [800, 350, 0.35439, 2878.16, 3161.68, 7.4088],\r\n    [800, 400, 0.38426, 2959.66, 3267.07, 7.5715],\r\n    [800, 500, 0.44331, 3125.95, 3480.6, 7.8672],\r\n    [800, 600, 0.50184, 3297.91, 3699.38, 8.1332],\r\n    [800, 700, 0.56007, 3476.22, 3924.27, 8.377],\r\n    [800, 800, 0.61813, 3661.14, 4155.65, 8.6033],\r\n    [800, 900, 0.6761, 3852.77, 4393.65, 8.8153],\r\n    [800, 1000, 0.73401, 4051, 4638.2, 9.0153],\r\n    [800, 1100, 0.79188, 4255.57, 4889.08, 9.2049],\r\n    [800, 1200, 0.84974, 4466.05, 5145.85, 9.3854],\r\n    [800, 1300, 0.90758, 4681.81, 5407.87, 9.5575],\r\n    [1000, 179.91, 0.19444, 2583.64, 2778.08, 6.5864],\r\n    [1000, 200, 0.20596, 2621.9, 2827.86, 6.6939],\r\n    [1000, 250, 0.23268, 2709.91, 2942.59, 6.9246],\r\n    [1000, 300, 0.25794, 2793.21, 3051.15, 7.1228],\r\n    [1000, 350, 0.28247, 2875.18, 3157.65, 7.301],\r\n    [1000, 400, 0.30659, 2957.29, 3263.88, 7.465],\r\n    [1000, 500, 0.35411, 3124.34, 3478.44, 7.7621],\r\n    [1000, 600, 0.40109, 3296.76, 3697.85, 8.0289],\r\n    [1000, 700, 0.44779, 3475.35, 3923.14, 8.2731],\r\n    [1000, 800, 0.49432, 3660.46, 4154.78, 8.4996],\r\n    [1000, 900, 0.54075, 3852.19, 4392.94, 8.7118],\r\n    [1000, 1000, 0.58712, 4050.49, 4637.6, 8.9119],\r\n    [1000, 1100, 0.63345, 4255.09, 4888.55, 9.1016],\r\n    [1000, 1200, 0.67977, 4465.58, 5145.36, 9.2821],\r\n    [1000, 1300, 0.72608, 4681.33, 5407.41, 9.4542],\r\n    [1200, 187.99, 0.16333, 2588.82, 2784.82, 6.5233],\r\n    [1200, 200, 0.1693, 2612.74, 2815.9, 6.5898],\r\n    [1200, 250, 0.19235, 2704.2, 2935.01, 6.8293],\r\n    [1200, 300, 0.21382, 2789.22, 3045.8, 7.0316],\r\n    [1200, 350, 0.23452, 2872.16, 3153.59, 7.212],\r\n    [1200, 400, 0.2548, 2954.9, 3260.66, 7.3773],\r\n    [1200, 500, 0.29463, 3122.72, 3476.28, 7.6758],\r\n    [1200, 600, 0.33393, 3295.6, 3696.32, 7.9434],\r\n    [1200, 700, 0.37294, 3474.48, 3922.01, 8.1881],\r\n    [1200, 800, 0.41177, 3659.77, 4153.9, 8.4149],\r\n    [1200, 900, 0.45051, 3851.62, 4392.23, 8.6272],\r\n    [1200, 1000, 0.48919, 4049.98, 4637, 8.8274],\r\n    [1200, 1100, 0.52783, 4254.61, 4888.02, 9.0171],\r\n    [1200, 1200, 0.56646, 4465.12, 5144.87, 9.1977],\r\n    [1200, 1300, 0.60507, 4680.86, 5406.95, 9.3698],\r\n    [1400, 195.07, 0.14084, 2592.83, 2790, 6.4692],\r\n    [1400, 200, 0.14302, 2603.09, 2803.32, 6.4975],\r\n    [1400, 250, 0.1635, 2698.32, 2927.22, 6.7467],\r\n    [1400, 300, 0.18228, 2785.16, 3040.35, 6.9533],\r\n    [1400, 350, 0.20026, 2869.12, 3149.49, 7.1359],\r\n    [1400, 400, 0.2178, 2952.5, 3257.42, 7.3025],\r\n    [1400, 500, 0.25215, 3121.1, 3474.11, 7.6026],\r\n    [1400, 600, 0.28596, 3294.44, 3694.78, 7.871],\r\n    [1400, 700, 0.31947, 3473.61, 3920.87, 8.116],\r\n    [1400, 800, 0.35281, 3659.09, 4153.03, 8.3431],\r\n    [1400, 900, 0.38606, 3851.05, 4391.53, 8.5555],\r\n    [1400, 1000, 0.41924, 4049.47, 4636.41, 8.7558],\r\n    [1400, 1100, 0.45239, 4254.14, 4887.49, 8.9456],\r\n    [1400, 1200, 0.48552, 4464.65, 5144.38, 9.1262],\r\n    [1400, 1300, 0.51864, 4680.39, 5406.49, 9.2983],\r\n    [1600, 201.4, 0.1238, 2595.95, 2794.02, 6.4217],\r\n    [1600, 250, 0.14184, 2692.26, 2919.2, 6.6732],\r\n    [1600, 300, 0.15862, 2781.03, 3034.83, 6.8844],\r\n    [1600, 350, 0.17456, 2866.05, 3145.35, 7.0693],\r\n    [1600, 400, 0.19005, 2950.09, 3254.17, 7.2373],\r\n    [1600, 500, 0.22029, 3119.47, 3471.93, 7.5389],\r\n    [1600, 600, 0.24998, 3293.27, 3693.23, 7.808],\r\n    [1600, 700, 0.27937, 3472.74, 3919.73, 8.0535],\r\n    [1600, 800, 0.30859, 3658.4, 4152.15, 8.2808],\r\n    [1600, 900, 0.33772, 3850.47, 4390.82, 8.4934],\r\n    [1600, 1000, 0.36678, 4048.96, 4635.81, 8.6938],\r\n    [1600, 1100, 0.39581, 4253.66, 4886.95, 8.8837],\r\n    [1600, 1200, 0.42482, 4464.18, 5143.89, 9.0642],\r\n    [1600, 1300, 0.45382, 4679.92, 5406.02, 9.2364],\r\n    [1800, 207.15, 0.11042, 2598.38, 2797.13, 6.3793],\r\n    [1800, 250, 0.12497, 2686.02, 2910.96, 6.6066],\r\n    [1800, 300, 0.14021, 2776.83, 3029.21, 6.8226],\r\n    [1800, 350, 0.15457, 2862.95, 3141.18, 7.0099],\r\n    [1800, 400, 0.16847, 2947.66, 3250.9, 7.1793],\r\n    [1800, 500, 0.1955, 3117.84, 3469.75, 7.4824],\r\n    [1800, 600, 0.22199, 3292.1, 3691.69, 7.7523],\r\n    [1800, 700, 0.24818, 3471.87, 3918.59, 7.9983],\r\n    [1800, 800, 0.2742, 3657.71, 4151.27, 8.2258],\r\n    [1800, 900, 0.30012, 3849.9, 4390.11, 8.4386],\r\n    [1800, 1000, 0.32598, 4048.45, 4635.21, 8.639],\r\n    [1800, 1100, 0.3518, 4253.18, 4886.42, 8.829],\r\n    [1800, 1200, 0.37761, 4463.71, 5143.4, 9.0096],\r\n    [1800, 1300, 0.4034, 4679.44, 5405.56, 9.1817],\r\n    [2000, 212.42, 0.09963, 2600.26, 2799.51, 6.3408],\r\n    [2000, 250, 0.11144, 2679.58, 2902.46, 6.5452],\r\n    [2000, 300, 0.12547, 2772.56, 3023.5, 6.7663],\r\n    [2000, 350, 0.13857, 2859.81, 3136.96, 6.9562],\r\n    [2000, 400, 0.1512, 2945.21, 3247.6, 7.127],\r\n    [2000, 450, 0.16353, 3030.41, 3357.48, 7.2844],\r\n    [2000, 500, 0.17568, 3116.2, 3467.55, 7.4316],\r\n    [2000, 600, 0.1996, 3290.93, 3690.14, 7.7023],\r\n    [2000, 700, 0.22323, 3470.99, 3917.45, 7.9487],\r\n    [2000, 800, 0.24668, 3657.03, 4150.4, 8.1766],\r\n    [2000, 900, 0.27004, 3849.33, 4389.4, 8.3895],\r\n    [2000, 1000, 0.29333, 4047.94, 4634.61, 8.59],\r\n    [2000, 1100, 0.31659, 4252.71, 4885.89, 8.78],\r\n    [2000, 1200, 0.33984, 4463.25, 5142.92, 8.9606],\r\n    [2000, 1300, 0.36306, 4678.97, 5405.1, 9.1328],\r\n    [2500, 223.99, 0.07998, 2603.13, 2803.07, 6.2574],\r\n    [2500, 250, 0.087, 2662.55, 2880.06, 6.4084],\r\n    [2500, 300, 0.0989, 2761.56, 3008.81, 6.6437],\r\n    [2500, 350, 0.10976, 2851.84, 3126.24, 6.8402],\r\n    [2500, 400, 0.1201, 2939.03, 3239.28, 7.0147],\r\n    [2500, 450, 0.13014, 3025.43, 3350.77, 7.1745],\r\n    [2500, 500, 0.13998, 3112.08, 3462.04, 7.3233],\r\n    [2500, 600, 0.1593, 3287.99, 3686.25, 7.596],\r\n    [2500, 700, 0.17832, 3468.8, 3914.59, 7.8435],\r\n    [2500, 800, 0.19716, 3655.3, 4148.2, 8.072],\r\n    [2500, 900, 0.2159, 3847.89, 4387.64, 8.2853],\r\n    [2500, 1000, 0.23458, 4046.67, 4633.12, 8.486],\r\n    [2500, 1100, 0.25322, 4251.52, 4884.57, 8.6761],\r\n    [2500, 1200, 0.27185, 4462.08, 5141.7, 8.8569],\r\n    [2500, 1300, 0.29046, 4677.8, 5403.95, 9.0291],\r\n    [3000, 233.9, 0.06668, 2604.1, 2804.14, 6.1869],\r\n    [3000, 250, 0.07058, 2644, 2855.75, 6.2871],\r\n    [3000, 300, 0.08114, 2750.05, 2993.48, 6.5389],\r\n    [3000, 350, 0.09053, 2843.66, 3115.25, 6.7427],\r\n    [3000, 400, 0.09936, 2932.75, 3230.82, 6.9211],\r\n    [3000, 450, 0.10787, 3020.38, 3344, 7.0833],\r\n    [3000, 500, 0.11619, 3107.92, 3456.48, 7.2337],\r\n    [3000, 600, 0.13243, 3285.03, 3682.34, 7.5084],\r\n    [3000, 700, 0.14838, 3466.59, 3911.72, 7.7571],\r\n    [3000, 800, 0.16414, 3653.58, 4146, 7.9862],\r\n    [3000, 900, 0.1798, 3846.46, 4385.87, 8.1999],\r\n    [3000, 1000, 0.19541, 4045.4, 4631.63, 8.4009],\r\n    [3000, 1100, 0.21098, 4250.33, 4883.26, 8.5911],\r\n    [3000, 1200, 0.22652, 4460.92, 5140.49, 8.7719],\r\n    [3000, 1300, 0.24206, 4676.63, 5402.81, 8.9442],\r\n    [4000, 250.4, 0.04978, 2602.27, 2801.38, 6.07],\r\n    [4000, 300, 0.05884, 2725.33, 2960.68, 6.3614],\r\n    [4000, 350, 0.06645, 2826.65, 3092.43, 6.582],\r\n    [4000, 400, 0.07341, 2919.88, 3213.51, 6.7689],\r\n    [4000, 450, 0.08003, 3010.13, 3330.23, 6.9362],\r\n    [4000, 500, 0.08643, 3099.49, 3445.21, 7.09],\r\n    [4000, 600, 0.09885, 3279.06, 3674.44, 7.3688],\r\n    [4000, 700, 0.11095, 3462.15, 3905.94, 7.6198],\r\n    [4000, 800, 0.12287, 3650.11, 4141.59, 7.8502],\r\n    [4000, 900, 0.13469, 3843.59, 4382.34, 8.0647],\r\n    [4000, 1000, 0.14645, 4042.87, 4628.65, 8.2661],\r\n    [4000, 1100, 0.15817, 4247.96, 4880.63, 8.4566],\r\n    [4000, 1200, 0.16987, 4458.6, 5138.07, 8.6376],\r\n    [4000, 1300, 0.18156, 4674.29, 5400.52, 8.8099],\r\n    [5000, 263.99, 0.03944, 2597.12, 2794.33, 5.9733],\r\n    [5000, 300, 0.04532, 2697.94, 2924.53, 6.2083],\r\n    [5000, 350, 0.05194, 2808.67, 3068.39, 6.4492],\r\n    [5000, 400, 0.05781, 2906.58, 3195.64, 6.6458],\r\n    [5000, 450, 0.0633, 2999.64, 3316.15, 6.8185],\r\n    [5000, 500, 0.06857, 3090.92, 3433.76, 6.9758],\r\n    [5000, 550, 0.07368, 3181.82, 3550.23, 7.1217],\r\n    [5000, 600, 0.07869, 3273.01, 3666.47, 7.2588],\r\n    [5000, 700, 0.08849, 3457.67, 3900.13, 7.5122],\r\n    [5000, 800, 0.09811, 3646.62, 4137.17, 7.744],\r\n    [5000, 900, 0.10762, 3840.71, 4378.82, 7.9593],\r\n    [5000, 1000, 0.11707, 4040.35, 4625.69, 8.1612],\r\n    [5000, 1100, 0.12648, 4245.61, 4878.02, 8.3519],\r\n    [5000, 1200, 0.13587, 4456.3, 5135.67, 8.533],\r\n    [5000, 1300, 0.14526, 4671.96, 5398.24, 8.7055],\r\n    [6000, 275.64, 0.03244, 2589.69, 2784.33, 5.8891],\r\n    [6000, 300, 0.03616, 2667.22, 2884.19, 6.0673],\r\n    [6000, 350, 0.04223, 2789.61, 3042.97, 6.3334],\r\n    [6000, 400, 0.04739, 2892.81, 3177.17, 6.5407],\r\n    [6000, 450, 0.05214, 2988.9, 3301.76, 6.7192],\r\n    [6000, 500, 0.05665, 3082.2, 3422.12, 6.8802],\r\n    [6000, 550, 0.06101, 3174.57, 3540.62, 7.0287],\r\n    [6000, 600, 0.06525, 3266.89, 3658.4, 7.1676],\r\n    [6000, 700, 0.07352, 3453.15, 3894.28, 7.4234],\r\n    [6000, 800, 0.0816, 3643.12, 4132.74, 7.6566],\r\n    [6000, 900, 0.08958, 3837.84, 4375.29, 7.8727],\r\n    [6000, 1000, 0.09749, 4037.83, 4622.74, 8.0751],\r\n    [6000, 1100, 0.10536, 4243.26, 4875.42, 8.2661],\r\n    [6000, 1200, 0.11321, 4454, 5133.28, 8.4473],\r\n    [6000, 1300, 0.12106, 4669.64, 5395.97, 8.6199],\r\n    [8000, 295.06, 0.02352, 2569.79, 2757.94, 5.7431],\r\n    [8000, 300, 0.02426, 2590.93, 2784.98, 5.7905],\r\n    [8000, 350, 0.02995, 2747.67, 2987.3, 6.13],\r\n    [8000, 400, 0.03432, 2863.75, 3138.28, 6.3633],\r\n    [8000, 450, 0.03817, 2966.66, 3271.99, 6.555],\r\n    [8000, 500, 0.04175, 3064.3, 3398.27, 6.7239],\r\n    [8000, 550, 0.04516, 3159.76, 3521.01, 6.8778],\r\n    [8000, 600, 0.04845, 3254.43, 3642.03, 7.0205],\r\n    [8000, 700, 0.05481, 3444, 3882.47, 7.2812],\r\n    [8000, 800, 0.06097, 3636.08, 4123.84, 7.5173],\r\n    [8000, 900, 0.06702, 3832.08, 4368.26, 7.735],\r\n    [8000, 1000, 0.07301, 4032.81, 4616.87, 7.9384],\r\n    [8000, 1100, 0.07896, 4238.6, 4870.25, 8.1299],\r\n    [8000, 1200, 0.08489, 4449.45, 5128.54, 8.3115],\r\n    [8000, 1300, 0.0908, 4665.02, 5391.46, 8.4842],\r\n    [10000, 311.06, 0.01803, 2544.41, 2724.67, 5.614],\r\n    [10000, 350, 0.02242, 2699.16, 2923.39, 5.9442],\r\n    [10000, 400, 0.02641, 2832.38, 3096.46, 6.2119],\r\n    [10000, 450, 0.02975, 2943.32, 3240.83, 6.4189],\r\n    [10000, 500, 0.03279, 3045.77, 3373.63, 6.5965],\r\n    [10000, 550, 0.03564, 3144.54, 3500.92, 6.7561],\r\n    [10000, 600, 0.03837, 3241.68, 3625.34, 6.9028],\r\n    [10000, 700, 0.04358, 3434.72, 3870.52, 7.1687],\r\n    [10000, 800, 0.04859, 3628.97, 4114.91, 7.4077],\r\n    [10000, 900, 0.05349, 3826.32, 4361.24, 7.6272],\r\n    [10000, 1000, 0.05832, 4027.81, 4611.04, 7.8315],\r\n    [10000, 1100, 0.06312, 4233.97, 4865.14, 8.0236],\r\n    [10000, 1200, 0.06789, 4444.93, 5123.84, 8.2054],\r\n    [10000, 1300, 0.07265, 4660.44, 5386.99, 8.3783],\r\n    [15000, 342.24, 0.01034, 2455.43, 2610.49, 5.3097],\r\n    [15000, 350, 0.01147, 2520.36, 2692.41, 5.442],\r\n    [15000, 400, 0.01565, 2740.7, 2975.44, 5.881],\r\n    [15000, 450, 0.01845, 2879.47, 3156.15, 6.1403],\r\n    [15000, 500, 0.0208, 2996.52, 3308.53, 6.3442],\r\n    [15000, 550, 0.02293, 3104.71, 3448.61, 6.5198],\r\n    [15000, 600, 0.02491, 3208.64, 3582.3, 6.6775],\r\n    [15000, 650, 0.0268, 3310.37, 3712.32, 6.8223],\r\n    [15000, 700, 0.02861, 3410.94, 3840.12, 6.9572],\r\n    [15000, 800, 0.0321, 3610.99, 4092.43, 7.204],\r\n    [15000, 900, 0.03546, 3811.89, 4343.75, 7.4279],\r\n    [15000, 1000, 0.03875, 4015.41, 4596.63, 7.6347],\r\n    [15000, 1100, 0.042, 4222.55, 4852.56, 7.8282],\r\n    [15000, 1200, 0.04523, 4433.78, 5112.27, 8.0108],\r\n    [15000, 1300, 0.04845, 4649.12, 5375.94, 8.1839],\r\n    [20000, 365.81, 0.00583, 2293.05, 2409.74, 4.9269],\r\n    [20000, 400, 0.00994, 2619.22, 2818.07, 5.5539],\r\n    [20000, 450, 0.0127, 2806.16, 3060.06, 5.9016],\r\n    [20000, 500, 0.01477, 2942.82, 3238.18, 6.14],\r\n    [20000, 550, 0.01656, 3062.34, 3393.45, 6.3347],\r\n    [20000, 600, 0.01818, 3174, 3537.57, 6.5048],\r\n    [20000, 650, 0.01969, 3281.46, 3675.32, 6.6582],\r\n    [20000, 700, 0.02113, 3386.46, 3809.09, 6.7993],\r\n    [20000, 800, 0.02385, 3592.73, 4069.8, 7.0544],\r\n    [20000, 900, 0.02645, 3797.44, 4326.37, 7.283],\r\n    [20000, 1000, 0.02897, 4003.12, 4582.45, 7.4925],\r\n    [20000, 1100, 0.03145, 4211.3, 4840.24, 7.6874],\r\n    [20000, 1200, 0.03391, 4422.81, 5100.96, 7.8706],\r\n    [20000, 1300, 0.03636, 4637.95, 5365.1, 8.0441],\r\n    [30000, 375, 0.001789, 1737.75, 1791.43, 3.9303],\r\n    [30000, 400, 0.00279, 2067.34, 2151.04, 4.4728],\r\n    [30000, 425, 0.005304, 2455.06, 2614.17, 5.1503],\r\n    [30000, 450, 0.006735, 2619.3, 2821.35, 5.4423],\r\n    [30000, 500, 0.008679, 2820.67, 3081.03, 5.7904],\r\n    [30000, 550, 0.010168, 2970.31, 3275.36, 6.0342],\r\n    [30000, 600, 0.011446, 3100.53, 3443.91, 6.233],\r\n    [30000, 650, 0.012596, 3221.04, 3598.93, 6.4057],\r\n    [30000, 700, 0.013661, 3335.84, 3745.67, 6.5606],\r\n    [30000, 800, 0.015623, 3555.6, 4024.31, 6.8332],\r\n    [30000, 900, 0.017448, 3768.48, 4291.93, 7.0717],\r\n    [30000, 1000, 0.019196, 3978.79, 4554.68, 7.2867],\r\n    [30000, 1100, 0.020903, 4189.18, 4816.28, 7.4845],\r\n    [30000, 1200, 0.022589, 4401.29, 5078.97, 7.6691],\r\n    [30000, 1300, 0.024266, 4615.96, 5343.95, 7.8432],\r\n    [40000, 375, 0.001641, 1677.09, 1742.71, 3.8289],\r\n    [40000, 400, 0.001908, 1854.52, 1930.83, 4.1134],\r\n    [40000, 425, 0.002532, 2096.83, 2198.11, 4.5028],\r\n    [40000, 450, 0.003693, 2365.07, 2512.79, 4.9459],\r\n    [40000, 500, 0.005623, 2678.36, 2903.26, 5.4699],\r\n    [40000, 550, 0.006984, 2869.69, 3149.05, 5.7784],\r\n    [40000, 600, 0.008094, 3022.61, 3346.38, 6.0113],\r\n    [40000, 650, 0.009064, 3158.04, 3520.58, 6.2054],\r\n    [40000, 700, 0.009942, 3283.63, 3681.29, 6.375],\r\n    [40000, 800, 0.011523, 3517.89, 3978.8, 6.6662],\r\n    [40000, 900, 0.012963, 3739.42, 4257.93, 6.915],\r\n    [40000, 1000, 0.014324, 3954.64, 4527.59, 7.1356],\r\n    [40000, 1100, 0.015643, 4167.38, 4793.08, 7.3364],\r\n    [40000, 1200, 0.01694, 4380.11, 5057.72, 7.5224],\r\n    [40000, 1300, 0.018229, 4594.28, 5323.45, 7.6969],\r\n  ],\r\n  b14: [\r\n    [500, 0.01, 0.000999, 0.01, 0.51, 0],\r\n    [500, 20, 0.001002, 83.91, 84.41, 0.2965],\r\n    [500, 40, 0.001008, 167.47, 167.98, 0.5722],\r\n    [500, 60, 0.001017, 251, 251.51, 0.8308],\r\n    [500, 80, 0.001029, 334.73, 335.24, 1.0749],\r\n    [500, 100, 0.001043, 418.8, 419.32, 1.3065],\r\n    [500, 120, 0.00106, 503.37, 503.9, 1.5273],\r\n    [500, 140, 0.00108, 588.66, 589.2, 1.7389],\r\n    [500, 151.86, 0.001093, 639.66, 640.21, 1.8606],\r\n    [2000, 0.01, 0.000999, 0.03, 2.03, 0.0001],\r\n    [2000, 20, 0.001001, 83.82, 85.82, 0.2962],\r\n    [2000, 40, 0.001007, 167.29, 169.3, 0.5716],\r\n    [2000, 60, 0.001016, 250.73, 252.77, 0.83],\r\n    [2000, 80, 0.001028, 334.38, 336.44, 1.0739],\r\n    [2000, 100, 0.001043, 418.36, 420.45, 1.3053],\r\n    [2000, 120, 0.001059, 502.84, 504.96, 1.5259],\r\n    [2000, 140, 0.001079, 588.02, 590.18, 1.7373],\r\n    [2000, 160, 0.001101, 674.14, 676.34, 1.941],\r\n    [2000, 180, 0.001127, 761.46, 763.71, 2.1382],\r\n    [2000, 200, 0.001156, 850.3, 852.61, 2.3301],\r\n    [2000, 212.42, 0.001177, 906.42, 908.77, 2.4473],\r\n    [5000, 0, 0.000998, 0.03, 5.02, 0.0001],\r\n    [5000, 20, 0.001, 83.64, 88.64, 0.2955],\r\n    [5000, 40, 0.001006, 166.93, 171.95, 0.5705],\r\n    [5000, 60, 0.001015, 250.21, 255.28, 0.8284],\r\n    [5000, 80, 0.001027, 333.69, 338.83, 1.0719],\r\n    [5000, 100, 0.001041, 417.5, 422.71, 1.303],\r\n    [5000, 120, 0.001058, 501.79, 507.07, 1.5232],\r\n    [5000, 140, 0.001077, 586.74, 592.13, 1.7342],\r\n    [5000, 160, 0.001099, 672.61, 678.1, 1.9374],\r\n    [5000, 180, 0.001124, 759.62, 765.24, 2.1341],\r\n    [5000, 200, 0.001153, 848.08, 853.85, 2.3254],\r\n    [5000, 220, 0.001187, 938.43, 944.36, 2.5128],\r\n    [5000, 240, 0.001226, 1031.34, 1037.47, 2.6978],\r\n    [5000, 260, 0.001275, 1127.92, 1134.3, 2.8829],\r\n    [5000, 263.99, 0.001286, 1147.78, 1154.21, 2.9201],\r\n    [10000, 0, 0.000995, 0.1, 10.05, 0.0003],\r\n    [10000, 20, 0.000997, 83.35, 93.32, 0.2945],\r\n    [10000, 40, 0.001003, 166.33, 176.36, 0.5685],\r\n    [10000, 60, 0.001013, 249.34, 259.47, 0.8258],\r\n    [10000, 80, 0.001025, 332.56, 342.81, 1.0687],\r\n    [10000, 100, 0.001039, 416.09, 426.48, 1.2992],\r\n    [10000, 120, 0.001055, 500.07, 510.61, 1.5188],\r\n    [10000, 140, 0.001074, 584.67, 595.4, 1.7291],\r\n    [10000, 160, 0.001195, 670.11, 681.07, 1.9316],\r\n    [10000, 180, 0.00112, 756.63, 767.83, 2.1274],\r\n    [10000, 200, 0.001148, 844.49, 855.97, 2.3178],\r\n    [10000, 220, 0.001181, 934.07, 945.88, 2.5038],\r\n    [10000, 240, 0.001219, 1025.94, 1038.13, 2.6872],\r\n    [10000, 260, 0.001265, 1121.03, 1133.68, 2.8698],\r\n    [10000, 280, 0.001322, 1220.9, 1234.11, 3.0547],\r\n    [10000, 300, 0.001397, 1328.34, 1342.31, 3.2468],\r\n    [10000, 311.06, 0.001452, 1393, 1407.53, 3.3595],\r\n    [15000, 0, 0.000993, 0.15, 15.04, 0.0004],\r\n    [15000, 20, 0.000995, 83.05, 97.97, 0.2934],\r\n    [15000, 40, 0.001001, 165.73, 180.75, 0.5665],\r\n    [15000, 60, 0.001011, 248.49, 263.65, 0.8231],\r\n    [15000, 80, 0.001022, 331.46, 346.79, 1.0655],\r\n    [15000, 100, 0.001036, 414.72, 430.26, 1.2954],\r\n    [15000, 120, 0.001052, 498.39, 514.17, 1.5144],\r\n    [15000, 140, 0.001071, 582.64, 598.7, 1.7241],\r\n    [15000, 160, 0.001092, 667.69, 684.07, 1.9259],\r\n    [15000, 180, 0.001116, 753.74, 770.48, 2.1209],\r\n    [15000, 200, 0.001143, 841.04, 858.18, 2.3103],\r\n    [15000, 220, 0.001175, 929.89, 947.52, 2.4952],\r\n    [15000, 240, 0.001211, 1020.82, 1038.99, 2.677],\r\n    [15000, 260, 0.001255, 1114.59, 1133.41, 2.8575],\r\n    [15000, 280, 0.001308, 1212.47, 1232.09, 3.0392],\r\n    [15000, 300, 0.001377, 1316.58, 1337.23, 3.2259],\r\n    [15000, 320, 0.001472, 1431.05, 1453.13, 3.4246],\r\n    [15000, 340, 0.001631, 1567.42, 1591.88, 3.6545],\r\n    [15000, 342.24, 0.001658, 1585.58, 1610.45, 3.6847],\r\n    [20000, 0, 0.00099, 0.2, 20, 0.0004],\r\n    [20000, 20, 0.000993, 82.75, 102.61, 0.2922],\r\n    [20000, 40, 0.000999, 165.15, 185.14, 0.5646],\r\n    [20000, 60, 0.001008, 247.66, 267.82, 0.8205],\r\n    [20000, 80, 0.00102, 330.38, 350.78, 1.0623],\r\n    [20000, 100, 0.001034, 413.37, 434.04, 1.2917],\r\n    [20000, 120, 0.00105, 496.75, 517.74, 1.5101],\r\n    [20000, 140, 0.001068, 580.67, 602.03, 1.7192],\r\n    [20000, 160, 0.001089, 665.34, 687.11, 1.9203],\r\n    [20000, 180, 0.001112, 750.94, 773.18, 2.1146],\r\n    [20000, 200, 0.001139, 837.7, 860.47, 2.3031],\r\n    [20000, 220, 0.001169, 925.89, 949.27, 2.4869],\r\n    [20000, 240, 0.001205, 1015.94, 1040.04, 2.6673],\r\n    [20000, 260, 0.001246, 1108.53, 1133.45, 2.8459],\r\n    [20000, 280, 0.001297, 1204.69, 1230.62, 3.0248],\r\n    [20000, 300, 0.00136, 1306.1, 1333.29, 3.2071],\r\n    [20000, 320, 0.001444, 1415.66, 1444.53, 3.3978],\r\n    [20000, 340, 0.001568, 1539.64, 1571.01, 3.6074],\r\n    [20000, 360, 0.001823, 1702.78, 1739.23, 3.877],\r\n    [20000, 365.81, 0.002035, 1785.47, 1826.18, 4.0137],\r\n    [30000, 0, 0.000986, 0.25, 29.82, 0.0001],\r\n    [30000, 20, 0.000989, 82.16, 111.82, 0.2898],\r\n    [30000, 40, 0.000995, 164.01, 193.87, 0.5606],\r\n    [30000, 60, 0.001004, 246.03, 276.16, 0.8153],\r\n    [30000, 80, 0.001016, 328.28, 358.75, 1.0561],\r\n    [30000, 100, 0.001029, 410.76, 441.63, 1.2844],\r\n    [30000, 120, 0.001044, 493.58, 524.91, 1.5017],\r\n    [30000, 140, 0.001062, 576.86, 608.73, 1.7097],\r\n    [30000, 160, 0.001082, 660.81, 693.27, 1.9095],\r\n    [30000, 180, 0.001105, 745.57, 778.71, 2.1024],\r\n    [30000, 200, 0.00113, 831.34, 865.24, 2.2892],\r\n    [30000, 220, 0.001159, 918.32, 953.09, 2.471],\r\n    [30000, 240, 0.001192, 1006.84, 1042.6, 2.6489],\r\n    [30000, 260, 0.00123, 1097.38, 1134.29, 2.8242],\r\n    [30000, 280, 0.001275, 1190.69, 1228.96, 2.9985],\r\n    [30000, 300, 0.00133, 1287.89, 1327.8, 3.174],\r\n    [30000, 320, 0.0014, 1390.64, 1432.63, 3.3538],\r\n    [30000, 340, 0.001492, 1501.71, 1546.47, 3.5425],\r\n    [30000, 360, 0.001627, 1626.57, 1675.36, 3.7492],\r\n    [30000, 380, 0.001869, 1781.35, 1837.43, 4.001],\r\n    [50000, 0, 0.000977, 0.2, 49.03, -0.0014],\r\n    [50000, 20, 0.00098, 80.98, 130, 0.2847],\r\n    [50000, 40, 0.000987, 161.84, 211.2, 0.5526],\r\n    [50000, 60, 0.000996, 242.96, 292.77, 0.8051],\r\n    [50000, 80, 0.001007, 324.32, 374.68, 1.0439],\r\n    [50000, 100, 0.00102, 405.86, 456.87, 1.2703],\r\n    [50000, 120, 0.001035, 487.63, 539.37, 1.4857],\r\n    [50000, 140, 0.001052, 569.76, 622.33, 1.6915],\r\n    [50000, 160, 0.00107, 652.39, 705.91, 1.889],\r\n    [50000, 180, 0.001091, 735.68, 790.24, 2.0793],\r\n    [50000, 200, 0.001115, 819.73, 875.46, 2.2634],\r\n    [50000, 220, 0.001141, 904.67, 961.71, 2.4419],\r\n    [50000, 240, 0.00117, 990.69, 1049.2, 2.6158],\r\n    [50000, 260, 0.001203, 1078.06, 1138.23, 2.786],\r\n    [50000, 280, 0.001242, 1167.19, 1229.26, 2.9536],\r\n    [50000, 300, 0.001286, 1258.66, 1322.95, 3.12],\r\n    [50000, 320, 0.001339, 1353.23, 1420.17, 3.2867],\r\n    [50000, 340, 0.001403, 1451.91, 1522.07, 3.4556],\r\n    [50000, 360, 0.001484, 1555.97, 1630.16, 3.629],\r\n    [50000, 380, 0.001588, 1667.13, 1746.54, 3.81],\r\n  ],\r\n  b21: [\r\n    [-50, 40.9, 0.001424, 2.62557, 2.627, -43.82, 1309.1, 1265.2, -43.76, 1416.3, 1372.6, -0.1916, 6.347, 6.1554],\r\n    [-45, 54.5, 0.001437, 2.00489, 2.00632, -22.01, 1293.5, 1271.4, -21.94, 1402.8, 1380.8, -0.095, 6.1484, 6.0534],\r\n    [-40, 71.7, 0.00145, 1.55111, 1.55256, -0.1, 1277.6, 1277.4, 0, 1388.8, 1388.8, 0, 5.9567, 5.9567],\r\n    [-35, 93.2, 0.001463, 1.21466, 1.21613, 21.93, 1261.3, 1283.3, 22.06, 1374.5, 1396.5, 0.0935, 5.7715, 5.865],\r\n    [-30, 119.5, 0.001476, 0.96192, 0.96339, 44.08, 1244.8, 1288.9, 44.26, 1359.8, 1404, 0.1856, 5.5922, 5.7778],\r\n    [-25, 151.6, 0.00149, 0.7697, 0.77119, 66.36, 1227.9, 1294.3, 66.58, 1344.6, 1411.2, 0.2763, 5.4185, 5.6947],\r\n    [-20, 190.2, 0.001504, 0.62184, 0.62334, 88.76, 1210.7, 1299.5, 89.05, 1329, 1418, 0.3657, 5.2498, 5.6155],\r\n    [-15, 236.3, 0.001519, 0.50686, 0.50838, 111.3, 1193.2, 1304.5, 111.66, 1312.9, 1424.6, 0.4538, 5.0859, 5.5397],\r\n    [-10, 290.9, 0.001534, 0.41655, 0.41808, 133.96, 1175.2, 1309.2, 134.41, 1296.4, 1430.8, 0.5408, 4.9265, 5.4673],\r\n    [-5, 354.9, 0.00155, 0.34493, 0.34648, 156.76, 1157, 1313.7, 157.31, 1279.4, 1436.7, 0.6266, 4.7711, 5.3977],\r\n    [0, 429.6, 0.001566, 0.28763, 0.2892, 179.69, 1138.3, 1318, 180.36, 1261.8, 1442.2, 0.7114, 4.6195, 5.3309],\r\n    [5, 515.9, 0.001583, 0.2414, 0.24299, 202.77, 1119.2, 1322, 203.58, 1243.7, 1447.3, 0.7951, 4.4715, 5.2666],\r\n    [10, 615.2, 0.0016, 0.20381, 0.20541, 225.99, 1099.7, 1325.7, 226.97, 1225.1, 1452, 0.8779, 4.3266, 5.2045],\r\n    [15, 728.6, 0.001619, 0.173, 0.17462, 249.36, 1079.7, 1329.1, 250.54, 1205.8, 1456.3, 0.9598, 4.1846, 5.1444],\r\n    [20, 857.5, 0.001638, 0.14758, 0.14922, 272.89, 1059.3, 1332.2, 274.3, 1185.9, 1460.2, 1.0408, 4.0452, 5.086],\r\n    [25, 1003.2, 0.001658, 0.12647, 0.12813, 296.59, 1038.4, 1335, 298.25, 1165.2, 1463.5, 1.121, 3.9083, 5.0293],\r\n    [30, 1167, 0.00168, 0.10881, 0.11049, 320.46, 1016.9, 1337.4, 322.42, 1143.9, 1466.3, 1.2005, 3.7734, 4.9738],\r\n    [35, 1350.4, 0.001702, 0.09397, 0.09567, 344.5, 994.9, 1339.4, 346.8, 1121.8, 1468.6, 1.2792, 3.6403, 4.9196],\r\n    [40, 1554.9, 0.001725, 0.08141, 0.08313, 368.74, 972.2, 1341, 371.43, 1098.8, 1470.2, 1.3574, 3.5088, 4.8662],\r\n    [45, 1782, 0.00175, 0.07073, 0.07248, 393.19, 948.9, 1342.1, 396.31, 1074.9, 1471.2, 1.435, 3.3786, 4.8136],\r\n    [50, 2033.1, 0.001777, 0.06159, 0.06337, 417.87, 924.8, 1342.7, 421.48, 1050, 1471.5, 1.5121, 3.2493, 4.7614],\r\n    [55, 2310.1, 0.001804, 0.05375, 0.05555, 442.79, 899.9, 1342.7, 446.96, 1024.1, 1471, 1.5888, 3.1208, 4.7095],\r\n    [60, 2614.4, 0.001834, 0.04697, 0.0488, 467.99, 874.2, 1342.1, 472.79, 997, 1469.7, 1.6652, 2.9925, 4.6577],\r\n    [65, 2947.8, 0.001866, 0.04109, 0.04296, 493.51, 847.4, 1340.9, 499.01, 968.5, 1467.5, 1.7415, 2.8642, 4.6057],\r\n    [70, 3312, 0.0019, 0.03597, 0.03787, 519.39, 819.5, 1338.9, 525.69, 938.7, 1464.4, 1.8178, 2.7354, 4.3533],\r\n    [75, 3709, 0.001937, 0.03148, 0.03341, 545.7, 790.4, 1336.1, 552.88, 907.2, 1460.1, 1.8943, 2.6058, 4.5001],\r\n    [80, 4140.5, 0.001978, 0.02753, 0.02951, 572.5, 759.9, 1332.4, 580.69, 873.9, 1454.6, 1.9712, 2.4746, 4.4458],\r\n    [85, 4608.6, 0.002022, 0.02404, 0.02606, 599.9, 727.8, 1327.7, 609.21, 838.6, 1447.8, 2.0488, 2.3413, 4.3901],\r\n    [90, 5115.3, 0.002071, 0.02093, 0.023, 627.99, 693.7, 1321.7, 638.59, 800.8, 1439.4, 2.1273, 2.2051, 4.3325],\r\n    [95, 5662.9, 0.002126, 0.01815, 0.02028, 656.95, 657.4, 1314.4, 668.99, 760.2, 1429.2, 2.2073, 2.065, 4.2723],\r\n    [100, 6253.7, 0.002188, 0.01565, 0.01784, 686.96, 618.4, 1305.3, 700.64, 716.2, 1416.9, 2.2893, 1.9195, 4.2088],\r\n    [105, 6890.4, 0.002261, 0.01337, 0.01564, 718.3, 575.9, 1294.2, 733.87, 668.1, 1402, 2.374, 1.7667, 4.1407],\r\n    [110, 7575.7, 0.002347, 0.01128, 0.01363, 751.37, 529.1, 1280.5, 769.15, 614.6, 1383.7, 2.4625, 1.604, 4.0665],\r\n    [115, 8313.3, 0.002452, 0.00933, 0.01178, 786.82, 476.2, 1263.1, 807.21, 553.8, 1361, 2.5566, 1.4267, 3.9833],\r\n    [120, 9107.2, 0.002589, 0.00744, 0.01003, 825.77, 414.5, 1240.3, 849.36, 482.3, 1331.7, 2.6593, 1.2268, 3.8861],\r\n    [125, 9963.5, 0.002783, 0.00554, 0.00833, 870.69, 337.7, 1208.4, 898.42, 393, 1291.4, 2.7775, 0.987, 3.7645],\r\n    [130, 10891.6, 0.003122, 0.00337, 0.00649, 929.29, 226.9, 1156.2, 963.29, 263.7, 1227, 2.9326, 0.654, 3.5866],\r\n    [132.3, 11333.2, 0.004255, 0, 0.00426, 1037.62, 0, 1037.6, 1085.85, 0, 1085.9, 3.2316, 0, 3.2316],\r\n  ],\r\n  b22: [\r\n    [50, -46.53, 2.1752, 1269.6, 1378.3, 6.0839],\r\n    [50, -30, 2.3448, 1296.2, 1413.4, 6.2333],\r\n    [50, -20, 2.4463, 1312.3, 1434.6, 6.3187],\r\n    [50, -10, 2.5471, 1328.4, 1455.7, 6.4006],\r\n    [50, 0, 2.6474, 1344.5, 1476.9, 6.4795],\r\n    [50, 10, 2.7472, 1360.7, 1498.1, 6.5556],\r\n    [50, 20, 2.8466, 1377, 1519.3, 6.6293],\r\n    [50, 30, 2.9458, 1393.3, 1540.6, 6.7008],\r\n    [50, 40, 3.0447, 1409.8, 1562, 6.7703],\r\n    [50, 50, 3.1435, 1426.3, 1583.5, 6.8379],\r\n    [50, 60, 3.2421, 1443, 1605.1, 6.9038],\r\n    [50, 70, 3.3406, 1459.9, 1626.9, 6.9682],\r\n    [50, 80, 3.439, 1476.9, 1648.8, 7.0312],\r\n    [50, 100, 3.6355, 1511.4, 1693.2, 7.1533],\r\n    [50, 120, 3.8318, 1546.6, 1738.2, 7.2708],\r\n    [50, 140, 4.028, 1582.5, 1783.9, 7.3842],\r\n    [50, 160, 4.224, 1619.2, 1830.4, 7.4941],\r\n    [50, 180, 4.4199, 1656.7, 1877.7, 7.6008],\r\n    [50, 200, 4.6157, 1694.9, 1925.7, 7.7045],\r\n    [100, -33.6, 1.1381, 1284.9, 1398.7, 5.8401],\r\n    [100, -30, 1.1573, 1291, 1406.7, 5.8734],\r\n    [100, -20, 1.2101, 1307.8, 1428.8, 5.9626],\r\n    [100, -10, 1.2621, 1324.6, 1450.8, 6.0477],\r\n    [100, 0, 1.3136, 1341.3, 1472.6, 6.1291],\r\n    [100, 10, 1.3647, 1357.9, 1494.4, 6.2073],\r\n    [100, 20, 1.4153, 1374.5, 1516.1, 6.2826],\r\n    [100, 30, 1.4657, 1391.2, 1537.7, 6.3553],\r\n    [100, 40, 1.5158, 1407.9, 1559.5, 6.4258],\r\n    [100, 50, 1.5658, 1424.7, 1581.2, 6.4943],\r\n    [100, 60, 1.6156, 1441.5, 1603.1, 6.5609],\r\n    [100, 70, 1.6653, 1458.5, 1625.1, 6.6258],\r\n    [100, 80, 1.7148, 1475.6, 1647.1, 6.6892],\r\n    [100, 100, 1.8137, 1510.3, 1691.7, 6.812],\r\n    [100, 120, 1.9124, 1545.7, 1736.9, 6.93],\r\n    [100, 140, 2.0109, 1581.7, 1782.8, 7.0439],\r\n    [100, 160, 2.1093, 1618.5, 1829.4, 7.154],\r\n    [100, 180, 2.2075, 1656, 1876.8, 7.2609],\r\n    [100, 200, 2.3057, 1694.3, 1924.9, 7.3648],\r\n    [150, -25.22, 0.7787, 1294.1, 1410.9, 5.6983],\r\n    [150, -20, 0.7977, 1303.3, 1422.9, 5.7465],\r\n    [150, -10, 0.8336, 1320.7, 1445.7, 5.8349],\r\n    [150, 0, 0.8689, 1337.9, 1468.3, 5.9189],\r\n    [150, 10, 0.9037, 1355, 1490.6, 5.9992],\r\n    [150, 20, 0.9382, 1372, 1512.8, 6.0761],\r\n    [150, 30, 0.9723, 1389, 1534.9, 6.1502],\r\n    [150, 40, 1.0062, 1406, 1556.9, 6.2217],\r\n    [150, 50, 1.0398, 1423, 1578.9, 6.291],\r\n    [150, 60, 1.0734, 1440, 1601, 6.3583],\r\n    [150, 70, 1.1068, 1457.2, 1623.2, 6.4238],\r\n    [150, 80, 1.1401, 1474.4, 1645.4, 6.4877],\r\n    [150, 100, 1.2065, 1509.3, 1690.2, 6.6112],\r\n    [150, 120, 1.2726, 1544.8, 1735.6, 6.7297],\r\n    [150, 140, 1.3386, 1580.9, 1781.7, 6.8439],\r\n    [150, 160, 1.4044, 1617.8, 1828.4, 6.9544],\r\n    [150, 180, 1.4701, 1655.4, 1875.9, 7.0615],\r\n    [150, 200, 1.5357, 1693.7, 1924.1, 7.1656],\r\n    [150, 220, 1.6013, 1732.9, 1973.1, 7.267],\r\n    [200, -18.86, 0.5946, 1300.6, 1419.6, 5.5979],\r\n    [200, -10, 0.6193, 1316.7, 1440.6, 5.6791],\r\n    [200, 0, 0.6465, 1334.5, 1463.8, 5.7659],\r\n    [200, 10, 0.6732, 1352.1, 1486.8, 5.8484],\r\n    [200, 20, 0.6995, 1369.5, 1509.4, 5.927],\r\n    [200, 30, 0.7255, 1386.8, 1531.9, 6.0025],\r\n    [200, 40, 0.7513, 1404, 1554.3, 6.0751],\r\n    [200, 50, 0.7769, 1421.3, 1576.6, 6.1453],\r\n    [200, 60, 0.8023, 1438.5, 1598.9, 6.2133],\r\n    [200, 70, 0.8275, 1455.8, 1621.3, 6.2794],\r\n    [200, 80, 0.8527, 1473.1, 1643.7, 6.3437],\r\n    [200, 100, 0.9028, 1508.2, 1688.8, 6.4679],\r\n    [200, 120, 0.9527, 1543.8, 1734.4, 6.5869],\r\n    [200, 140, 1.0024, 1580.1, 1780.6, 6.7015],\r\n    [200, 160, 1.0519, 1617, 1827.4, 6.8123],\r\n    [200, 180, 1.1014, 1654.7, 1875, 6.9196],\r\n    [200, 200, 1.1507, 1693.2, 1923.3, 7.0239],\r\n    [200, 220, 1.2, 1732.4, 1972.4, 7.1255],\r\n    [300, -9.24, 0.40607, 1309.9, 1431.7, 5.4565],\r\n    [300, 0, 0.42382, 1327.5, 1454.7, 5.542],\r\n    [300, 10, 0.44251, 1346.1, 1478.9, 5.629],\r\n    [300, 20, 0.46077, 1364.4, 1502.6, 5.7113],\r\n    [300, 30, 0.4787, 1382.3, 1526, 5.7896],\r\n    [300, 40, 0.49636, 1400.1, 1549, 5.8645],\r\n    [300, 50, 0.51382, 1417.8, 1571.9, 5.9365],\r\n    [300, 60, 0.53111, 1435.4, 1594.7, 6.006],\r\n    [300, 70, 0.54827, 1453, 1617.5, 6.0732],\r\n    [300, 80, 0.56532, 1470.6, 1640.2, 6.1385],\r\n    [300, 100, 0.59916, 1506.1, 1685.8, 6.2642],\r\n    [300, 120, 0.63276, 1542, 1731.8, 6.3842],\r\n    [300, 140, 0.66618, 1578.5, 1778.3, 6.4996],\r\n    [300, 160, 0.69946, 1615.6, 1825.4, 6.6109],\r\n    [300, 180, 0.73263, 1653.4, 1873.2, 6.7188],\r\n    [300, 200, 0.76572, 1692, 1921.7, 6.8235],\r\n    [300, 220, 0.79872, 1731.3, 1970.9, 6.9254],\r\n    [300, 240, 0.83167, 1771.4, 2020.9, 7.0247],\r\n    [300, 260, 0.86455, 1812.2, 2071.6, 7.1217],\r\n    [400, -1.89, 0.30942, 1316.4, 1440.2, 5.3559],\r\n    [400, 0, 0.31227, 1320.2, 1445.1, 5.3741],\r\n    [400, 10, 0.32701, 1339.9, 1470.7, 5.4663],\r\n    [400, 20, 0.34129, 1359.1, 1495.6, 5.5525],\r\n    [400, 30, 0.3552, 1377.7, 1519.8, 5.6338],\r\n    [400, 40, 0.36884, 1396.1, 1543.6, 5.7111],\r\n    [400, 50, 0.38226, 1414.2, 1567.1, 5.785],\r\n    [400, 60, 0.3955, 1432.2, 1590.4, 5.856],\r\n    [400, 70, 0.4086, 1450.1, 1613.6, 5.9244],\r\n    [400, 80, 0.4216, 1468, 1636.7, 5.9907],\r\n    [400, 100, 0.44732, 1503.9, 1682.8, 6.1179],\r\n    [400, 120, 0.47279, 1540.1, 1729.2, 6.239],\r\n    [400, 140, 0.49808, 1576.8, 1776, 6.3552],\r\n    [400, 160, 0.52323, 1614.1, 1823.4, 6.4671],\r\n    [400, 180, 0.54827, 1652.1, 1871.4, 6.5755],\r\n    [400, 200, 0.57321, 1690.8, 1920.1, 6.6806],\r\n    [400, 220, 0.59809, 1730.3, 1969.5, 6.7828],\r\n    [400, 240, 0.62289, 1770.5, 2019.6, 6.8825],\r\n    [400, 260, 0.64764, 1811.4, 2070.5, 6.9797],\r\n    [500, 4.13, 0.25035, 1321.3, 1446.5, 5.2776],\r\n    [500, 10, 0.25757, 1333.5, 1462.3, 5.334],\r\n    [500, 20, 0.26949, 1353.6, 1488.3, 5.4244],\r\n    [500, 30, 0.28103, 1373, 1513.5, 5.509],\r\n    [500, 40, 0.29227, 1392, 1538.1, 5.5889],\r\n    [500, 50, 0.30328, 1410.6, 1562.2, 5.6647],\r\n    [500, 60, 0.3141, 1429, 1586.1, 5.7373],\r\n    [500, 70, 0.32478, 1447.3, 1609.6, 5.807],\r\n    [500, 80, 0.33535, 1465.4, 1633.1, 5.8744],\r\n    [500, 100, 0.35621, 1501.7, 1679.8, 6.0031],\r\n    [500, 120, 0.37681, 1538.2, 1726.6, 6.1253],\r\n    [500, 140, 0.39722, 1575.2, 1773.8, 6.2422],\r\n    [500, 160, 0.41748, 1612.7, 1821.4, 6.3548],\r\n    [500, 180, 0.43764, 1650.8, 1869.6, 6.4636],\r\n    [500, 200, 0.45771, 1689.6, 1918.5, 6.5691],\r\n    [500, 220, 0.4777, 1729.2, 1968.1, 6.6717],\r\n    [500, 240, 0.49763, 1769.5, 2018.3, 6.7717],\r\n    [500, 260, 0.51749, 1810.6, 2069.3, 6.8692],\r\n    [600, 9.28, 0.21038, 1325.2, 1451.4, 5.2133],\r\n    [600, 10, 0.21115, 1326.7, 1453.4, 5.2205],\r\n    [600, 20, 0.22154, 1347.9, 1480.8, 5.3156],\r\n    [600, 30, 0.23152, 1368.2, 1507.1, 5.4037],\r\n    [600, 40, 0.24118, 1387.8, 1532.5, 5.4862],\r\n    [600, 50, 0.25059, 1406.9, 1557.3, 5.5641],\r\n    [600, 60, 0.25981, 1425.7, 1581.6, 5.6383],\r\n    [600, 70, 0.26888, 1444.3, 1605.7, 5.7094],\r\n    [600, 80, 0.27783, 1462.8, 1629.5, 5.7778],\r\n    [600, 100, 0.29545, 1499.5, 1676.8, 5.9081],\r\n    [600, 120, 0.31281, 1536.3, 1724, 6.0314],\r\n    [600, 140, 0.32997, 1573.5, 1771.5, 6.1491],\r\n    [600, 160, 0.34699, 1611.2, 1819.4, 6.2623],\r\n    [600, 180, 0.36389, 1649.5, 1867.8, 6.3717],\r\n    [600, 200, 0.38071, 1688.5, 1916.9, 6.4776],\r\n    [600, 220, 0.39745, 1728.2, 1966.6, 6.5806],\r\n    [600, 240, 0.41412, 1768.6, 2017, 6.6808],\r\n    [600, 260, 0.43073, 1809.8, 2068.2, 6.7786],\r\n    [800, 17.85, 0.15958, 1330.9, 1458.6, 5.111],\r\n    [800, 20, 0.16138, 1335.8, 1464.9, 5.1328],\r\n    [800, 30, 0.16947, 1358, 1493.5, 5.2287],\r\n    [800, 40, 0.1772, 1379, 1520.8, 5.3171],\r\n    [800, 50, 0.18465, 1399.3, 1547, 5.3996],\r\n    [800, 60, 0.19189, 1419, 1572.5, 5.4774],\r\n    [800, 70, 0.19896, 1438.3, 1597.5, 5.5513],\r\n    [800, 80, 0.2059, 1457.4, 1622.1, 5.6219],\r\n    [800, 100, 0.21949, 1495, 1670.6, 5.7555],\r\n    [800, 120, 0.2328, 1532.5, 1718.7, 5.8811],\r\n    [800, 140, 0.2459, 1570.1, 1766.9, 6.0006],\r\n    [800, 160, 0.25886, 1608.2, 1815.3, 6.115],\r\n    [800, 180, 0.2717, 1646.8, 1864.2, 6.2254],\r\n    [800, 200, 0.28445, 1686.1, 1913.6, 6.3322],\r\n    [800, 220, 0.29712, 1726, 1963.7, 6.4358],\r\n    [800, 240, 0.30973, 1766.7, 2014.5, 6.5367],\r\n    [800, 260, 0.32228, 1808.1, 2065.9, 6.635],\r\n    [800, 280, 0.33477, 1850.2, 2118, 6.731],\r\n    [800, 300, 0.34722, 1893.1, 2170.9, 6.8248],\r\n    [1000, 24.9, 0.12852, 1334.9, 1463.4, 5.0304],\r\n    [1000, 30, 0.13206, 1347.1, 1479.1, 5.0826],\r\n    [1000, 40, 0.13868, 1369.8, 1508.5, 5.1778],\r\n    [1000, 50, 0.14499, 1391.3, 1536.3, 5.2654],\r\n    [1000, 60, 0.15106, 1412.1, 1563.1, 5.3471],\r\n    [1000, 70, 0.15695, 1432.2, 1589.1, 5.424],\r\n    [1000, 80, 0.1627, 1451.9, 1614.6, 5.4971],\r\n    [1000, 100, 0.17389, 1490.5, 1664.3, 5.6342],\r\n    [1000, 120, 0.18477, 1528.6, 1713.4, 5.7622],\r\n    [1000, 140, 0.19545, 1566.8, 1762.2, 5.8834],\r\n    [1000, 160, 0.20597, 1605.2, 1811.2, 5.9992],\r\n    [1000, 180, 0.21638, 1644.2, 1860.5, 6.1105],\r\n    [1000, 200, 0.22669, 1683.7, 1910.4, 6.2182],\r\n    [1000, 220, 0.23693, 1723.9, 1960.8, 6.3226],\r\n    [1000, 240, 0.2471, 1764.8, 2011.9, 6.4241],\r\n    [1000, 260, 0.2572, 1806.4, 2063.6, 6.5229],\r\n    [1000, 280, 0.26726, 1848.8, 2116, 6.6194],\r\n    [1000, 300, 0.27726, 1891.8, 2169.1, 6.7137],\r\n    [1200, 30.94, 0.10751, 1337.8, 1466.8, 4.9635],\r\n    [1200, 40, 0.11287, 1360, 1495.4, 5.0564],\r\n    [1200, 50, 0.11846, 1383, 1525.1, 5.1497],\r\n    [1200, 60, 0.12378, 1404.8, 1553.3, 5.2357],\r\n    [1200, 70, 0.1289, 1425.8, 1580.5, 5.3159],\r\n    [1200, 80, 0.13387, 1446.2, 1606.8, 5.3916],\r\n    [1200, 100, 0.14347, 1485.8, 1658, 5.5325],\r\n    [1200, 120, 0.15275, 1524.7, 1708, 5.6631],\r\n    [1200, 140, 0.16181, 1563.3, 1757.5, 5.786],\r\n    [1200, 160, 0.17071, 1602.2, 1807.1, 5.9031],\r\n    [1200, 180, 0.1795, 1641.5, 1856.9, 6.0156],\r\n    [1200, 200, 0.18819, 1681.3, 1907.1, 6.1241],\r\n    [1200, 220, 0.1968, 1721.8, 1957.9, 6.2292],\r\n    [1200, 240, 0.20534, 1762.9, 2009.3, 6.3313],\r\n    [1200, 260, 0.21382, 1804.7, 2061.3, 6.4308],\r\n    [1200, 280, 0.22225, 1847.3, 2114, 6.5278],\r\n    [1200, 300, 0.23063, 1890.6, 2167.3, 6.6225],\r\n    [1200, 320, 0.23897, 1934.6, 2221.3, 6.7151],\r\n    [1400, 36.26, 0.09231, 1339.8, 1469, 4.906],\r\n    [1400, 40, 0.09432, 1349.5, 1481.6, 4.9463],\r\n    [1400, 50, 0.09942, 1374.2, 1513.4, 5.0462],\r\n    [1400, 60, 0.10423, 1397.2, 1543.1, 5.137],\r\n    [1400, 70, 0.10882, 1419.2, 1571.5, 5.2209],\r\n    [1400, 80, 0.11324, 1440.3, 1598.8, 5.2994],\r\n    [1400, 100, 0.12172, 1481, 1651.4, 5.4443],\r\n    [1400, 120, 0.12986, 1520.7, 1702.5, 5.5775],\r\n    [1400, 140, 0.13777, 1559.9, 1752.8, 5.7023],\r\n    [1400, 160, 0.14552, 1599.2, 1802.9, 5.8208],\r\n    [1400, 180, 0.15315, 1638.8, 1853.2, 5.9343],\r\n    [1400, 200, 0.16068, 1678.9, 1903.8, 6.0437],\r\n    [1400, 220, 0.16813, 1719.6, 1955, 6.1495],\r\n    [1400, 240, 0.17551, 1761, 2006.7, 6.2523],\r\n    [1400, 260, 0.18283, 1803, 2059, 6.3523],\r\n    [1400, 280, 0.1901, 1845.8, 2111.9, 6.4498],\r\n    [1400, 300, 0.19732, 1889.3, 2165.5, 6.545],\r\n    [1400, 320, 0.2045, 1933.5, 2219.8, 6.638],\r\n    [1600, 41.03, 0.08079, 1341.2, 1470.5, 4.8553],\r\n    [1600, 50, 0.08506, 1364.9, 1501, 4.951],\r\n    [1600, 60, 0.08951, 1389.3, 1532.5, 5.0472],\r\n    [1600, 70, 0.09372, 1412.3, 1562.3, 5.1351],\r\n    [1600, 80, 0.09774, 1434.3, 1590.6, 5.2167],\r\n    [1600, 100, 0.10539, 1476.2, 1644.8, 5.3659],\r\n    [1600, 120, 0.11268, 1516.6, 1696.9, 5.5018],\r\n    [1600, 140, 0.11974, 1556.4, 1748, 5.6286],\r\n    [1600, 160, 0.12662, 1596.1, 1798.7, 5.7485],\r\n    [1600, 180, 0.13339, 1636.1, 1849.5, 5.8631],\r\n    [1600, 200, 0.14005, 1676.5, 1900.5, 5.9734],\r\n    [1600, 220, 0.14663, 1717.4, 1952, 6.08],\r\n    [1600, 240, 0.15314, 1759, 2004.1, 6.1834],\r\n    [1600, 260, 0.15959, 1801.3, 2056.7, 6.2839],\r\n    [1600, 280, 0.16599, 1844.3, 2109.9, 6.3819],\r\n    [1600, 300, 0.17234, 1888, 2163.7, 6.4775],\r\n    [1600, 320, 0.17865, 1932.4, 2218.2, 6.571],\r\n    [1600, 340, 0.18492, 1977.5, 2273.4, 6.6624],\r\n    [1600, 360, 0.19115, 2023.3, 2329.1, 6.7519],\r\n    [2000, 49.37, 0.06444, 1342.6, 1471.5, 4.768],\r\n    [2000, 50, 0.06471, 1344.5, 1473.9, 4.7754],\r\n    [2000, 60, 0.06875, 1372.3, 1509.8, 4.8848],\r\n    [2000, 70, 0.07246, 1397.8, 1542.7, 4.9821],\r\n    [2000, 80, 0.07595, 1421.6, 1573.5, 5.0707],\r\n    [2000, 100, 0.08248, 1466.1, 1631.1, 5.2294],\r\n    [2000, 120, 0.08861, 1508.3, 1685.5, 5.3714],\r\n    [2000, 140, 0.09447, 1549.3, 1738.2, 5.5022],\r\n    [2000, 160, 0.10016, 1589.9, 1790.2, 5.6251],\r\n    [2000, 180, 0.10571, 1630.6, 1842, 5.742],\r\n    [2000, 200, 0.11116, 1671.6, 1893.9, 5.854],\r\n    [2000, 220, 0.11652, 1713.1, 1946.1, 5.9621],\r\n    [2000, 240, 0.12182, 1755.2, 1998.8, 6.0668],\r\n    [2000, 260, 0.12705, 1797.9, 2052, 6.1685],\r\n    [2000, 280, 0.13224, 1841.3, 2105.8, 6.2675],\r\n    [2000, 300, 0.13737, 1885.4, 2160.1, 6.3641],\r\n    [2000, 320, 0.14246, 1930.2, 2215.1, 6.4583],\r\n    [2000, 340, 0.14751, 1975.6, 2270.7, 6.5505],\r\n    [2000, 360, 0.15253, 2021.8, 2326.8, 6.6406],\r\n    [5000, 88.9, 0.02365, 1323.2, 1441.4, 4.3454],\r\n    [5000, 100, 0.02636, 1369.7, 1501.5, 4.5091],\r\n    [5000, 120, 0.03024, 1435.1, 1586.3, 4.7306],\r\n    [5000, 140, 0.0335, 1489.8, 1657.3, 4.9068],\r\n    [5000, 160, 0.03643, 1539.5, 1721.7, 5.0591],\r\n    [5000, 180, 0.03916, 1586.9, 1782.7, 5.1968],\r\n    [5000, 200, 0.04174, 1633.1, 1841.8, 5.3245],\r\n    [5000, 220, 0.04422, 1678.9, 1900, 5.445],\r\n    [5000, 240, 0.04662, 1724.8, 1957.9, 5.56],\r\n    [5000, 260, 0.04895, 1770.9, 2015.6, 5.6704],\r\n    [5000, 280, 0.05123, 1817.4, 2073.6, 5.7771],\r\n    [5000, 300, 0.05346, 1864.5, 2131.8, 5.8805],\r\n    [5000, 320, 0.05565, 1912.1, 2190.3, 5.9809],\r\n    [5000, 340, 0.05779, 1960.3, 2249.2, 6.0786],\r\n    [5000, 360, 0.0599, 2009.1, 2308.6, 6.1738],\r\n    [5000, 380, 0.06198, 2058.5, 2368.4, 6.2668],\r\n    [5000, 400, 0.06403, 2108.4, 2428.6, 6.3576],\r\n    [5000, 420, 0.06606, 2159, 2489.3, 6.4464],\r\n    [5000, 440, 0.06806, 2210.1, 2550.4, 6.5334],\r\n    [10000, 125.2, 0.00826, 1206.8, 1289.4, 3.7587],\r\n    [10000, 140, 0.01195, 1341.8, 1461.3, 4.1839],\r\n    [10000, 160, 0.01461, 1432.2, 1578.3, 4.461],\r\n    [10000, 180, 0.01666, 1500.6, 1667.2, 4.6617],\r\n    [10000, 200, 0.01842, 1560.3, 1744.5, 4.8287],\r\n    [10000, 220, 0.02001, 1615.8, 1816, 4.9767],\r\n    [10000, 240, 0.0215, 1669.2, 1884.2, 5.1123],\r\n    [10000, 260, 0.0229, 1721.6, 1950.6, 5.2392],\r\n    [10000, 280, 0.02424, 1773.6, 2015.9, 5.3596],\r\n    [10000, 300, 0.02552, 1825.5, 2080.7, 5.4746],\r\n    [10000, 320, 0.02676, 1877.6, 2145.2, 5.5852],\r\n    [10000, 340, 0.02796, 1930, 2209.6, 5.6921],\r\n    [10000, 360, 0.02913, 1982.8, 2274.1, 5.7955],\r\n    [10000, 380, 0.03026, 2036.1, 2338.7, 5.896],\r\n    [10000, 400, 0.03137, 2089.8, 2403.5, 5.9937],\r\n    [10000, 420, 0.03245, 2143.9, 2468.5, 6.0888],\r\n    [10000, 440, 0.03351, 2198.5, 2533.7, 6.1815],\r\n  ],\r\n  b31: [\r\n    [-50, 682.3, 0.000866, 0.05492, 0.05579, -20.55, 302.26, 281.71, -19.96, 339.73, 319.77, -0.0863, 1.5224, 1.4362],\r\n    [-48, 739.5, 0.000872, 0.05075, 0.05162, -16.64, 298.86, 282.21, -16, 336.38, 320.38, -0.0688, 1.494, 1.4252],\r\n    [-46, 800.2, 0.000878, 0.04694, 0.04782, -12.72, 295.42, 282.69, -12.02, 332.98, 320.96, -0.0515, 1.4659, 1.4144],\r\n    [-44, 864.4, 0.000883, 0.04347, 0.04435, -8.8, 291.94, 283.15, -8.03, 329.52, 321.49, -0.0342, 1.438, 1.4038],\r\n    [-42, 932.5, 0.000889, 0.04029, 0.04118, -4.85, 288.42, 283.57, -4.02, 326, 321.97, -0.0171, 1.4103, 1.3933],\r\n    [-40, 1004.5, 0.000896, 0.03739, 0.03828, -0.9, 284.86, 283.96, 0, 322.42, 322.42, 0, 1.3829, 1.3829],\r\n    [-38, 1080.5, 0.000902, 0.03472, 0.03562, 3.07, 281.26, 284.33, 4.04, 318.78, 322.82, 0.017, 1.3556, 1.3726],\r\n    [-36, 1160.7, 0.000909, 0.03227, 0.03318, 7.05, 277.6, 284.66, 8.11, 315.06, 323.17, 0.0339, 1.3285, 1.3624],\r\n    [-34, 1245.2, 0.000915, 0.03002, 0.03093, 11.05, 273.9, 284.95, 12.19, 311.28, 323.47, 0.0507, 1.3016, 1.3523],\r\n    [-32, 1334.2, 0.000922, 0.02794, 0.02886, 15.07, 270.14, 285.21, 16.3, 307.42, 323.72, 0.0675, 1.2748, 1.3423],\r\n    [-30, 1427.8, 0.00093, 0.02603, 0.02696, 19.11, 266.32, 285.43, 20.43, 303.48, 323.92, 0.0842, 1.2481, 1.3323],\r\n    [-28, 1526.1, 0.000937, 0.02425, 0.02519, 23.17, 262.45, 285.61, 24.6, 299.46, 324.06, 0.1009, 1.2215, 1.3224],\r\n    [-26, 1629.3, 0.000945, 0.02261, 0.02356, 27.25, 258.51, 285.75, 28.78, 295.35, 324.14, 0.1175, 1.195, 1.3125],\r\n    [-24, 1737.5, 0.000953, 0.0211, 0.02205, 31.35, 254.5, 285.85, 33, 291.15, 324.15, 0.1341, 1.1686, 1.3026],\r\n    [-22, 1850.9, 0.000961, 0.01968, 0.02065, 35.48, 250.41, 285.89, 37.26, 286.85, 324.11, 0.1506, 1.1421, 1.2928],\r\n    [-20, 1969.6, 0.000969, 0.01837, 0.01934, 39.64, 246.25, 285.89, 41.55, 282.44, 323.99, 0.1672, 1.1157, 1.2829],\r\n    [-18, 2093.8, 0.000978, 0.01715, 0.01813, 43.82, 242.01, 285.84, 45.87, 277.93, 323.8, 0.1837, 1.0893, 1.273],\r\n    [-16, 2223.7, 0.000987, 0.01601, 0.017, 48.04, 237.68, 285.73, 50.24, 273.3, 323.53, 0.2003, 1.0628, 1.2631],\r\n    [-14, 2359.3, 0.000997, 0.01495, 0.01595, 52.3, 233.26, 285.56, 54.65, 268.54, 323.19, 0.2169, 1.0362, 1.2531],\r\n    [-12, 2501, 0.001007, 0.01396, 0.01497, 56.59, 228.73, 285.32, 59.11, 263.65, 322.76, 0.2334, 1.0096, 1.243],\r\n    [-10, 2648.7, 0.001017, 0.01303, 0.01405, 60.92, 224.1, 285.02, 63.62, 258.61, 322.23, 0.2501, 0.9828, 1.2328],\r\n    [-8, 2802.7, 0.001028, 0.01216, 0.01319, 65.3, 219.35, 284.65, 68.18, 253.43, 321.61, 0.2668, 0.9558, 1.2226],\r\n    [-6, 2963.2, 0.00104, 0.01134, 0.01238, 69.73, 214.47, 284.2, 72.81, 248.08, 320.89, 0.2835, 0.9286, 1.2121],\r\n    [-4, 3130.3, 0.001052, 0.01057, 0.01162, 74.2, 209.46, 283.66, 77.5, 242.55, 320.05, 0.3003, 0.9012, 1.2015],\r\n    [-2, 3304.2, 0.001065, 0.00985, 0.01091, 78.74, 204.29, 283.03, 82.26, 236.83, 319.09, 0.3173, 0.8734, 1.1907],\r\n    [0, 3485.1, 0.001078, 0.00916, 0.01024, 83.34, 198.96, 282.3, 87.1, 230.89, 317.99, 0.3344, 0.8453, 1.1797],\r\n    [2, 3673.3, 0.001093, 0.00852, 0.00961, 88.01, 193.44, 281.46, 92.02, 224.73, 316.75, 0.3516, 0.8167, 1.1683],\r\n    [4, 3868.8, 0.001108, 0.0079, 0.00901, 92.76, 187.73, 280.49, 97.05, 218.3, 315.35, 0.369, 0.7877, 1.1567],\r\n    [6, 4072, 0.001124, 0.00732, 0.00845, 97.6, 181.78, 279.38, 102.18, 211.59, 313.77, 0.3866, 0.758, 1.1446],\r\n    [8, 4283.1, 0.001142, 0.00677, 0.00791, 102.54, 175.57, 278.11, 107.43, 204.56, 311.99, 0.4045, 0.7276, 1.1321],\r\n    [10, 4502.2, 0.001161, 0.00624, 0.0074, 107.6, 169.07, 276.67, 112.83, 197.15, 309.98, 0.4228, 0.6963, 1.119],\r\n    [12, 4729.7, 0.001182, 0.00573, 0.00691, 112.79, 162.23, 275.02, 118.38, 189.33, 307.72, 0.4414, 0.664, 1.1053],\r\n    [14, 4965.8, 0.001205, 0.00524, 0.00645, 118.14, 154.99, 273.13, 124.13, 181.02, 305.15, 0.4605, 0.6304, 1.0909],\r\n    [16, 5210.8, 0.001231, 0.00477, 0.006, 123.69, 147.26, 270.95, 130.11, 172.12, 302.22, 0.4802, 0.5952, 1.0754],\r\n    [18, 5465.1, 0.00126, 0.00431, 0.00557, 129.48, 138.95, 268.43, 136.36, 162.5, 298.86, 0.5006, 0.5581, 1.0588],\r\n    [20, 5729.1, 0.001293, 0.00386, 0.00515, 135.56, 129.9, 265.46, 142.97, 152, 294.96, 0.5221, 0.5185, 1.0406],\r\n    [22, 6003.1, 0.001332, 0.00341, 0.00474, 142.03, 119.89, 261.92, 150.02, 140.34, 290.36, 0.5449, 0.4755, 1.0203],\r\n    [24, 6287.7, 0.001379, 0.00295, 0.00433, 149.04, 108.55, 257.59, 157.71, 127.09, 284.8, 0.5695, 0.4277, 0.9972],\r\n    [26, 6583.7, 0.00144, 0.00247, 0.00391, 156.88, 95.2, 252.07, 166.36, 111.45, 277.8, 0.5971, 0.3726, 0.9697],\r\n    [28, 6891.8, 0.001526, 0.00193, 0.00346, 166.2, 78.26, 244.46, 176.72, 91.58, 268.3, 0.6301, 0.3041, 0.9342],\r\n    [30, 7213.7, 0.001685, 0.00121, 0.0029, 179.49, 51.83, 231.32, 191.65, 60.58, 252.23, 0.6778, 0.1998, 0.8776],\r\n    [31, 7377.3, 0.002139, 0, 0.00214, 203.56, 0, 203.56, 219.34, 0, 219.34, 0.768, 0, 0.768],\r\n  ],\r\n  b32: [\r\n    [400, -40, 0.10499, 292.46, 334.46, 1.5947],\r\n    [400, -20, 0.11538, 305.3, 351.46, 1.6646],\r\n    [400, 0, 0.12552, 318.31, 368.51, 1.7295],\r\n    [400, 20, 0.13551, 331.57, 385.77, 1.7904],\r\n    [400, 40, 0.14538, 345.14, 403.29, 1.8482],\r\n    [400, 60, 0.15518, 359.03, 421.1, 1.9033],\r\n    [400, 80, 0.16491, 373.25, 439.21, 1.9561],\r\n    [400, 100, 0.1746, 387.8, 457.64, 2.0069],\r\n    [400, 120, 0.18425, 402.67, 476.37, 2.0558],\r\n    [400, 140, 0.19388, 417.86, 495.41, 2.103],\r\n    [400, 160, 0.20348, 433.35, 514.74, 2.1487],\r\n    [400, 180, 0.21307, 449.13, 534.36, 2.193],\r\n    [400, 200, 0.22264, 465.2, 554.26, 2.2359],\r\n    [400, 220, 0.23219, 481.55, 574.42, 2.2777],\r\n    [400, 240, 0.24173, 498.16, 594.85, 2.3183],\r\n    [400, 260, 0.25127, 515.02, 615.53, 2.3578],\r\n    [800, -46, 0.04783, 282.69, 320.95, 1.4145],\r\n    [800, -40, 0.04966, 287.05, 326.78, 1.4398],\r\n    [800, -20, 0.05546, 301.13, 345.49, 1.5168],\r\n    [800, 0, 0.06094, 314.92, 363.67, 1.5859],\r\n    [800, 20, 0.06623, 328.73, 381.72, 1.6497],\r\n    [800, 40, 0.0714, 342.7, 399.82, 1.7094],\r\n    [800, 60, 0.07648, 356.9, 418.09, 1.766],\r\n    [800, 80, 0.0815, 371.37, 436.57, 1.8199],\r\n    [800, 100, 0.08647, 386.11, 455.29, 1.8714],\r\n    [800, 120, 0.09141, 401.15, 474.27, 1.921],\r\n    [800, 140, 0.09631, 416.47, 493.52, 1.9687],\r\n    [800, 160, 0.10119, 432.07, 513.03, 2.0148],\r\n    [800, 180, 0.10606, 447.95, 532.8, 2.0594],\r\n    [800, 200, 0.1109, 464.11, 552.83, 2.1027],\r\n    [800, 220, 0.11573, 480.52, 573.11, 2.1447],\r\n    [800, 240, 0.12056, 497.2, 593.64, 2.1855],\r\n    [800, 260, 0.12537, 514.12, 614.41, 2.2252],\r\n    [1000, -40.12, 0.03845, 283.94, 322.39, 1.3835],\r\n    [1000, -20, 0.04342, 298.89, 342.31, 1.4655],\r\n    [1000, 0, 0.04799, 313.15, 361.14, 1.5371],\r\n    [1000, 20, 0.05236, 327.27, 379.63, 1.6025],\r\n    [1000, 40, 0.0566, 341.46, 398.05, 1.6633],\r\n    [1000, 60, 0.06074, 355.82, 416.56, 1.7206],\r\n    [1000, 80, 0.06482, 370.42, 435.23, 1.775],\r\n    [1000, 100, 0.06885, 385.26, 454.11, 1.827],\r\n    [1000, 120, 0.07284, 400.38, 473.22, 1.8768],\r\n    [1000, 140, 0.0768, 415.77, 492.57, 1.9249],\r\n    [1000, 160, 0.08074, 431.43, 512.17, 1.9712],\r\n    [1000, 180, 0.08465, 447.36, 532.02, 2.016],\r\n    [1000, 200, 0.08856, 463.56, 552.11, 2.0594],\r\n    [1000, 220, 0.09244, 480.01, 572.46, 2.1015],\r\n    [1000, 240, 0.09632, 496.72, 593.04, 2.1424],\r\n    [1000, 260, 0.10019, 513.67, 613.86, 2.1822],\r\n    [1000, 280, 0.10405, 530.86, 634.9, 2.2209],\r\n    [1400, -30.58, 0.0275, 285.37, 323.87, 1.3352],\r\n    [1400, -20, 0.02957, 294.04, 335.44, 1.3819],\r\n    [1400, 0, 0.03315, 309.42, 355.83, 1.4595],\r\n    [1400, 20, 0.03648, 324.23, 375.3, 1.5283],\r\n    [1400, 40, 0.03966, 338.9, 394.42, 1.5914],\r\n    [1400, 60, 0.04274, 353.62, 413.45, 1.6503],\r\n    [1400, 80, 0.04575, 368.48, 432.52, 1.7059],\r\n    [1400, 100, 0.0487, 383.54, 451.72, 1.7588],\r\n    [1400, 120, 0.05161, 398.83, 471.09, 1.8093],\r\n    [1400, 140, 0.0545, 414.36, 490.66, 1.8579],\r\n    [1400, 160, 0.05736, 430.14, 510.44, 1.9046],\r\n    [1400, 180, 0.0602, 446.17, 530.45, 1.9498],\r\n    [1400, 200, 0.06302, 462.45, 550.68, 1.9935],\r\n    [1400, 220, 0.06583, 478.98, 571.14, 2.0358],\r\n    [1400, 240, 0.06863, 495.76, 591.83, 2.077],\r\n    [1400, 260, 0.07141, 512.77, 612.74, 2.1169],\r\n    [1400, 280, 0.07419, 530.01, 633.88, 2.1558],\r\n    [2000, -19.5, 0.01903, 285.88, 323.95, 1.2804],\r\n    [2000, 0, 0.02193, 303.24, 347.09, 1.3684],\r\n    [2000, 20, 0.02453, 319.37, 368.42, 1.4438],\r\n    [2000, 40, 0.02693, 334.88, 388.75, 1.5109],\r\n    [2000, 60, 0.02922, 350.19, 408.64, 1.5725],\r\n    [2000, 80, 0.03143, 365.49, 428.36, 1.63],\r\n    [2000, 100, 0.03359, 380.9, 448.07, 1.6843],\r\n    [2000, 120, 0.0357, 396.46, 467.85, 1.7359],\r\n    [2000, 140, 0.03777, 412.22, 487.76, 1.7853],\r\n    [2000, 160, 0.03982, 428.18, 507.83, 1.8327],\r\n    [2000, 180, 0.04186, 444.37, 528.08, 1.8784],\r\n    [2000, 200, 0.04387, 460.79, 548.53, 1.9226],\r\n    [2000, 220, 0.04587, 477.43, 569.17, 1.9653],\r\n    [2000, 240, 0.04786, 494.31, 590.02, 2.0068],\r\n    [2000, 260, 0.04983, 511.41, 611.08, 2.047],\r\n    [2000, 280, 0.0518, 528.73, 632.34, 2.0862],\r\n    [2000, 300, 0.05377, 546.26, 653.8, 2.1243],\r\n    [3000, -5.55, 0.01221, 284.09, 320.71, 1.2098],\r\n    [3000, 0, 0.01293, 290.52, 329.32, 1.2416],\r\n    [3000, 20, 0.01512, 310.21, 355.56, 1.3344],\r\n    [3000, 40, 0.01698, 327.61, 378.55, 1.4104],\r\n    [3000, 60, 0.01868, 344.14, 400.19, 1.4773],\r\n    [3000, 80, 0.02029, 360.3, 421.16, 1.5385],\r\n    [3000, 100, 0.02182, 376.35, 441.82, 1.5954],\r\n    [3000, 120, 0.02331, 392.42, 462.35, 1.649],\r\n    [3000, 140, 0.02477, 408.57, 482.87, 1.6999],\r\n    [3000, 160, 0.02619, 424.87, 503.44, 1.7485],\r\n    [3000, 180, 0.02759, 441.34, 524.12, 1.7952],\r\n    [3000, 200, 0.02898, 457.99, 544.92, 1.8401],\r\n    [3000, 220, 0.03035, 474.83, 565.88, 1.8835],\r\n    [3000, 240, 0.03171, 491.88, 587.01, 1.9255],\r\n    [3000, 260, 0.03306, 509.13, 608.3, 1.9662],\r\n    [3000, 280, 0.0344, 526.59, 629.78, 2.0057],\r\n    [3000, 300, 0.03573, 544.25, 651.43, 2.0442],\r\n    [6000, 21.98, 0.00474, 261.97, 290.42, 1.0206],\r\n    [6000, 40, 0.0067, 298.62, 338.82, 1.1806],\r\n    [6000, 60, 0.00801, 322.51, 370.54, 1.2789],\r\n    [6000, 80, 0.00908, 342.74, 397.21, 1.3567],\r\n    [6000, 100, 0.01004, 361.47, 421.69, 1.4241],\r\n    [6000, 120, 0.01092, 379.47, 445.02, 1.485],\r\n    [6000, 140, 0.01176, 397.1, 467.68, 1.5413],\r\n    [6000, 160, 0.01257, 414.56, 489.97, 1.5939],\r\n    [6000, 180, 0.01335, 431.97, 512.06, 1.6438],\r\n    [6000, 200, 0.01411, 449.4, 534.04, 1.6913],\r\n    [6000, 220, 0.01485, 466.91, 556.01, 1.7367],\r\n    [6000, 240, 0.01558, 484.52, 578, 1.7804],\r\n    [6000, 260, 0.0163, 502.27, 600.05, 1.8226],\r\n    [6000, 280, 0.01701, 520.15, 622.19, 1.8634],\r\n    [6000, 300, 0.01771, 538.18, 644.44, 1.9029],\r\n    [6000, 320, 0.0184, 556.37, 666.8, 1.9412],\r\n    [10000, 20, 0.00117, 118.12, 129.8, 0.4594],\r\n    [10000, 40, 0.00159, 184.23, 200.14, 0.6906],\r\n    [10000, 60, 0.00345, 277.63, 312.11, 1.0389],\r\n    [10000, 80, 0.00451, 312.82, 357.95, 1.1728],\r\n    [10000, 100, 0.0053, 338.2, 391.24, 1.2646],\r\n    [10000, 120, 0.00598, 360.19, 419.96, 1.3396],\r\n    [10000, 140, 0.00658, 380.54, 446.38, 1.4051],\r\n    [10000, 160, 0.00715, 399.99, 471.46, 1.4644],\r\n    [10000, 180, 0.00768, 418.94, 495.73, 1.5192],\r\n    [10000, 200, 0.00819, 437.61, 519.49, 1.5705],\r\n    [10000, 220, 0.00868, 456.12, 542.91, 1.619],\r\n    [10000, 240, 0.00916, 474.58, 566.14, 1.6652],\r\n    [10000, 260, 0.00962, 493.03, 589.26, 1.7094],\r\n    [10000, 280, 0.01008, 511.53, 612.32, 1.7518],\r\n    [10000, 300, 0.01053, 530.11, 635.37, 1.7928],\r\n    [10000, 320, 0.01097, 548.77, 658.46, 1.8324],\r\n  ],\r\n  b41: [\r\n    [-60, 64.1, 0.000727, 0.36772, 0.36845, -27.5, 256.41, 228.91, -27.45, 279.96, 252.51, -0.1227, 1.3135, 1.1907],\r\n    [-55, 84, 0.000735, 0.28484, 0.28558, -20.7, 251.89, 231.19, -20.64, 275.83, 255.19, -0.0912, 1.2644, 1.1732],\r\n    [-51.4, 101.3, 0.000741, 0.23875, 0.23949, -15.78, 248.59, 232.81, -15.7, 272.78, 257.08, -0.0688, 1.2301, 1.1613],\r\n    [-50, 108.7, 0.000743, 0.22344, 0.22418, -13.88, 247.31, 233.43, -13.8, 271.6, 257.8, -0.0603, 1.2171, 1.1568],\r\n    [-45, 138.8, 0.000752, 0.17729, 0.17804, -7.02, 242.67, 235.64, -6.92, 267.27, 260.35, -0.0299, 1.1715, 1.1416],\r\n    [-40, 175, 0.000762, 0.14215, 0.14291, -0.13, 237.95, 237.81, 0, 262.83, 262.83, 0, 1.1273, 1.1273],\r\n    [-35, 218.4, 0.000771, 0.11505, 0.11582, 6.8, 233.14, 239.94, 6.97, 258.26, 265.23, 0.0294, 1.0844, 1.1139],\r\n    [-30, 269.6, 0.000781, 0.09392, 0.0947, 13.78, 228.23, 242.01, 13.99, 253.55, 267.54, 0.0585, 1.0428, 1.1012],\r\n    [-25, 329.7, 0.000792, 0.07726, 0.07805, 20.82, 223.21, 244.03, 21.08, 248.69, 269.77, 0.0871, 1.0022, 1.0893],\r\n    [-20, 399.6, 0.000803, 0.064, 0.0648, 27.92, 218.07, 245.99, 28.24, 243.65, 271.89, 0.1154, 0.9625, 1.0779],\r\n    [-15, 480.4, 0.000815, 0.05334, 0.05416, 35.08, 212.79, 247.88, 35.47, 238.42, 273.9, 0.1435, 0.9236, 1.0671],\r\n    [-10, 573.1, 0.000827, 0.0447, 0.04553, 42.32, 207.36, 249.69, 42.8, 232.98, 275.78, 0.1713, 0.8854, 1.0567],\r\n    [-5, 678.9, 0.000841, 0.03764, 0.03848, 49.65, 201.75, 251.41, 50.22, 227.31, 277.53, 0.1989, 0.8477, 1.0466],\r\n    [0, 798.7, 0.000855, 0.03182, 0.03267, 57.07, 195.95, 253.02, 57.76, 221.37, 279.12, 0.2264, 0.8104, 1.0368],\r\n    [5, 933.9, 0.00087, 0.02699, 0.02786, 64.6, 189.93, 254.53, 65.41, 215.13, 280.55, 0.2537, 0.7734, 1.0272],\r\n    [10, 1085.7, 0.000886, 0.02295, 0.02383, 72.24, 183.66, 255.9, 73.21, 208.57, 281.78, 0.281, 0.7366, 1.0176],\r\n    [15, 1255.4, 0.000904, 0.01955, 0.02045, 80.02, 177.1, 257.12, 81.15, 201.64, 282.79, 0.3083, 0.6998, 1.0081],\r\n    [20, 1444.2, 0.000923, 0.01666, 0.01758, 87.94, 170.21, 258.16, 89.27, 194.28, 283.55, 0.3357, 0.6627, 0.9984],\r\n    [25, 1653.6, 0.000944, 0.0142, 0.01514, 96.03, 162.95, 258.98, 97.59, 186.43, 284.02, 0.3631, 0.6253, 0.9884],\r\n    [30, 1885.1, 0.000968, 0.01208, 0.01305, 104.32, 155.24, 259.56, 106.14, 178.02, 284.16, 0.3908, 0.5872, 0.9781],\r\n    [35, 2140.2, 0.000995, 0.01025, 0.01124, 112.83, 147, 259.83, 114.95, 168.94, 283.89, 0.4189, 0.5482, 0.9671],\r\n    [40, 2420.7, 0.001025, 0.00865, 0.00967, 121.61, 138.11, 259.72, 124.09, 159.04, 283.13, 0.4473, 0.5079, 0.9552],\r\n    [45, 2728.3, 0.00106, 0.00723, 0.00829, 130.72, 128.41, 259.13, 133.61, 148.14, 281.76, 0.4765, 0.4656, 0.9421],\r\n    [50, 3065.2, 0.001103, 0.00597, 0.00707, 140.27, 117.63, 257.9, 143.65, 135.93, 279.58, 0.5067, 0.4206, 0.9273],\r\n    [55, 3433.7, 0.001156, 0.00482, 0.00598, 150.44, 105.34, 255.78, 154.41, 121.89, 276.3, 0.5384, 0.3715, 0.9099],\r\n    [60, 3836.9, 0.001227, 0.00374, 0.00497, 161.57, 90.7, 252.27, 166.28, 105.04, 271.33, 0.5729, 0.3153, 0.8882],\r\n    [65, 4278.3, 0.001338, 0.00265, 0.00399, 174.59, 71.59, 246.19, 180.32, 82.95, 263.26, 0.613, 0.2453, 0.8583],\r\n    [70, 4763.1, 0.001619, 0.00124, 0.00286, 194.53, 37.47, 232.01, 202.24, 43.4, 245.64, 0.6752, 0.1265, 0.8017],\r\n    [71.3, 4901.2, 0.00218, 0, 0.00218, 215.78, 0, 215.78, 226.46, 0, 226.46, 0.7449, 0, 0.7449],\r\n  ],\r\n  b42: [\r\n    [50, -64.34, 0.46484, 226.9, 250.15, 1.207],\r\n    [50, -60, 0.47585, 229.6, 253.4, 1.2225],\r\n    [50, -40, 0.52508, 241.94, 268.2, 1.2888],\r\n    [50, -20, 0.57295, 254.51, 283.16, 1.3504],\r\n    [50, 0, 0.62016, 267.52, 298.53, 1.4088],\r\n    [50, 20, 0.66698, 281.05, 314.4, 1.4649],\r\n    [50, 40, 0.71355, 295.15, 330.83, 1.5191],\r\n    [50, 60, 0.75995, 309.84, 347.83, 1.5717],\r\n    [50, 80, 0.80623, 325.11, 365.43, 1.623],\r\n    [50, 100, 0.85243, 340.99, 383.61, 1.6731],\r\n    [50, 120, 0.89857, 357.46, 402.38, 1.7221],\r\n    [50, 140, 0.94465, 374.5, 421.74, 1.7701],\r\n    [50, 160, 0.9907, 392.12, 441.65, 1.8171],\r\n    [50, 180, 1.03671, 410.28, 462.12, 1.8633],\r\n    [50, 200, 1.0827, 428.98, 483.11, 1.9087],\r\n    [50, 220, 1.12867, 448.19, 504.63, 1.9532],\r\n    [50, 240, 1.17462, 467.9, 526.63, 1.9969],\r\n    [100, -51.65, 0.24247, 232.7, 256.94, 1.1621],\r\n    [100, -40, 0.25778, 240.4, 266.18, 1.2027],\r\n    [100, -20, 0.28289, 253.44, 281.73, 1.2667],\r\n    [100, 0, 0.30723, 266.72, 297.44, 1.3265],\r\n    [100, 20, 0.33116, 280.42, 313.54, 1.3833],\r\n    [100, 40, 0.35483, 294.64, 330.12, 1.438],\r\n    [100, 60, 0.37833, 309.4, 347.24, 1.491],\r\n    [100, 80, 0.40171, 324.75, 364.92, 1.5425],\r\n    [100, 100, 0.425, 340.67, 383.17, 1.5928],\r\n    [100, 120, 0.44822, 357.17, 401.99, 1.6419],\r\n    [100, 140, 0.4714, 374.25, 421.39, 1.6901],\r\n    [100, 160, 0.49453, 391.89, 441.34, 1.7372],\r\n    [100, 180, 0.51764, 410.07, 461.84, 1.7835],\r\n    [100, 200, 0.54072, 428.79, 482.86, 1.8289],\r\n    [100, 220, 0.56378, 448.02, 504.4, 1.8734],\r\n    [100, 240, 0.58682, 467.74, 526.42, 1.9172],\r\n    [150, -43.35, 0.1654, 236.36, 261.17, 1.1368],\r\n    [150, -40, 0.16851, 238.72, 263.99, 1.1489],\r\n    [150, -20, 0.18613, 252.34, 280.26, 1.2159],\r\n    [150, 0, 0.20289, 265.9, 296.33, 1.277],\r\n    [150, 20, 0.21921, 279.78, 312.66, 1.3347],\r\n    [150, 40, 0.23525, 294.12, 329.4, 1.3899],\r\n    [150, 60, 0.25112, 308.97, 346.64, 1.4433],\r\n    [150, 80, 0.26686, 324.37, 364.4, 1.495],\r\n    [150, 100, 0.28251, 340.35, 382.72, 1.5455],\r\n    [150, 120, 0.2981, 356.89, 401.6, 1.5948],\r\n    [150, 140, 0.31364, 374, 421.04, 1.643],\r\n    [150, 160, 0.32915, 391.66, 441.03, 1.6902],\r\n    [150, 180, 0.34462, 409.87, 461.56, 1.7366],\r\n    [150, 200, 0.36006, 428.6, 482.61, 1.782],\r\n    [150, 220, 0.37548, 447.84, 504.16, 1.8266],\r\n    [150, 240, 0.39089, 467.58, 526.21, 1.8705],\r\n    [150, 260, 0.40628, 487.78, 548.73, 1.9135],\r\n    [200, -37.01, 0.12591, 239.09, 264.27, 1.1192],\r\n    [200, -20, 0.13771, 251.18, 278.72, 1.1783],\r\n    [200, 0, 0.1507, 265.06, 295.2, 1.241],\r\n    [200, 20, 0.16322, 279.13, 311.78, 1.2995],\r\n    [200, 40, 0.17545, 293.59, 328.68, 1.3553],\r\n    [200, 60, 0.1875, 308.53, 346.03, 1.409],\r\n    [200, 80, 0.19943, 324, 363.89, 1.461],\r\n    [200, 100, 0.21127, 340.02, 382.28, 1.5117],\r\n    [200, 120, 0.22305, 356.6, 401.21, 1.5611],\r\n    [200, 140, 0.23477, 373.74, 420.7, 1.6094],\r\n    [200, 160, 0.24645, 391.43, 440.72, 1.6568],\r\n    [200, 180, 0.2581, 409.66, 461.28, 1.7032],\r\n    [200, 200, 0.26973, 428.41, 482.35, 1.7487],\r\n    [200, 220, 0.28134, 447.67, 503.93, 1.7933],\r\n    [200, 240, 0.29293, 467.41, 526, 1.8372],\r\n    [200, 260, 0.3045, 487.63, 548.53, 1.8803],\r\n    [300, -27.37, 0.08548, 243.08, 268.72, 1.0949],\r\n    [300, -20, 0.08916, 248.71, 275.46, 1.1219],\r\n    [300, 0, 0.09845, 263.33, 292.87, 1.1881],\r\n    [300, 20, 0.1072, 277.81, 309.96, 1.2485],\r\n    [300, 40, 0.11564, 292.53, 327.22, 1.3054],\r\n    [300, 60, 0.12388, 307.65, 344.81, 1.3599],\r\n    [300, 80, 0.132, 323.25, 362.85, 1.4125],\r\n    [300, 100, 0.14003, 339.37, 381.38, 1.4635],\r\n    [300, 120, 0.14798, 356.03, 400.43, 1.5132],\r\n    [300, 140, 0.15589, 373.23, 420, 1.5617],\r\n    [300, 160, 0.16376, 390.97, 440.1, 1.6093],\r\n    [300, 180, 0.17159, 409.24, 460.72, 1.6558],\r\n    [300, 200, 0.1794, 428.03, 481.85, 1.7014],\r\n    [300, 220, 0.18719, 447.31, 503.47, 1.7462],\r\n    [300, 240, 0.19496, 467.09, 525.58, 1.7901],\r\n    [300, 260, 0.20272, 487.33, 548.15, 1.8332],\r\n    [300, 280, 0.21046, 508.02, 571.16, 1.8756],\r\n    [400, -19.98, 0.06475, 246, 271.9, 1.0779],\r\n    [400, 0, 0.07227, 261.51, 290.42, 1.1483],\r\n    [400, 20, 0.07916, 276.44, 308.1, 1.2108],\r\n    [400, 40, 0.08571, 291.44, 325.72, 1.2689],\r\n    [400, 60, 0.09207, 306.75, 343.58, 1.3242],\r\n    [400, 80, 0.09828, 322.49, 361.8, 1.3773],\r\n    [400, 100, 0.1044, 338.72, 380.48, 1.4288],\r\n    [400, 120, 0.11045, 355.45, 399.64, 1.4788],\r\n    [400, 140, 0.11645, 372.72, 419.3, 1.5276],\r\n    [400, 160, 0.12241, 390.51, 439.47, 1.5752],\r\n    [400, 180, 0.12834, 408.82, 460.16, 1.6219],\r\n    [400, 200, 0.13424, 427.64, 481.34, 1.6676],\r\n    [400, 220, 0.14012, 446.96, 503.01, 1.7125],\r\n    [400, 240, 0.14598, 466.76, 525.15, 1.7565],\r\n    [400, 260, 0.15182, 487.03, 547.76, 1.7997],\r\n    [400, 280, 0.15766, 507.74, 570.81, 1.8422],\r\n    [500, -13.89, 0.05208, 248.29, 274.33, 1.0647],\r\n    [500, 0, 0.05651, 259.59, 287.84, 1.1155],\r\n    [500, 20, 0.06231, 275.02, 306.18, 1.1803],\r\n    [500, 40, 0.06775, 290.32, 324.2, 1.2398],\r\n    [500, 60, 0.07297, 305.84, 342.32, 1.2959],\r\n    [500, 80, 0.07804, 321.72, 360.74, 1.3496],\r\n    [500, 100, 0.08302, 338.05, 379.56, 1.4014],\r\n    [500, 120, 0.08793, 354.87, 398.84, 1.4517],\r\n    [500, 140, 0.09279, 372.2, 418.6, 1.5007],\r\n    [500, 160, 0.0976, 390.05, 438.85, 1.5486],\r\n    [500, 180, 0.10238, 408.4, 459.59, 1.5954],\r\n    [500, 200, 0.10714, 427.26, 480.83, 1.6413],\r\n    [500, 220, 0.11187, 446.61, 502.55, 1.6862],\r\n    [500, 240, 0.11659, 466.44, 524.73, 1.7303],\r\n    [500, 260, 0.12129, 486.73, 547.37, 1.7736],\r\n    [500, 280, 0.12598, 507.46, 570.45, 1.8161],\r\n    [500, 300, 0.13066, 528.62, 593.95, 1.8578],\r\n    [600, -8.67, 0.04351, 250.15, 276.26, 1.054],\r\n    [600, 0, 0.04595, 257.54, 285.12, 1.0869],\r\n    [600, 20, 0.05106, 273.56, 304.2, 1.1543],\r\n    [600, 40, 0.05576, 289.19, 322.64, 1.2152],\r\n    [600, 60, 0.06023, 304.91, 341.05, 1.2722],\r\n    [600, 80, 0.06455, 320.94, 359.67, 1.3265],\r\n    [600, 100, 0.06877, 337.38, 378.65, 1.3787],\r\n    [600, 120, 0.07292, 354.29, 398.04, 1.4294],\r\n    [600, 140, 0.07701, 371.68, 417.89, 1.4786],\r\n    [600, 160, 0.08106, 389.58, 438.22, 1.5266],\r\n    [600, 180, 0.08508, 407.98, 459.03, 1.5736],\r\n    [600, 200, 0.08907, 426.88, 480.32, 1.6196],\r\n    [600, 220, 0.09304, 446.26, 502.08, 1.6646],\r\n    [600, 240, 0.097, 466.11, 524.31, 1.7088],\r\n    [600, 260, 0.10093, 486.42, 546.98, 1.7521],\r\n    [600, 280, 0.10486, 507.18, 570.09, 1.7947],\r\n    [600, 300, 0.10877, 528.36, 593.62, 1.8365],\r\n    [800, 0.05, 0.03262, 253.04, 279.14, 1.0367],\r\n    [800, 20, 0.03693, 270.47, 300.02, 1.1105],\r\n    [800, 40, 0.04074, 286.83, 319.42, 1.1746],\r\n    [800, 60, 0.04429, 303.01, 338.44, 1.2334],\r\n    [800, 80, 0.04767, 319.36, 357.49, 1.289],\r\n    [800, 100, 0.05095, 336.03, 376.79, 1.3421],\r\n    [800, 120, 0.05415, 353.11, 396.42, 1.3934],\r\n    [800, 140, 0.05729, 370.64, 416.47, 1.4431],\r\n    [800, 160, 0.06039, 388.65, 436.96, 1.4915],\r\n    [800, 180, 0.06345, 407.13, 457.9, 1.5388],\r\n    [800, 200, 0.06649, 426.1, 479.3, 1.585],\r\n    [800, 220, 0.06951, 445.55, 501.15, 1.6302],\r\n    [800, 240, 0.07251, 465.46, 523.46, 1.6746],\r\n    [800, 260, 0.07549, 485.82, 546.21, 1.7181],\r\n    [800, 280, 0.07846, 506.61, 569.38, 1.7607],\r\n    [800, 300, 0.08142, 527.83, 592.97, 1.8026],\r\n    [1000, 7.25, 0.02596, 255.16, 281.12, 1.0229],\r\n    [1000, 20, 0.02838, 267.11, 295.49, 1.073],\r\n    [1000, 40, 0.0317, 284.35, 316.05, 1.1409],\r\n    [1000, 60, 0.0347, 301.04, 335.75, 1.2019],\r\n    [1000, 80, 0.03753, 317.73, 355.27, 1.2588],\r\n    [1000, 100, 0.04025, 334.65, 374.89, 1.3128],\r\n    [1000, 120, 0.04288, 351.91, 394.79, 1.3648],\r\n    [1000, 140, 0.04545, 369.58, 415.04, 1.415],\r\n    [1000, 160, 0.04798, 387.7, 435.68, 1.4638],\r\n    [1000, 180, 0.05048, 406.28, 456.76, 1.5113],\r\n    [1000, 200, 0.05294, 425.33, 478.27, 1.5578],\r\n    [1000, 220, 0.05539, 444.84, 500.23, 1.6032],\r\n    [1000, 240, 0.05781, 464.8, 522.62, 1.6477],\r\n    [1000, 260, 0.06023, 485.21, 545.43, 1.6914],\r\n    [1000, 280, 0.06262, 506.05, 568.67, 1.7341],\r\n    [1000, 300, 0.06501, 527.3, 592.31, 1.7761],\r\n    [1200, 13.43, 0.02145, 256.75, 282.5, 1.0111],\r\n    [1200, 20, 0.0226, 263.39, 290.51, 1.0388],\r\n    [1200, 40, 0.02563, 281.72, 312.48, 1.1113],\r\n    [1200, 60, 0.0283, 299, 332.96, 1.1747],\r\n    [1200, 80, 0.03077, 316.06, 352.98, 1.2331],\r\n    [1200, 100, 0.03311, 333.24, 372.97, 1.2881],\r\n    [1200, 120, 0.03537, 350.69, 393.13, 1.3408],\r\n    [1200, 140, 0.03756, 368.51, 413.59, 1.3915],\r\n    [1200, 160, 0.03971, 386.75, 434.4, 1.4407],\r\n    [1200, 180, 0.04183, 405.43, 455.62, 1.4886],\r\n    [1200, 200, 0.04391, 424.55, 477.24, 1.5353],\r\n    [1200, 220, 0.04597, 444.12, 499.29, 1.5809],\r\n    [1200, 240, 0.04802, 464.14, 521.77, 1.6256],\r\n    [1200, 260, 0.05005, 484.6, 544.66, 1.6693],\r\n    [1200, 280, 0.05207, 505.48, 567.96, 1.7122],\r\n    [1200, 300, 0.05407, 526.77, 591.66, 1.7543],\r\n    [1200, 320, 0.05607, 548.47, 615.75, 1.7956],\r\n    [1400, 18.88, 0.01819, 257.94, 283.4, 1.0006],\r\n    [1400, 20, 0.01838, 259.18, 284.9, 1.0057],\r\n    [1400, 40, 0.02127, 278.93, 308.71, 1.0843],\r\n    [1400, 60, 0.02371, 296.88, 330.07, 1.1505],\r\n    [1400, 80, 0.02593, 314.35, 350.64, 1.2105],\r\n    [1400, 100, 0.02801, 331.8, 371.01, 1.2666],\r\n    [1400, 120, 0.03, 349.46, 391.46, 1.3199],\r\n    [1400, 140, 0.03192, 367.43, 412.13, 1.3712],\r\n    [1400, 160, 0.0338, 385.79, 433.12, 1.4208],\r\n    [1400, 180, 0.03565, 404.56, 454.47, 1.469],\r\n    [1400, 200, 0.03746, 423.77, 476.21, 1.516],\r\n    [1400, 220, 0.03925, 443.41, 498.36, 1.5618],\r\n    [1400, 240, 0.04102, 463.49, 520.92, 1.6066],\r\n    [1400, 260, 0.04278, 483.99, 543.88, 1.6505],\r\n    [1400, 280, 0.04452, 504.91, 567.25, 1.6936],\r\n    [1400, 300, 0.04626, 526.25, 591.01, 1.7358],\r\n    [1400, 320, 0.04798, 547.97, 615.14, 1.7772],\r\n    [1800, 28.22, 0.01376, 259.38, 284.15, 0.9818],\r\n    [1800, 40, 0.01534, 272.67, 300.29, 1.0344],\r\n    [1800, 60, 0.01754, 292.34, 323.92, 1.1076],\r\n    [1800, 80, 0.01945, 310.76, 345.77, 1.1713],\r\n    [1800, 100, 0.02119, 328.84, 366.98, 1.2297],\r\n    [1800, 120, 0.02283, 346.93, 388.03, 1.2847],\r\n    [1800, 140, 0.02441, 365.24, 409.17, 1.3371],\r\n    [1800, 160, 0.02593, 383.85, 430.51, 1.3875],\r\n    [1800, 180, 0.02741, 402.82, 452.16, 1.4364],\r\n    [1800, 200, 0.02886, 422.19, 474.14, 1.4839],\r\n    [1800, 220, 0.03029, 441.97, 496.49, 1.5301],\r\n    [1800, 240, 0.0317, 462.16, 519.22, 1.5753],\r\n    [1800, 260, 0.03309, 482.77, 542.34, 1.6195],\r\n    [1800, 280, 0.03447, 503.78, 565.83, 1.6627],\r\n    [1800, 300, 0.03584, 525.19, 589.7, 1.7051],\r\n    [1800, 320, 0.0372, 546.98, 613.94, 1.7467],\r\n    [1800, 340, 0.03855, 569.15, 638.54, 1.7875],\r\n    [2000, 32.31, 0.01218, 259.72, 284.09, 0.9731],\r\n    [2000, 40, 0.01321, 269.07, 295.49, 1.0099],\r\n    [2000, 60, 0.01536, 289.9, 320.62, 1.0878],\r\n    [2000, 80, 0.01717, 308.88, 343.22, 1.1537],\r\n    [2000, 100, 0.0188, 327.3, 364.91, 1.2134],\r\n    [2000, 120, 0.02032, 345.64, 386.29, 1.2693],\r\n    [2000, 140, 0.02177, 364.12, 407.66, 1.3223],\r\n    [2000, 160, 0.02317, 382.86, 429.2, 1.3732],\r\n    [2000, 180, 0.02452, 401.94, 450.99, 1.4224],\r\n    [2000, 200, 0.02585, 421.4, 473.1, 1.4701],\r\n    [2000, 220, 0.02715, 441.25, 495.55, 1.5166],\r\n    [2000, 240, 0.02844, 461.5, 518.37, 1.5619],\r\n    [2000, 260, 0.0297, 482.16, 541.56, 1.6063],\r\n    [2000, 280, 0.03095, 503.21, 565.12, 1.6497],\r\n    [2000, 300, 0.0322, 524.66, 589.05, 1.6922],\r\n    [2000, 320, 0.03343, 546.49, 613.35, 1.7338],\r\n    [2000, 340, 0.03465, 568.69, 637.99, 1.7747],\r\n    [3000, 49.07, 0.00729, 258.19, 280.06, 0.9303],\r\n    [3000, 60, 0.00858, 274.96, 300.7, 0.9933],\r\n    [3000, 80, 0.01025, 298.38, 329.12, 1.0762],\r\n    [3000, 100, 0.01159, 319.07, 353.84, 1.1443],\r\n    [3000, 120, 0.01277, 338.84, 377.16, 1.2052],\r\n    [3000, 140, 0.01387, 358.32, 399.92, 1.2617],\r\n    [3000, 160, 0.01489, 377.8, 422.49, 1.315],\r\n    [3000, 180, 0.01588, 397.46, 445.09, 1.3661],\r\n    [3000, 200, 0.01683, 417.37, 467.85, 1.4152],\r\n    [3000, 220, 0.01775, 437.6, 490.84, 1.4628],\r\n    [3000, 240, 0.01865, 458.16, 514.11, 1.5091],\r\n    [3000, 260, 0.01954, 479.08, 537.69, 1.5541],\r\n    [3000, 280, 0.02041, 500.37, 561.59, 1.5981],\r\n    [3000, 300, 0.02127, 522.01, 585.81, 1.6411],\r\n    [3000, 320, 0.02212, 544.02, 610.37, 1.6833],\r\n    [3000, 340, 0.02296, 566.37, 635.25, 1.7245],\r\n    [3000, 360, 0.02379, 589.07, 660.45, 1.765],\r\n    [4000, 61.9, 0.0046, 250.37, 268.76, 0.8782],\r\n    [4000, 80, 0.00661, 285.02, 311.48, 1.0028],\r\n    [4000, 100, 0.00792, 309.62, 341.29, 1.085],\r\n    [4000, 120, 0.00897, 331.39, 367.29, 1.1529],\r\n    [4000, 140, 0.0099, 352.14, 391.75, 1.2136],\r\n    [4000, 160, 0.01076, 372.51, 415.53, 1.2698],\r\n    [4000, 180, 0.01156, 392.82, 439.05, 1.3229],\r\n    [4000, 200, 0.01232, 413.25, 462.52, 1.3736],\r\n    [4000, 220, 0.01305, 433.88, 486.1, 1.4224],\r\n    [4000, 240, 0.01377, 454.79, 509.85, 1.4696],\r\n    [4000, 260, 0.01446, 475.99, 533.83, 1.5155],\r\n    [4000, 280, 0.01514, 497.51, 558.08, 1.5601],\r\n    [4000, 300, 0.01581, 519.37, 582.6, 1.6037],\r\n    [4000, 320, 0.01647, 541.55, 607.42, 1.6462],\r\n    [4000, 340, 0.01712, 564.06, 632.54, 1.6879],\r\n    [4000, 360, 0.01776, 586.9, 657.95, 1.7286],\r\n  ],\r\n  b51: [\r\n    [-70, 8.3, 0.000675, 1.97207, 1.97274, 119.46, 218.74, 338.2, 119.47, 235.15, 354.62, 0.6645, 1.1575, 1.822],\r\n    [-65, 11.7, 0.000679, 1.42915, 1.42983, 123.18, 217.76, 340.94, 123.18, 234.55, 357.73, 0.6825, 1.1268, 1.8094],\r\n    [-60, 16.3, 0.000684, 1.05199, 1.05268, 127.52, 216.19, 343.71, 127.53, 233.33, 360.86, 0.7031, 1.0947, 1.7978],\r\n    [-55, 22.2, 0.000689, 0.78609, 0.78678, 132.36, 214.14, 346.5, 132.37, 231.63, 364, 0.7256, 1.0618, 1.7874],\r\n    [-50, 29.9, 0.000695, 0.59587, 0.59657, 137.6, 211.71, 349.31, 137.62, 229.54, 367.16, 0.7493, 1.0286, 1.778],\r\n    [-45, 39.6, 0.000701, 0.45783, 0.45853, 143.15, 208.99, 352.15, 143.18, 227.14, 370.32, 0.774, 0.9956, 1.7695],\r\n    [-40, 51.8, 0.000708, 0.35625, 0.35696, 148.95, 206.05, 355, 148.98, 224.5, 373.48, 0.7991, 0.9629, 1.762],\r\n    [-35, 66.8, 0.000715, 0.28051, 0.28122, 154.93, 202.93, 357.86, 154.98, 221.67, 376.64, 0.8245, 0.9308, 1.7553],\r\n    [-30, 85.1, 0.000722, 0.2233, 0.22402, 161.06, 199.67, 360.73, 161.12, 218.68, 379.8, 0.8499, 0.8994, 1.7493],\r\n    [-26.3, 101.3, 0.000728, 0.18947, 0.1902, 165.73, 197.16, 362.89, 165.8, 216.36, 382.16, 0.869, 0.8763, 1.7453],\r\n    [-25, 107.2, 0.00073, 0.17957, 0.1803, 167.3, 196.31, 363.61, 167.38, 215.57, 382.95, 0.8754, 0.8687, 1.7441],\r\n    [-20, 133.7, 0.000738, 0.14576, 0.14649, 173.65, 192.85, 366.5, 173.74, 212.34, 386.08, 0.9007, 0.8388, 1.7395],\r\n    [-15, 165, 0.000746, 0.11932, 0.12007, 180.07, 189.32, 369.39, 180.19, 209, 389.2, 0.9258, 0.8096, 1.7354],\r\n    [-10, 201.7, 0.000755, 0.09845, 0.09921, 186.57, 185.7, 372.27, 186.72, 205.56, 392.28, 0.9507, 0.7812, 1.7319],\r\n    [-5, 244.5, 0.000764, 0.08181, 0.08257, 193.14, 182.01, 375.15, 193.32, 202.02, 395.34, 0.9755, 0.7534, 1.7288],\r\n    [0, 294, 0.000773, 0.06842, 0.06919, 199.77, 178.24, 378.01, 200, 198.36, 398.36, 1, 0.7262, 1.7262],\r\n    [5, 350.9, 0.000783, 0.05755, 0.05833, 206.48, 174.38, 380.85, 206.75, 194.57, 401.32, 1.0243, 0.6995, 1.7239],\r\n    [10, 415.8, 0.000794, 0.04866, 0.04945, 213.25, 170.42, 383.67, 213.58, 190.65, 404.23, 1.0485, 0.6733, 1.7218],\r\n    [15, 489.5, 0.000805, 0.04133, 0.04213, 220.1, 166.35, 386.45, 220.49, 186.58, 407.07, 1.0725, 0.6475, 1.72],\r\n    [20, 572.8, 0.000817, 0.03524, 0.03606, 227.03, 162.16, 389.19, 227.49, 182.35, 409.84, 1.0963, 0.622, 1.7183],\r\n    [25, 666.3, 0.000829, 0.03015, 0.03098, 234.04, 157.83, 391.87, 234.59, 177.92, 412.51, 1.1201, 0.5967, 1.7168],\r\n    [30, 771, 0.000843, 0.02587, 0.02671, 241.14, 153.34, 394.48, 241.79, 173.29, 415.08, 1.1437, 0.5716, 1.7153],\r\n    [35, 887.6, 0.000857, 0.02224, 0.0231, 248.34, 148.68, 397.02, 249.1, 168.42, 417.52, 1.1673, 0.5465, 1.7139],\r\n    [40, 1017, 0.000873, 0.01915, 0.02002, 255.65, 143.81, 399.46, 256.54, 163.28, 419.82, 1.1909, 0.5214, 1.7123],\r\n    [45, 1160.2, 0.00089, 0.0165, 0.01739, 263.08, 138.71, 401.79, 264.11, 157.85, 421.96, 1.2145, 0.4962, 1.7106],\r\n    [50, 1318.1, 0.000908, 0.01422, 0.01512, 270.63, 133.35, 403.98, 271.83, 152.08, 423.91, 1.2381, 0.4706, 1.7088],\r\n    [55, 1491.6, 0.000928, 0.01224, 0.01316, 278.33, 127.68, 406.01, 279.72, 145.93, 425.65, 1.2619, 0.4447, 1.7066],\r\n    [60, 1681.8, 0.000951, 0.01051, 0.01146, 286.19, 121.66, 407.85, 287.79, 139.33, 427.13, 1.2857, 0.4182, 1.704],\r\n    [65, 1889.9, 0.000976, 0.00899, 0.00997, 294.24, 115.22, 409.46, 296.09, 132.21, 428.3, 1.3099, 0.391, 1.7008],\r\n    [70, 2117, 0.001005, 0.00765, 0.00866, 302.51, 108.27, 410.78, 304.64, 124.47, 429.11, 1.3343, 0.3627, 1.697],\r\n    [75, 2364.4, 0.001038, 0.00645, 0.00749, 311.06, 100.68, 411.74, 313.51, 115.94, 429.45, 1.3592, 0.333, 1.6923],\r\n    [80, 2633.6, 0.001078, 0.00537, 0.00645, 319.96, 92.26, 412.22, 322.79, 106.4, 429.19, 1.3849, 0.3013, 1.6862],\r\n    [85, 2926.2, 0.001128, 0.00437, 0.0055, 329.35, 82.67, 412.01, 332.65, 95.45, 428.1, 1.4117, 0.2665, 1.6782],\r\n    [90, 3244.5, 0.001195, 0.00341, 0.00461, 339.51, 71.24, 410.75, 343.38, 82.31, 425.7, 1.4404, 0.2267, 1.6671],\r\n    [95, 3591.5, 0.001297, 0.00243, 0.00373, 351.17, 56.25, 407.42, 355.83, 64.98, 420.81, 1.4733, 0.1765, 1.6498],\r\n    [100, 3973.2, 0.001557, 0.00108, 0.00264, 368.55, 28.19, 396.74, 374.74, 32.47, 407.21, 1.5228, 0.087, 1.6098],\r\n    [101.2, 4064, 0.001969, 0, 0.00197, 382.97, 0, 382.97, 390.98, 0, 390.98, 1.5658, 0, 1.5658],\r\n  ],\r\n  b52: [\r\n    [50, -40.67, 0.36889, 354.61, 373.06, 1.7629],\r\n    [50, -20, 0.40507, 368.57, 388.82, 1.8279],\r\n    [50, -10, 0.42222, 375.53, 396.64, 1.8582],\r\n    [50, 0, 0.43921, 382.63, 404.59, 1.8878],\r\n    [50, 10, 0.45608, 389.9, 412.7, 1.917],\r\n    [50, 20, 0.47287, 397.32, 420.96, 1.9456],\r\n    [50, 30, 0.48958, 404.9, 429.38, 1.9739],\r\n    [50, 40, 0.50623, 412.64, 437.96, 2.0017],\r\n    [50, 50, 0.52284, 420.55, 446.7, 2.0292],\r\n    [50, 60, 0.53941, 428.63, 455.6, 2.0563],\r\n    [50, 70, 0.55595, 436.86, 464.66, 2.0831],\r\n    [50, 80, 0.57247, 445.26, 473.88, 2.1096],\r\n    [50, 90, 0.58896, 453.82, 483.26, 2.1358],\r\n    [50, 100, 0.60544, 462.53, 492.81, 2.1617],\r\n    [50, 110, 0.6219, 471.41, 502.5, 2.1874],\r\n    [50, 120, 0.63835, 480.44, 512.36, 2.2128],\r\n    [50, 130, 0.65479, 489.63, 522.37, 2.2379],\r\n    [100, -26.54, 0.19257, 362.73, 381.98, 1.7456],\r\n    [100, -20, 0.1986, 367.36, 387.22, 1.7665],\r\n    [100, -10, 0.20765, 374.51, 395.27, 1.7978],\r\n    [100, 0, 0.21652, 381.76, 403.41, 1.8281],\r\n    [100, 10, 0.22527, 389.14, 411.67, 1.8578],\r\n    [100, 20, 0.23392, 396.66, 420.05, 1.8869],\r\n    [100, 30, 0.2425, 404.31, 428.56, 1.9155],\r\n    [100, 40, 0.25101, 412.12, 437.22, 1.9436],\r\n    [100, 50, 0.25948, 420.08, 446.03, 1.9712],\r\n    [100, 60, 0.26791, 428.2, 454.99, 1.9985],\r\n    [100, 70, 0.27631, 436.47, 464.1, 2.0255],\r\n    [100, 80, 0.28468, 444.89, 473.36, 2.0521],\r\n    [100, 90, 0.29302, 453.47, 482.78, 2.0784],\r\n    [100, 100, 0.30135, 462.21, 492.35, 2.1044],\r\n    [100, 110, 0.30967, 471.11, 502.07, 2.1301],\r\n    [100, 120, 0.31797, 480.16, 511.95, 2.1555],\r\n    [100, 130, 0.32626, 489.36, 521.98, 2.1807],\r\n    [150, -17.29, 0.13139, 368.06, 387.77, 1.7372],\r\n    [150, -10, 0.13602, 373.44, 393.84, 1.7606],\r\n    [150, 0, 0.14222, 380.85, 402.19, 1.7917],\r\n    [150, 10, 0.14828, 388.36, 410.6, 1.822],\r\n    [150, 20, 0.15424, 395.98, 419.11, 1.8515],\r\n    [150, 30, 0.16011, 403.71, 427.73, 1.8804],\r\n    [150, 40, 0.16592, 411.59, 436.47, 1.9088],\r\n    [150, 50, 0.17168, 419.6, 445.35, 1.9367],\r\n    [150, 60, 0.1774, 427.76, 454.37, 1.9642],\r\n    [150, 70, 0.18308, 436.06, 463.53, 1.9913],\r\n    [150, 80, 0.18874, 444.52, 472.83, 2.018],\r\n    [150, 90, 0.19437, 453.13, 482.28, 2.0444],\r\n    [150, 100, 0.19999, 461.89, 491.89, 2.0705],\r\n    [150, 110, 0.20559, 470.8, 501.64, 2.0963],\r\n    [150, 120, 0.21117, 479.87, 511.54, 2.1218],\r\n    [150, 130, 0.21675, 489.08, 521.6, 2.147],\r\n    [150, 140, 0.22231, 498.45, 531.8, 2.172],\r\n    [200, -10.22, 0.10002, 372.15, 392.15, 1.732],\r\n    [200, -10, 0.10013, 372.31, 392.34, 1.7328],\r\n    [200, 0, 0.10501, 379.91, 400.91, 1.7647],\r\n    [200, 10, 0.10974, 387.55, 409.5, 1.7956],\r\n    [200, 20, 0.11436, 395.27, 418.15, 1.8256],\r\n    [200, 30, 0.11889, 403.1, 426.87, 1.8549],\r\n    [200, 40, 0.12335, 411.04, 435.71, 1.8836],\r\n    [200, 50, 0.12776, 419.11, 444.66, 1.9117],\r\n    [200, 60, 0.13213, 427.31, 453.74, 1.9394],\r\n    [200, 70, 0.13646, 435.65, 462.95, 1.9666],\r\n    [200, 80, 0.14076, 444.14, 472.3, 1.9935],\r\n    [200, 90, 0.14504, 452.78, 481.79, 2.02],\r\n    [200, 100, 0.1493, 461.56, 491.42, 2.0461],\r\n    [200, 110, 0.15355, 470.5, 501.21, 2.072],\r\n    [200, 120, 0.15777, 479.58, 511.13, 2.0976],\r\n    [200, 130, 0.16199, 488.81, 521.21, 2.1229],\r\n    [200, 140, 0.1662, 498.19, 531.43, 2.1479],\r\n    [300, 0.56, 0.06787, 378.33, 398.69, 1.7259],\r\n    [300, 10, 0.07111, 385.84, 407.17, 1.7564],\r\n    [300, 20, 0.07441, 393.8, 416.12, 1.7874],\r\n    [300, 30, 0.07762, 401.81, 425.1, 1.8175],\r\n    [300, 40, 0.08075, 409.9, 434.12, 1.8468],\r\n    [300, 50, 0.08382, 418.09, 443.23, 1.8755],\r\n    [300, 60, 0.08684, 426.39, 452.44, 1.9035],\r\n    [300, 70, 0.08982, 434.82, 461.76, 1.9311],\r\n    [300, 80, 0.09277, 443.37, 471.21, 1.9582],\r\n    [300, 90, 0.0957, 452.07, 480.78, 1.985],\r\n    [300, 100, 0.09861, 460.9, 490.48, 2.0113],\r\n    [300, 110, 0.1015, 469.87, 500.32, 2.0373],\r\n    [300, 120, 0.10437, 478.99, 510.3, 2.0631],\r\n    [300, 130, 0.10723, 488.26, 520.43, 2.0885],\r\n    [300, 140, 0.11008, 497.66, 530.69, 2.1136],\r\n    [300, 150, 0.11292, 507.22, 541.09, 2.1385],\r\n    [300, 160, 0.11575, 516.91, 551.64, 2.1631],\r\n    [400, 8.84, 0.05136, 383.02, 403.56, 1.7223],\r\n    [400, 10, 0.05168, 383.98, 404.65, 1.7261],\r\n    [400, 20, 0.05436, 392.22, 413.97, 1.7584],\r\n    [400, 30, 0.05693, 400.45, 423.22, 1.7895],\r\n    [400, 40, 0.0594, 408.7, 432.46, 1.8195],\r\n    [400, 50, 0.06181, 417.03, 441.75, 1.8487],\r\n    [400, 60, 0.06417, 425.44, 451.1, 1.8772],\r\n    [400, 70, 0.06648, 433.95, 460.55, 1.9051],\r\n    [400, 80, 0.06877, 442.58, 470.09, 1.9325],\r\n    [400, 90, 0.07102, 451.34, 479.75, 1.9595],\r\n    [400, 100, 0.07325, 460.22, 489.52, 1.986],\r\n    [400, 110, 0.07547, 469.24, 499.43, 2.0122],\r\n    [400, 120, 0.07767, 478.4, 509.46, 2.0381],\r\n    [400, 130, 0.07985, 487.69, 519.63, 2.0636],\r\n    [400, 140, 0.08202, 497.13, 529.94, 2.0889],\r\n    [400, 150, 0.08418, 506.71, 540.38, 2.1139],\r\n    [400, 160, 0.08634, 516.43, 550.97, 2.1386],\r\n    [500, 15.66, 0.04126, 386.82, 407.45, 1.7198],\r\n    [500, 20, 0.04226, 390.52, 411.65, 1.7342],\r\n    [500, 30, 0.04446, 398.99, 421.22, 1.7663],\r\n    [500, 40, 0.04656, 407.44, 430.72, 1.7971],\r\n    [500, 50, 0.04858, 415.91, 440.2, 1.827],\r\n    [500, 60, 0.05055, 424.44, 449.72, 1.856],\r\n    [500, 70, 0.05247, 433.06, 459.29, 1.8843],\r\n    [500, 80, 0.05435, 441.77, 468.94, 1.912],\r\n    [500, 90, 0.0562, 450.59, 478.69, 1.9392],\r\n    [500, 100, 0.05804, 459.53, 488.55, 1.966],\r\n    [500, 110, 0.05985, 468.6, 498.52, 1.9924],\r\n    [500, 120, 0.06164, 477.79, 508.61, 2.0184],\r\n    [500, 130, 0.06342, 487.13, 518.83, 2.044],\r\n    [500, 140, 0.06518, 496.59, 529.19, 2.0694],\r\n    [500, 150, 0.06694, 506.2, 539.67, 2.0945],\r\n    [500, 160, 0.06869, 515.95, 550.29, 2.1193],\r\n    [500, 170, 0.07043, 525.83, 561.04, 2.1438],\r\n    [600, 21.52, 0.03442, 390.01, 410.66, 1.7179],\r\n    [600, 30, 0.03609, 397.44, 419.09, 1.7461],\r\n    [600, 40, 0.03796, 406.11, 428.88, 1.7779],\r\n    [600, 50, 0.03974, 414.75, 438.59, 1.8084],\r\n    [600, 60, 0.04145, 423.41, 448.28, 1.8379],\r\n    [600, 70, 0.04311, 432.13, 457.99, 1.8666],\r\n    [600, 80, 0.04473, 440.93, 467.76, 1.8947],\r\n    [600, 90, 0.04632, 449.82, 477.61, 1.9222],\r\n    [600, 100, 0.04788, 458.82, 487.55, 1.9492],\r\n    [600, 110, 0.04943, 467.94, 497.59, 1.9758],\r\n    [600, 120, 0.05095, 477.18, 507.75, 2.0019],\r\n    [600, 130, 0.05246, 486.55, 518.03, 2.0277],\r\n    [600, 140, 0.05396, 496.05, 528.43, 2.0532],\r\n    [600, 150, 0.05544, 505.69, 538.95, 2.0784],\r\n    [600, 160, 0.05692, 515.46, 549.61, 2.1033],\r\n    [600, 170, 0.05839, 525.36, 560.4, 2.127],\r\n    [800, 31.3, 0.02571, 395.15, 415.72, 1.715],\r\n    [800, 40, 0.02711, 403.17, 424.86, 1.7446],\r\n    [800, 50, 0.02861, 412.23, 435.11, 1.7768],\r\n    [800, 60, 0.03002, 421.2, 445.22, 1.8076],\r\n    [800, 70, 0.03137, 430.17, 455.27, 1.8373],\r\n    [800, 80, 0.03268, 439.17, 465.31, 1.8662],\r\n    [800, 90, 0.03394, 448.22, 475.38, 1.8943],\r\n    [800, 100, 0.03518, 457.35, 485.5, 1.9218],\r\n    [800, 110, 0.03639, 466.58, 495.7, 1.9487],\r\n    [800, 120, 0.03758, 475.92, 505.99, 1.9753],\r\n    [800, 130, 0.03876, 485.37, 516.38, 2.0014],\r\n    [800, 140, 0.03992, 494.94, 526.88, 2.0271],\r\n    [800, 150, 0.04107, 504.64, 537.5, 2.0525],\r\n    [800, 160, 0.04221, 514.46, 548.23, 2.0775],\r\n    [800, 170, 0.04334, 524.42, 559.09, 2.1023],\r\n    [800, 180, 0.04446, 534.51, 570.08, 2.1268],\r\n    [1000, 39.37, 0.02038, 399.16, 419.54, 1.7125],\r\n    [1000, 40, 0.02047, 399.78, 420.25, 1.7148],\r\n    [1000, 50, 0.02185, 409.39, 431.24, 1.7494],\r\n    [1000, 60, 0.02311, 418.78, 441.89, 1.7818],\r\n    [1000, 70, 0.02429, 428.05, 452.34, 1.8127],\r\n    [1000, 80, 0.02542, 437.29, 462.7, 1.8425],\r\n    [1000, 90, 0.0265, 446.53, 473.03, 1.8713],\r\n    [1000, 100, 0.02754, 455.82, 483.36, 1.8994],\r\n    [1000, 110, 0.02856, 465.18, 493.74, 1.9268],\r\n    [1000, 120, 0.02956, 474.62, 504.17, 1.9537],\r\n    [1000, 130, 0.03053, 484.16, 514.69, 1.9801],\r\n    [1000, 140, 0.0315, 493.81, 525.3, 2.0061],\r\n    [1000, 150, 0.03244, 503.57, 536.02, 2.0318],\r\n    [1000, 160, 0.03338, 513.46, 546.84, 2.057],\r\n    [1000, 170, 0.03431, 523.46, 557.77, 2.082],\r\n    [1000, 180, 0.03523, 533.6, 568.83, 2.1067],\r\n    [1200, 46.31, 0.01676, 402.37, 422.49, 1.7102],\r\n    [1200, 50, 0.01724, 406.15, 426.84, 1.7237],\r\n    [1200, 60, 0.01844, 416.08, 438.21, 1.7584],\r\n    [1200, 70, 0.01953, 425.74, 449.18, 1.7908],\r\n    [1200, 80, 0.02055, 435.27, 459.92, 1.8217],\r\n    [1200, 90, 0.02151, 444.74, 470.55, 1.8514],\r\n    [1200, 100, 0.02244, 454.2, 481.13, 1.8801],\r\n    [1200, 110, 0.02333, 463.71, 491.7, 1.9081],\r\n    [1200, 120, 0.0242, 473.27, 502.31, 1.9354],\r\n    [1200, 130, 0.02504, 482.91, 512.97, 1.9621],\r\n    [1200, 140, 0.02587, 492.65, 523.7, 1.9884],\r\n    [1200, 150, 0.02669, 502.48, 534.51, 2.0143],\r\n    [1200, 160, 0.0275, 512.43, 545.43, 2.0398],\r\n    [1200, 170, 0.02829, 522.5, 556.44, 2.0649],\r\n    [1200, 180, 0.02907, 532.68, 567.57, 2.0898],\r\n    [1400, 52.42, 0.01414, 404.98, 424.78, 1.7077],\r\n    [1400, 60, 0.01503, 413.03, 434.08, 1.736],\r\n    [1400, 70, 0.01608, 423.2, 445.72, 1.7704],\r\n    [1400, 80, 0.01704, 433.09, 456.94, 1.8026],\r\n    [1400, 90, 0.01793, 442.83, 467.93, 1.8333],\r\n    [1400, 100, 0.01878, 452.5, 478.79, 1.8628],\r\n    [1400, 110, 0.01958, 462.17, 489.59, 1.8914],\r\n    [1400, 120, 0.02036, 471.87, 500.38, 1.9192],\r\n    [1400, 130, 0.02112, 481.63, 511.19, 1.9463],\r\n    [1400, 140, 0.02186, 491.46, 522.05, 1.973],\r\n    [1400, 150, 0.02258, 501.37, 532.98, 1.9991],\r\n    [1400, 160, 0.02329, 511.39, 543.99, 2.0248],\r\n    [1400, 170, 0.02399, 521.51, 555.1, 2.0502],\r\n    [1400, 180, 0.02468, 531.75, 566.3, 2.0752],\r\n    [1600, 57.9, 0.01215, 407.11, 426.54, 1.7051],\r\n    [1600, 60, 0.01239, 409.49, 429.32, 1.7135],\r\n    [1600, 70, 0.01345, 420.37, 441.89, 1.7507],\r\n    [1600, 80, 0.01438, 430.72, 453.72, 1.7847],\r\n    [1600, 90, 0.01522, 440.79, 465.15, 1.8166],\r\n    [1600, 100, 0.01601, 450.71, 476.33, 1.8469],\r\n    [1600, 110, 0.01676, 460.57, 487.39, 1.8762],\r\n    [1600, 120, 0.01748, 470.42, 498.39, 1.9045],\r\n    [1600, 130, 0.01817, 480.3, 509.37, 1.9321],\r\n    [1600, 140, 0.01884, 490.23, 520.38, 1.9591],\r\n    [1600, 150, 0.01949, 500.24, 531.43, 1.9855],\r\n    [1600, 160, 0.02013, 510.33, 542.54, 2.0115],\r\n    [1600, 170, 0.02076, 520.52, 553.73, 2.037],\r\n    [1600, 180, 0.02138, 530.81, 565.02, 2.0622],\r\n    [2000, 67.48, 0.0093, 410.15, 428.75, 1.6991],\r\n    [2000, 70, 0.00958, 413.37, 432.53, 1.7101],\r\n    [2000, 80, 0.01055, 425.2, 446.3, 1.7497],\r\n    [2000, 90, 0.01137, 436.2, 458.95, 1.785],\r\n    [2000, 100, 0.01211, 446.78, 471, 1.8177],\r\n    [2000, 110, 0.01279, 457.12, 482.69, 1.8487],\r\n    [2000, 120, 0.01342, 467.34, 494.19, 1.8783],\r\n    [2000, 130, 0.01403, 477.51, 505.57, 1.9069],\r\n    [2000, 140, 0.01461, 487.68, 516.9, 1.9346],\r\n    [2000, 150, 0.01517, 497.89, 528.22, 1.9617],\r\n    [2000, 160, 0.01571, 508.15, 539.57, 1.9882],\r\n    [2000, 170, 0.01624, 518.48, 550.96, 2.0142],\r\n    [2000, 180, 0.01676, 528.89, 562.42, 2.0398],\r\n    [3000, 86.2, 0.00528, 411.83, 427.67, 1.6759],\r\n    [3000, 90, 0.00575, 418.93, 436.19, 1.6995],\r\n    [3000, 100, 0.00665, 433.77, 453.73, 1.7472],\r\n    [3000, 110, 0.00734, 446.48, 468.5, 1.7862],\r\n    [3000, 120, 0.00792, 458.27, 482.04, 1.8211],\r\n    [3000, 130, 0.00845, 469.58, 494.91, 1.8535],\r\n    [3000, 140, 0.00893, 480.61, 507.39, 1.884],\r\n    [3000, 150, 0.00937, 491.49, 519.62, 1.9133],\r\n    [3000, 160, 0.0098, 502.3, 531.7, 1.9415],\r\n    [3000, 170, 0.01021, 513.09, 543.71, 1.9689],\r\n    [3000, 180, 0.0106, 523.89, 555.69, 1.9956],\r\n    [4000, 100.33, 0.00252, 394.86, 404.94, 1.6036],\r\n    [4000, 110, 0.00428, 429.74, 446.84, 1.7148],\r\n    [4000, 120, 0.005, 445.97, 465.99, 1.7642],\r\n    [4000, 130, 0.00556, 459.63, 481.87, 1.804],\r\n    [4000, 140, 0.00603, 472.19, 496.29, 1.8394],\r\n    [4000, 150, 0.00644, 484.15, 509.92, 1.872],\r\n    [4000, 160, 0.00683, 495.77, 523.07, 1.9027],\r\n    [4000, 170, 0.00718, 507.19, 535.92, 1.932],\r\n    [4000, 180, 0.00752, 518.51, 548.57, 1.9603],\r\n    [6000, 90, 0.001059, 328.34, 334.7, 1.4081],\r\n    [6000, 100, 0.00115, 346.71, 353.61, 1.4595],\r\n    [6000, 110, 0.001307, 368.06, 375.9, 1.5184],\r\n    [6000, 120, 0.001698, 396.59, 406.78, 1.5979],\r\n    [6000, 130, 0.002396, 426.81, 441.18, 1.6843],\r\n    [6000, 140, 0.002985, 448.34, 466.25, 1.7458],\r\n    [6000, 150, 0.003439, 465.19, 485.82, 1.7926],\r\n    [6000, 160, 0.003814, 479.89, 502.77, 1.8322],\r\n    [6000, 170, 0.004141, 493.45, 518.3, 1.8676],\r\n    [6000, 180, 0.004435, 506.35, 532.96, 1.9004],\r\n    [10000, 90, 0.000991, 320.72, 330.62, 1.3856],\r\n    [10000, 100, 0.00104, 336.45, 346.85, 1.4297],\r\n    [10000, 110, 0.0011, 352.74, 363.73, 1.4744],\r\n    [10000, 120, 0.001175, 369.69, 381.44, 1.52],\r\n    [10000, 130, 0.001272, 387.44, 400.16, 1.567],\r\n    [10000, 140, 0.0014, 405.97, 419.98, 1.6155],\r\n    [10000, 150, 0.001564, 424.99, 440.63, 1.6649],\r\n    [10000, 160, 0.001758, 443.77, 461.34, 1.7133],\r\n    [10000, 170, 0.001965, 461.65, 481.3, 1.7589],\r\n    [10000, 180, 0.002172, 478.4, 500.12, 1.8009],\r\n  ],\r\n  b61: [\r\n    [63.1, 12.5, 0.00115, 1.48074, 1.48189, -150.92, 196.86, 45.94, -150.91, 215.39, 64.48, 2.4234, 3.4109, 5.8343],\r\n    [65, 17.4, 0.00116, 1.09231, 1.09347, -147.19, 194.37, 47.17, -147.17, 213.38, 66.21, 2.4816, 3.2828, 5.7645],\r\n    [70, 38.6, 0.001191, 0.52513, 0.52632, -137.13, 187.54, 50.4, -137.09, 207.79, 70.7, 2.6307, 2.9684, 5.5991],\r\n    [75, 76.1, 0.001223, 0.28052, 0.28174, -127.04, 180.47, 53.43, -126.95, 201.82, 74.87, 2.77, 2.6909, 5.4609],\r\n    [77.3, 101.3, 0.00124, 0.21515, 0.21639, -122.27, 177.04, 54.76, -122.15, 198.84, 76.69, 2.8326, 2.5707, 5.4033],\r\n    [80, 137, 0.001259, 0.16249, 0.16375, -116.86, 173.06, 56.2, -116.69, 195.32, 78.63, 2.9014, 2.4415, 5.3429],\r\n    [85, 229.1, 0.001299, 0.10018, 0.10148, -106.55, 165.2, 58.65, -106.25, 188.15, 81.9, 3.0266, 2.2135, 5.2401],\r\n    [90, 360.8, 0.001343, 0.06477, 0.06611, -96.06, 156.76, 60.7, -95.58, 180.13, 84.55, 3.1466, 2.0015, 5.148],\r\n    [95, 541.1, 0.001393, 0.04337, 0.04476, -85.35, 147.6, 62.25, -84.59, 171.07, 86.47, 3.2627, 1.8007, 5.0634],\r\n    [100, 779.2, 0.001452, 0.02975, 0.0312, -74.33, 137.5, 63.17, -73.2, 160.68, 87.48, 3.3761, 1.6068, 4.9829],\r\n    [105, 1084.6, 0.001522, 0.02066, 0.02218, -62.89, 126.18, 63.29, -61.24, 148.59, 87.35, 3.4883, 1.4151, 4.9034],\r\n    [110, 1467.6, 0.00161, 0.01434, 0.01595, -50.81, 113.11, 62.31, -48.45, 134.15, 85.71, 3.6017, 1.2196, 4.8213],\r\n    [115, 1939.3, 0.001729, 0.00971, 0.01144, -37.66, 97.36, 59.7, -34.31, 116.19, 81.88, 3.7204, 1.0104, 4.7307],\r\n    [120, 2513, 0.001915, 0.00608, 0.00799, -22.42, 76.63, 54.21, -17.61, 91.91, 74.3, 3.8536, 0.7659, 4.6195],\r\n    [125, 3208, 0.002355, 0.00254, 0.0049, -0.83, 40.73, 39.9, 6.73, 48.88, 55.6, 4.0399, 0.391, 4.4309],\r\n    [126.2, 3397.8, 0.003194, 0, 0.00319, 18.94, 0, 18, 29.79, 0, 29.79, 4.2193, 0, 4.2193],\r\n  ],\r\n  b62: [\r\n    [100, 77.24, 0.21903, 54.7, 76.61, 5.4059],\r\n    [100, 100, 0.29103, 72.84, 101.94, 5.6944],\r\n    [100, 120, 0.35208, 87.94, 123.15, 5.8878],\r\n    [100, 140, 0.41253, 102.95, 144.2, 6.0501],\r\n    [100, 160, 0.47263, 117.91, 165.17, 6.1901],\r\n    [100, 180, 0.53254, 132.83, 186.09, 6.3132],\r\n    [100, 200, 0.59231, 147.74, 206.97, 6.4232],\r\n    [100, 220, 0.65199, 162.63, 227.83, 6.5227],\r\n    [100, 240, 0.71161, 177.51, 248.67, 6.6133],\r\n    [100, 260, 0.77118, 192.39, 269.51, 6.6967],\r\n    [100, 280, 0.83072, 207.26, 290.33, 6.7739],\r\n    [100, 300, 0.89023, 222.14, 311.16, 6.8457],\r\n    [100, 350, 1.03891, 259.35, 363.24, 7.0063],\r\n    [100, 400, 1.18752, 296.66, 415.41, 7.1456],\r\n    [100, 450, 1.33607, 334.16, 467.77, 7.269],\r\n    [100, 500, 1.48458, 371.95, 520.41, 7.3799],\r\n    [100, 600, 1.78154, 448.79, 626.94, 7.5741],\r\n    [100, 700, 2.07845, 527.74, 735.58, 7.7415],\r\n    [100, 800, 2.37532, 609.07, 846.6, 7.8897],\r\n    [100, 900, 2.67217, 692.79, 960.01, 8.0232],\r\n    [100, 1000, 2.969, 778.78, 1075.68, 8.1451],\r\n    [200, 83.62, 0.1152, 58.01, 81.05, 5.2673],\r\n    [200, 100, 0.14252, 71.73, 100.24, 5.4775],\r\n    [200, 120, 0.17397, 87.14, 121.93, 5.6753],\r\n    [200, 140, 0.20476, 102.33, 143.28, 5.8399],\r\n    [200, 160, 0.23519, 117.4, 164.44, 5.9812],\r\n    [200, 180, 0.26542, 132.41, 185.49, 6.1052],\r\n    [200, 200, 0.29551, 147.37, 206.48, 6.2157],\r\n    [200, 220, 0.32552, 162.31, 227.41, 6.3155],\r\n    [200, 240, 0.35546, 177.23, 248.32, 6.4064],\r\n    [200, 260, 0.38535, 192.14, 269.21, 6.49],\r\n    [200, 280, 0.4152, 207.04, 290.08, 6.5674],\r\n    [200, 300, 0.44503, 221.93, 310.94, 6.6393],\r\n    [200, 350, 0.51952, 259.18, 363.09, 6.8001],\r\n    [200, 400, 0.59392, 296.52, 415.31, 6.9396],\r\n    [200, 450, 0.66827, 334.04, 467.7, 7.063],\r\n    [200, 500, 0.74258, 371.85, 520.37, 7.174],\r\n    [200, 600, 0.89114, 448.71, 626.94, 7.3682],\r\n    [200, 700, 1.03965, 527.68, 735.61, 7.5357],\r\n    [200, 800, 1.18812, 609.02, 846.64, 7.6839],\r\n    [200, 900, 1.33657, 692.75, 960.07, 7.8175],\r\n    [200, 1000, 1.48501, 778.74, 1075.75, 7.9393],\r\n    [400, 91.22, 0.05992, 61.13, 85.1, 5.1268],\r\n    [400, 100, 0.06806, 69.3, 96.52, 5.2466],\r\n    [400, 120, 0.08486, 85.48, 119.42, 5.4556],\r\n    [400, 140, 0.10085, 101.06, 141.4, 5.625],\r\n    [400, 160, 0.11647, 116.38, 162.96, 5.769],\r\n    [400, 180, 0.13186, 131.55, 184.3, 5.8947],\r\n    [400, 200, 0.14712, 146.64, 205.49, 6.0063],\r\n    [400, 220, 0.16228, 161.68, 226.59, 6.1069],\r\n    [400, 240, 0.17738, 176.67, 247.62, 6.1984],\r\n    [400, 260, 0.19243, 191.64, 268.61, 6.2824],\r\n    [400, 280, 0.20745, 206.58, 289.56, 6.36],\r\n    [400, 300, 0.22244, 221.52, 310.5, 6.4322],\r\n    [400, 350, 0.25982, 258.85, 362.78, 6.5934],\r\n    [400, 400, 0.29712, 296.25, 415.1, 6.7331],\r\n    [400, 450, 0.33437, 333.81, 467.56, 6.8567],\r\n    [400, 500, 0.37159, 371.65, 520.28, 6.9678],\r\n    [400, 600, 0.44595, 448.55, 626.93, 7.1622],\r\n    [400, 700, 0.52025, 527.55, 735.65, 7.3298],\r\n    [400, 800, 0.59453, 608.92, 846.73, 7.4781],\r\n    [400, 900, 0.66878, 692.67, 960.19, 7.6117],\r\n    [400, 1000, 0.74302, 778.68, 1075.89, 7.7335],\r\n    [600, 96.37, 0.04046, 62.57, 86.85, 5.0411],\r\n    [600, 100, 0.04299, 66.41, 92.2, 5.0957],\r\n    [600, 120, 0.0551, 83.73, 116.79, 5.3204],\r\n    [600, 140, 0.0662, 99.75, 139.47, 5.4953],\r\n    [600, 160, 0.07689, 115.34, 161.47, 5.6422],\r\n    [600, 180, 0.08734, 130.69, 183.1, 5.7696],\r\n    [600, 200, 0.09766, 145.91, 204.5, 5.8823],\r\n    [600, 220, 0.10788, 161.04, 225.76, 5.9837],\r\n    [600, 240, 0.11803, 176.11, 246.92, 6.0757],\r\n    [600, 260, 0.12813, 191.13, 268.01, 6.1601],\r\n    [600, 280, 0.1382, 206.13, 289.05, 6.2381],\r\n    [600, 300, 0.14824, 221.11, 310.06, 6.3105],\r\n    [600, 350, 0.17326, 258.52, 362.48, 6.4722],\r\n    [600, 400, 0.19819, 295.97, 414.89, 6.6121],\r\n    [600, 450, 0.22308, 333.57, 467.42, 6.7359],\r\n    [600, 500, 0.24792, 371.45, 520.2, 6.8471],\r\n    [600, 600, 0.29755, 448.4, 626.93, 7.0416],\r\n    [600, 700, 0.34712, 527.43, 735.7, 7.2093],\r\n    [600, 800, 0.39666, 608.82, 846.82, 7.3576],\r\n    [600, 900, 0.44618, 692.59, 960.3, 7.4912],\r\n    [600, 1000, 0.49568, 778.61, 1076.02, 7.6131],\r\n    [800, 100.38, 0.03038, 63.21, 87.52, 4.9768],\r\n    [800, 120, 0.04017, 81.88, 114.02, 5.2191],\r\n    [800, 140, 0.04886, 98.41, 137.5, 5.4002],\r\n    [800, 160, 0.0571, 114.28, 159.95, 5.5501],\r\n    [800, 180, 0.06509, 129.82, 181.89, 5.6793],\r\n    [800, 200, 0.07293, 145.17, 203.51, 5.7933],\r\n    [800, 220, 0.08067, 160.4, 224.94, 5.8954],\r\n    [800, 240, 0.08835, 175.54, 246.23, 5.988],\r\n    [800, 260, 0.09599, 190.63, 267.42, 6.0728],\r\n    [800, 280, 0.10358, 205.68, 288.54, 6.1511],\r\n    [800, 300, 0.11115, 220.7, 309.62, 6.2238],\r\n    [800, 350, 0.12998, 258.19, 362.17, 6.3858],\r\n    [800, 400, 0.14873, 295.69, 414.68, 6.526],\r\n    [800, 500, 0.18609, 371.25, 520.12, 6.7613],\r\n    [800, 600, 0.22335, 448.24, 626.93, 6.956],\r\n    [800, 700, 0.26056, 527.31, 735.76, 7.1237],\r\n    [800, 800, 0.29773, 608.73, 846.91, 7.2721],\r\n    [800, 900, 0.33488, 692.52, 960.42, 7.4058],\r\n    [800, 1000, 0.37202, 778.55, 1076.16, 7.5277],\r\n    [1000, 103.73, 0.02416, 63.35, 87.51, 4.9237],\r\n    [1000, 120, 0.03117, 79.91, 111.08, 5.1357],\r\n    [1000, 140, 0.03845, 97.02, 135.47, 5.3239],\r\n    [1000, 160, 0.04522, 113.2, 158.42, 5.4772],\r\n    [1000, 180, 0.05173, 128.94, 180.67, 5.6082],\r\n    [1000, 200, 0.05809, 144.43, 202.52, 5.7234],\r\n    [1000, 220, 0.06436, 159.76, 224.11, 5.8263],\r\n    [1000, 240, 0.07055, 174.98, 245.53, 5.9194],\r\n    [1000, 260, 0.0767, 190.13, 266.83, 6.0047],\r\n    [1000, 280, 0.08281, 205.23, 288.04, 6.0833],\r\n    [1000, 300, 0.08889, 220.29, 309.18, 6.1562],\r\n    [1000, 350, 0.10401, 257.86, 361.87, 6.3187],\r\n    [1000, 400, 0.11905, 295.42, 414.47, 6.4591],\r\n    [1000, 500, 0.14899, 371.04, 520.04, 6.6947],\r\n    [1000, 600, 0.17883, 448.09, 626.92, 6.8895],\r\n    [1000, 700, 0.20862, 527.19, 735.81, 7.0573],\r\n    [1000, 800, 0.23837, 608.63, 847, 7.2057],\r\n    [1000, 900, 0.2681, 692.44, 960.54, 7.3394],\r\n    [1000, 1000, 0.29782, 778.49, 1076.3, 7.4614],\r\n    [1500, 110.38, 0.01555, 62.17, 85.51, 4.8148],\r\n    [1500, 120, 0.01899, 74.26, 102.75, 4.965],\r\n    [1500, 140, 0.02452, 93.36, 130.15, 5.1767],\r\n    [1500, 160, 0.02937, 110.44, 154.5, 5.3394],\r\n    [1500, 180, 0.03393, 126.71, 177.6, 5.4755],\r\n    [1500, 200, 0.03832, 142.56, 200.03, 5.5937],\r\n    [1500, 220, 0.0426, 158.14, 222.05, 5.6987],\r\n    [1500, 240, 0.04682, 173.57, 243.8, 5.7933],\r\n    [1500, 260, 0.05099, 188.87, 265.36, 5.8796],\r\n    [1500, 280, 0.05512, 204.1, 286.78, 5.959],\r\n    [1500, 300, 0.05922, 219.27, 308.1, 6.0325],\r\n    [1500, 350, 0.0694, 257.03, 361.13, 6.196],\r\n    [1500, 400, 0.07949, 294.73, 413.96, 6.3371],\r\n    [1500, 450, 0.08953, 332.53, 466.82, 6.4616],\r\n    [1500, 500, 0.09953, 370.54, 519.84, 6.5733],\r\n    [1500, 600, 0.11948, 447.71, 626.92, 6.7685],\r\n    [1500, 700, 0.13937, 526.89, 735.94, 6.9365],\r\n    [1500, 800, 0.15923, 608.39, 847.22, 7.0851],\r\n    [1500, 900, 0.17906, 692.24, 960.83, 7.2189],\r\n    [1500, 1000, 0.19889, 778.32, 1076.65, 7.3409],\r\n    [2000, 115.58, 0.011, 59.25, 81.25, 4.7193],\r\n    [2000, 120, 0.0126, 66.9, 92.1, 4.8116],\r\n    [2000, 140, 0.01752, 89.37, 124.4, 5.0618],\r\n    [2000, 160, 0.02144, 107.55, 150.43, 5.2358],\r\n    [2000, 180, 0.02503, 124.42, 174.48, 5.3775],\r\n    [2000, 200, 0.02844, 140.66, 197.53, 5.4989],\r\n    [2000, 220, 0.03174, 156.52, 219.99, 5.606],\r\n    [2000, 240, 0.03496, 172.15, 242.08, 5.7021],\r\n    [2000, 260, 0.03814, 187.62, 263.9, 5.7894],\r\n    [2000, 280, 0.04128, 202.97, 285.53, 5.8696],\r\n    [2000, 300, 0.0444, 218.24, 307.03, 5.9438],\r\n    [2000, 350, 0.05209, 256.21, 360.39, 6.1083],\r\n    [2000, 400, 0.05971, 294.05, 413.47, 6.25],\r\n    [2000, 450, 0.06727, 331.95, 466.49, 6.375],\r\n    [2000, 500, 0.0748, 370.05, 519.65, 6.487],\r\n    [2000, 600, 0.0898, 447.33, 626.93, 6.6825],\r\n    [2000, 700, 0.10474, 526.59, 736.07, 6.8507],\r\n    [2000, 800, 0.11965, 608.14, 847.45, 6.9994],\r\n    [2000, 900, 0.13454, 692.04, 961.13, 7.1333],\r\n    [2000, 1000, 0.14942, 778.16, 1077.01, 7.2553],\r\n    [3000, 123.61, 0.00582, 46.03, 63.47, 4.5032],\r\n    [3000, 140, 0.01038, 79.98, 111.13, 4.8706],\r\n    [3000, 160, 0.0135, 101.35, 141.85, 5.0763],\r\n    [3000, 180, 0.01614, 119.68, 168.09, 5.231],\r\n    [3000, 200, 0.01857, 136.78, 192.49, 5.3596],\r\n    [3000, 220, 0.02088, 153.24, 215.88, 5.4711],\r\n    [3000, 240, 0.02312, 169.3, 238.66, 5.5702],\r\n    [3000, 260, 0.02531, 185.1, 261.02, 5.6597],\r\n    [3000, 280, 0.02746, 200.72, 283.09, 5.7414],\r\n    [3000, 300, 0.02958, 216.21, 304.94, 5.8168],\r\n    [3000, 350, 0.0348, 254.57, 358.96, 5.9834],\r\n    [3000, 400, 0.03993, 292.7, 412.5, 6.1264],\r\n    [3000, 500, 0.05008, 369.06, 519.29, 6.3647],\r\n    [3000, 600, 0.06013, 446.57, 626.95, 6.5609],\r\n    [3000, 700, 0.07012, 525.99, 736.35, 6.7295],\r\n    [3000, 800, 0.08008, 607.67, 847.92, 6.8785],\r\n    [3000, 900, 0.09003, 691.65, 961.73, 7.0125],\r\n    [3000, 1000, 0.09996, 777.85, 1077.72, 7.1347],\r\n    [10000, 140, 0.002, 0.84, 20.87, 4.0373],\r\n    [10000, 160, 0.00291, 47.44, 76.52, 4.4088],\r\n    [10000, 180, 0.00402, 82.44, 122.65, 4.6813],\r\n    [10000, 200, 0.00501, 108.21, 158.35, 4.8697],\r\n    [10000, 220, 0.0059, 129.86, 188.88, 5.0153],\r\n    [10000, 240, 0.00672, 149.42, 216.64, 5.1362],\r\n    [10000, 260, 0.00749, 167.77, 242.72, 5.2406],\r\n    [10000, 280, 0.00824, 185.34, 267.69, 5.3331],\r\n    [10000, 300, 0.00895, 202.38, 291.9, 5.4167],\r\n    [10000, 350, 0.01067, 243.57, 350.26, 5.5967],\r\n    [10000, 400, 0.01232, 283.59, 406.79, 5.7477],\r\n    [10000, 500, 0.01551, 362.42, 517.48, 5.9948],\r\n    [10000, 600, 0.01861, 441.47, 627.58, 6.1955],\r\n    [10000, 700, 0.02167, 521.96, 738.65, 6.3667],\r\n    [10000, 800, 0.0247, 604.42, 851.43, 6.5172],\r\n    [10000, 900, 0.02771, 689.02, 966.15, 6.6523],\r\n    [10000, 1000, 0.03072, 775.68, 1082.84, 6.7753],\r\n  ],\r\n  b71: [\r\n    [90.7, 11.7, 0.002215, 3.97941, 3.98163, -358.1, 496.59, 138.49, -358.07, 543.12, 185.05, 4.2264, 5.9891, 10.2155],\r\n    [95, 19.8, 0.002243, 2.44845, 2.45069, -343.79, 488.62, 144.83, -343.75, 537.18, 193.43, 4.3805, 5.6545, 10.035],\r\n    [100, 34.4, 0.002278, 1.47657, 1.47885, -326.9, 478.96, 152.06, -326.83, 529.77, 202.94, 4.5538, 5.2977, 9.8514],\r\n    [105, 56.4, 0.002315, 0.9378, 0.94012, -309.79, 468.89, 159.11, -309.66, 521.82, 212.16, 4.7208, 4.9697, 9.6905],\r\n    [110, 88.2, 0.002353, 0.62208, 0.62443, -292.5, 458.41, 165.91, -292.29, 513.29, 221, 4.8817, 4.6663, 9.548],\r\n    [111.7, 101.3, 0.002367, 0.5476, 0.54997, -286.74, 454.85, 168.1, -286.5, 510.33, 223.83, 4.9336, 4.5706, 9.5042],\r\n    [115, 132.3, 0.002395, 0.428, 0.4304, -275.05, 447.48, 172.42, -274.74, 504.12, 229.38, 5.0368, 4.3836, 9.4205],\r\n    [120, 191.6, 0.002439, 0.30367, 0.3061, -257.45, 436.02, 178.57, -256.98, 494.2, 237.23, 5.1867, 4.1184, 9.3051],\r\n    [125, 269, 0.002486, 0.22108, 0.22357, -239.66, 423.97, 184.32, -238.99, 483.44, 244.45, 5.3321, 3.8675, 9.1996],\r\n    [130, 367.6, 0.002537, 0.16448, 0.16701, -221.65, 411.25, 189.6, -220.72, 471.72, 251, 5.4734, 3.6286, 9.102],\r\n    [135, 490.7, 0.002592, 0.12458, 0.12717, -203.4, 397.77, 194.37, -202.13, 458.9, 256.77, 5.6113, 3.3993, 9.0106],\r\n    [140, 641.6, 0.002653, 0.09575, 0.09841, -184.86, 383.42, 198.56, -183.16, 444.85, 261.69, 5.7464, 3.1775, 8.9239],\r\n    [145, 823.7, 0.002719, 0.07445, 0.07717, -165.97, 368.06, 202.09, -163.73, 429.38, 265.66, 5.8794, 2.9613, 8.8406],\r\n    [150, 1040.5, 0.002794, 0.05839, 0.06118, -146.65, 351.53, 204.88, -143.74, 412.29, 268.54, 6.0108, 2.7486, 8.7594],\r\n    [155, 1295.6, 0.002877, 0.04605, 0.04892, -126.82, 333.61, 206.79, -123.09, 393.27, 270.18, 6.1415, 2.5372, 8.6787],\r\n    [160, 1592.8, 0.002974, 0.03638, 0.03936, -106.35, 314.01, 207.66, -101.61, 371.96, 270.35, 6.2724, 2.3248, 8.5971],\r\n    [165, 1935.9, 0.003086, 0.02868, 0.03177, -85.06, 292.3, 207.24, -79.08, 347.82, 268.74, 6.4046, 2.108, 8.5126],\r\n    [170, 2329.3, 0.003222, 0.02241, 0.02563, -62.67, 267.81, 205.14, -55.17, 320.02, 264.85, 6.5399, 1.8824, 8.4224],\r\n    [175, 2777.6, 0.003393, 0.01718, 0.02058, -38.75, 239.47, 200.72, -29.33, 287.2, 257.87, 6.6811, 1.6411, 8.3223],\r\n    [180, 3286.4, 0.003623, 0.01266, 0.01629, -12.43, 205.16, 192.73, -0.53, 246.77, 246.25, 6.8333, 1.371, 8.2043],\r\n    [185, 3863.2, 0.003977, 0.00846, 0.01243, 18.47, 159.49, 177.96, 33.83, 192.16, 226, 7.0095, 1.0387, 8.0483],\r\n    [190, 4520.5, 0.004968, 0.003, 0.00797, 69.1, 67.01, 136.11, 91.56, 80.58, 172.14, 7.3015, 0.4241, 7.7256],\r\n    [190.6, 4599.2, 0.006148, 0, 0.00615, 101.46, 0, 101.46, 129.74, 0, 129.74, 7.4999, 0, 7.4999],\r\n  ],\r\n  b72: [\r\n    [100, 111.5, 0.55665, 167.9, 223.56, 9.5084],\r\n    [100, 125, 0.63126, 190.21, 253.33, 9.7606],\r\n    [100, 150, 0.76586, 230.18, 306.77, 10.1504],\r\n    [100, 175, 0.8984, 269.72, 359.56, 10.4759],\r\n    [100, 200, 1.02994, 309.2, 412.19, 10.757],\r\n    [100, 225, 1.16092, 348.9, 464.99, 11.0058],\r\n    [100, 250, 1.29154, 389.12, 518.27, 11.2303],\r\n    [100, 275, 1.42193, 430.17, 572.36, 11.4365],\r\n    [100, 300, 1.55215, 472.36, 627.58, 11.6286],\r\n    [100, 325, 1.68225, 516, 684.23, 11.81],\r\n    [100, 350, 1.81226, 561.34, 742.57, 11.9829],\r\n    [100, 375, 1.9422, 608.58, 802.8, 12.1491],\r\n    [100, 400, 2.07209, 657.89, 865.1, 12.3099],\r\n    [100, 425, 2.20193, 709.36, 929.55, 12.4661],\r\n    [200, 120.61, 0.29422, 179.3, 238.14, 9.2918],\r\n    [200, 125, 0.30695, 186.8, 248.19, 9.3736],\r\n    [200, 150, 0.377, 227.91, 303.31, 9.7759],\r\n    [200, 175, 0.44486, 268.05, 357.02, 10.1071],\r\n    [200, 200, 0.51165, 307.88, 410.21, 10.3912],\r\n    [200, 225, 0.57786, 347.81, 463.38, 10.6417],\r\n    [200, 250, 0.6437, 388.19, 516.93, 10.8674],\r\n    [200, 275, 0.70931, 429.36, 571.22, 11.0743],\r\n    [200, 300, 0.77475, 471.65, 626.6, 11.267],\r\n    [200, 325, 0.84008, 515.37, 683.38, 11.4488],\r\n    [200, 350, 0.9053, 560.77, 741.83, 11.622],\r\n    [200, 375, 0.97046, 608.07, 802.16, 11.7885],\r\n    [200, 400, 1.03557, 657.41, 864.53, 11.9495],\r\n    [200, 425, 1.10062, 708.92, 929.05, 12.1059],\r\n    [400, 131.42, 0.15427, 191.01, 252.72, 9.0754],\r\n    [400, 150, 0.18233, 223.16, 296.09, 9.3843],\r\n    [400, 175, 0.21799, 264.61, 351.81, 9.728],\r\n    [400, 200, 0.25246, 305.19, 406.18, 10.0185],\r\n    [400, 225, 0.28631, 345.61, 460.13, 10.2726],\r\n    [400, 250, 0.31978, 386.32, 514.23, 10.5007],\r\n    [400, 275, 0.35301, 427.74, 568.94, 10.7092],\r\n    [400, 300, 0.38606, 470.23, 624.65, 10.9031],\r\n    [400, 325, 0.41899, 514.1, 681.69, 11.0857],\r\n    [400, 350, 0.45183, 559.63, 740.36, 11.2595],\r\n    [400, 375, 0.4846, 607.03, 800.87, 11.4265],\r\n    [400, 400, 0.51731, 656.47, 863.39, 11.5879],\r\n    [400, 425, 0.54997, 708.05, 928.04, 11.7446],\r\n    [400, 450, 0.5826, 761.85, 994.89, 11.8974],\r\n    [400, 475, 0.6152, 817.89, 1063.97, 12.0468],\r\n    [400, 500, 0.64778, 876.18, 1135.29, 12.1931],\r\n    [400, 525, 0.68033, 936.67, 1208.81, 12.3366],\r\n    [600, 138.72, 0.10496, 197.54, 260.51, 8.9458],\r\n    [600, 150, 0.11717, 218.08, 288.38, 9.139],\r\n    [600, 175, 0.14227, 261.03, 346.39, 9.497],\r\n    [600, 200, 0.16603, 302.44, 402.06, 9.7944],\r\n    [600, 225, 0.18911, 343.37, 456.84, 10.0525],\r\n    [600, 250, 0.2118, 384.44, 511.52, 10.283],\r\n    [600, 275, 0.23424, 426.11, 566.66, 10.4931],\r\n    [600, 300, 0.2565, 468.8, 622.69, 10.6882],\r\n    [600, 325, 0.27863, 512.82, 680, 10.8716],\r\n    [600, 350, 0.30067, 558.48, 738.88, 11.0461],\r\n    [600, 375, 0.32264, 605.99, 799.57, 11.2136],\r\n    [600, 400, 0.34456, 655.52, 862.25, 11.3754],\r\n    [600, 425, 0.36643, 707.18, 927.04, 11.5324],\r\n    [600, 450, 0.38826, 761.05, 994, 11.6855],\r\n    [600, 475, 0.41006, 817.15, 1063.18, 11.8351],\r\n    [600, 500, 0.43184, 875.48, 1134.59, 11.9816],\r\n    [600, 525, 0.4536, 936.03, 1208.18, 12.1252],\r\n    [800, 144.4, 0.07941, 201.7, 265.23, 8.8505],\r\n    [800, 150, 0.08434, 212.53, 280, 8.9509],\r\n    [800, 175, 0.10433, 257.3, 340.76, 9.326],\r\n    [800, 200, 0.12278, 299.62, 397.85, 9.631],\r\n    [800, 225, 0.1405, 341.1, 453.5, 9.8932],\r\n    [800, 250, 0.15781, 382.53, 508.78, 10.1262],\r\n    [800, 275, 0.17485, 424.47, 564.35, 10.3381],\r\n    [800, 300, 0.19172, 467.36, 620.73, 10.5343],\r\n    [800, 325, 0.20845, 511.55, 678.31, 10.7186],\r\n    [800, 350, 0.2251, 557.33, 737.41, 10.8938],\r\n    [800, 375, 0.24167, 604.95, 798.28, 11.0617],\r\n    [800, 400, 0.25818, 654.57, 861.12, 11.2239],\r\n    [800, 425, 0.27465, 706.31, 926.03, 11.3813],\r\n    [800, 450, 0.29109, 760.24, 993.11, 11.5346],\r\n    [800, 475, 0.30749, 816.4, 1062.4, 11.6845],\r\n    [800, 500, 0.32387, 874.79, 1133.89, 11.8311],\r\n    [800, 525, 0.34023, 935.38, 1207.56, 11.9749],\r\n    [800, 550, 0.35657, 998.14, 1283.45, 12.1161],\r\n    [1000, 149.13, 0.06367, 204.45, 268.12, 8.7735],\r\n    [1000, 150, 0.06434, 206.28, 270.62, 8.7902],\r\n    [1000, 175, 0.08149, 253.38, 334.87, 9.1871],\r\n    [1000, 200, 0.09681, 296.73, 393.53, 9.5006],\r\n    [1000, 225, 0.11132, 338.79, 450.11, 9.7672],\r\n    [1000, 250, 0.12541, 380.61, 506.01, 10.0028],\r\n    [1000, 275, 0.13922, 422.82, 562.04, 10.2164],\r\n    [1000, 300, 0.15285, 465.91, 618.76, 10.4138],\r\n    [1000, 325, 0.16635, 510.26, 676.61, 10.599],\r\n    [1000, 350, 0.17976, 556.18, 735.94, 10.7748],\r\n    [1000, 375, 0.19309, 603.91, 797, 10.9433],\r\n    [1000, 400, 0.20636, 653.62, 859.98, 11.1059],\r\n    [1000, 425, 0.21959, 705.44, 925.03, 11.2636],\r\n    [1000, 450, 0.23279, 759.44, 992.23, 11.4172],\r\n    [1000, 475, 0.24595, 815.66, 1061.61, 11.5672],\r\n    [1000, 500, 0.25909, 874.1, 1133.19, 11.7141],\r\n    [1000, 525, 0.27221, 934.73, 1206.95, 11.858],\r\n    [1000, 550, 0.28531, 997.53, 1282.84, 11.9992],\r\n    [1500, 158.52, 0.04196, 207.53, 270.47, 8.6215],\r\n    [1500, 175, 0.05078, 242.64, 318.81, 8.9121],\r\n    [1500, 200, 0.06209, 289.13, 382.26, 9.2514],\r\n    [1500, 225, 0.07239, 332.85, 441.44, 9.5303],\r\n    [1500, 250, 0.0822, 375.7, 499, 9.773],\r\n    [1500, 275, 0.09171, 418.65, 556.21, 9.9911],\r\n    [1500, 300, 0.10103, 462.27, 613.82, 10.1916],\r\n    [1500, 325, 0.11022, 507.04, 672.37, 10.379],\r\n    [1500, 350, 0.11931, 553.3, 732.26, 10.5565],\r\n    [1500, 375, 0.12832, 601.3, 793.78, 10.7263],\r\n    [1500, 400, 0.13728, 651.24, 857.16, 10.8899],\r\n    [1500, 425, 0.14619, 703.26, 922.54, 11.0484],\r\n    [1500, 450, 0.15506, 757.43, 990.02, 11.2027],\r\n    [1500, 475, 0.16391, 813.8, 1059.66, 11.3532],\r\n    [1500, 500, 0.17273, 872.37, 1131.46, 11.5005],\r\n    [1500, 525, 0.18152, 933.12, 1205.41, 11.6448],\r\n    [1500, 550, 0.19031, 996.02, 1281.48, 11.7864],\r\n    [2000, 165.86, 0.03062, 207.01, 268.25, 8.4975],\r\n    [2000, 175, 0.03504, 229.9, 299.97, 8.6839],\r\n    [2000, 200, 0.04463, 280.91, 370.17, 9.0596],\r\n    [2000, 225, 0.05289, 326.64, 432.43, 9.3532],\r\n    [2000, 250, 0.06059, 370.67, 491.84, 9.6036],\r\n    [2000, 275, 0.06796, 414.4, 550.31, 9.8266],\r\n    [2000, 300, 0.07513, 458.59, 608.85, 10.0303],\r\n    [2000, 325, 0.08216, 503.8, 668.12, 10.22],\r\n    [2000, 350, 0.08909, 550.4, 728.58, 10.3992],\r\n    [2000, 375, 0.09594, 598.69, 790.57, 10.5703],\r\n    [2000, 400, 0.10274, 648.87, 854.34, 10.7349],\r\n    [2000, 425, 0.10949, 701.08, 920.06, 10.8942],\r\n    [2000, 450, 0.1162, 755.43, 987.84, 11.0491],\r\n    [2000, 475, 0.12289, 811.94, 1057.72, 11.2003],\r\n    [2000, 500, 0.12955, 870.64, 1129.74, 11.348],\r\n    [2000, 525, 0.13619, 931.51, 1203.88, 11.4927],\r\n    [2000, 550, 0.14281, 994.51, 1280.13, 11.6346],\r\n    [4000, 186.1, 0.0116, 172.96, 219.34, 8.0035],\r\n    [4000, 200, 0.01763, 237.7, 308.23, 8.4675],\r\n    [4000, 225, 0.02347, 298.52, 392.39, 8.8653],\r\n    [4000, 250, 0.02814, 349.08, 461.63, 9.1574],\r\n    [4000, 275, 0.03235, 396.67, 526.07, 9.4031],\r\n    [4000, 300, 0.03631, 443.48, 588.73, 9.6212],\r\n    [4000, 325, 0.04011, 490.62, 651.07, 9.8208],\r\n    [4000, 350, 0.04381, 538.7, 713.93, 10.0071],\r\n    [4000, 375, 0.04742, 588.18, 777.86, 10.1835],\r\n    [4000, 400, 0.05097, 639.34, 843.24, 10.3523],\r\n    [4000, 425, 0.05448, 692.38, 910.31, 10.5149],\r\n    [4000, 450, 0.05795, 747.43, 979.23, 10.6725],\r\n    [4000, 475, 0.06139, 804.55, 1050.12, 10.8258],\r\n    [4000, 500, 0.06481, 863.78, 1123.01, 10.9753],\r\n    [4000, 525, 0.0682, 925.11, 1197.93, 11.1215],\r\n    [4000, 550, 0.07158, 988.53, 1274.86, 11.2646],\r\n    [4000, 575, 0.07495, 1053.98, 1353.77, 11.4049],\r\n    [8000, 200, 0.00412, 55.58, 88.54, 7.2069],\r\n    [8000, 225, 0.00846, 217.3, 284.98, 8.1344],\r\n    [8000, 250, 0.01198, 298.05, 393.92, 8.5954],\r\n    [8000, 275, 0.01469, 357.88, 475.39, 8.9064],\r\n    [8000, 300, 0.01705, 411.71, 548.15, 9.1598],\r\n    [8000, 325, 0.01924, 463.52, 617.4, 9.3815],\r\n    [8000, 350, 0.0213, 515.02, 685.39, 9.5831],\r\n    [8000, 375, 0.02328, 567.12, 753.34, 9.7706],\r\n    [8000, 400, 0.0252, 620.38, 821.95, 9.9477],\r\n    [8000, 425, 0.02707, 675.14, 891.71, 10.1169],\r\n    [8000, 450, 0.02891, 731.63, 962.92, 10.2796],\r\n    [8000, 475, 0.03072, 789.99, 1035.75, 10.4372],\r\n    [8000, 500, 0.03251, 850.28, 1110.34, 10.5902],\r\n    [8000, 525, 0.03428, 912.54, 1186.74, 10.7393],\r\n    [8000, 550, 0.03603, 976.77, 1264.99, 10.8849],\r\n    [8000, 575, 0.03776, 1042.96, 1345.07, 11.0272],\r\n  ],\r\n};\r\nexport default tables;\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","import defineProperty from './_define_property';\n\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n","import _arrayLikeToArray from './_array_like_to_array';\n\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))\n    return _arrayLikeToArray(o, minLen);\n}\n","import arrayWithHoles from './_array_with_holes';\nimport iterableToArrayLimit from './_iterable_to_array';\nimport nonIterableRest from './_non_iterable_rest';\nimport unsupportedIterableToArray from './_unsupported_iterable_to_array';\n\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n","import arrayWithoutHoles from './_array_without_holes';\nimport iterableToArray from './_iterable_to_array';\nimport nonIterableSpread from './_non_iterable_spread';\nimport unsupportedIterableToArray from './_unsupported_iterable_to_array';\n\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n","import _arrayLikeToArray from './_array_like_to_array';\n\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n","/**\r\n *\r\n * @param {number[][]} table a specific thermodynamic tables\r\n * @param {string} propertyName name of property that you need\r\n * @returns {number} index of that property on its specific table\r\n */\r\nexport default function (table, propertyName) {\r\n  const type = table[0].length === 14 ? \"sat.\" : table[0].length === 6 ? \"sup.vapor|comp.liquid\" : undefined;\r\n  if (type === \"sat.\") {\r\n    switch (propertyName) {\r\n      case \"temp.\":\r\n        return 0;\r\n      case \"press.\":\r\n        return 1;\r\n      case \"v_sat.liquid\": //specific volume\r\n        return 2;\r\n      case \"v_evap.\":\r\n        return 3;\r\n      case \"v_sat.vapor\":\r\n        return 4;\r\n      case \"u_sat.liquid\": //internal energy\r\n        return 5;\r\n      case \"u_evap.\":\r\n        return 6;\r\n      case \"u_sat.vapor\":\r\n        return 7;\r\n      case \"h_sat.liquid\": //specific enthalpy\r\n        return 8;\r\n      case \"h_evap.\":\r\n        return 9;\r\n      case \"h_sat.vapor\":\r\n        return 10;\r\n      case \"s_sat.liquid\": //specific entropy\r\n        return 11;\r\n      case \"s_evap.\":\r\n        return 12;\r\n      case \"s_sat.vapor\":\r\n        return 13;\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n  if (type === \"sup.vapor|comp.liquid\") {\r\n    switch (propertyName) {\r\n      case \"press.\":\r\n        return 0;\r\n      case \"temp.\":\r\n        return 1;\r\n      case \"v\":\r\n        return 2;\r\n      case \"u\":\r\n        return 3;\r\n      case \"h\":\r\n        return 4;\r\n      case \"s\":\r\n        return 5;\r\n      default:\r\n        return undefined;\r\n    }\r\n  } else {\r\n    console.error(\"cannot find property index\");\r\n  }\r\n}\r\n","import propertyIndex from \"../propertyIndex.js\";\r\nimport isInsideTable from \"./isInsideTable.js\";\r\nimport findSurrounding from \"./findSurrounding.js\";\r\n\r\n/**\r\n *\r\n * searches dynamically based on property name and value\r\n * @param {number[][]} table a specific thermodynamic tables\r\n * @param {(string|number)} propertyName index of property. if a string was passed searches for index based on property name\r\n * @param {number} propertyValue value to find\r\n * @returns {{statusCode:string,statusMessage:string,result:undefined|[number]|[[number]]}} object containing result(s) and conclusion messages\r\n */\r\nexport default function (table, propertyName, propertyValue) {\r\n  // finding the index of property value\r\n  const index = Number.isFinite(propertyName) ? propertyName : propertyIndex(table, propertyName);\r\n\r\n  // sees if property value is inside the table or not\r\n  const [isInTable, beforeOrAfter] = isInsideTable(table, index, propertyValue);\r\n  if (!isInTable) {\r\n    return {\r\n      statusCode: `10${beforeOrAfter === \"before\" ? \"1\" : \"2\"}`,\r\n      statusMessage: `value is out of table (${beforeOrAfter === \"before\" ? \"less then the first\" : \"more then the last\"} value of the table)`,\r\n      result: undefined,\r\n    };\r\n  }\r\n\r\n  // searches in table to find the exact array\r\n  const found = table.find((arr) => arr[index] === propertyValue);\r\n  if (found) {\r\n    return {\r\n      statusCode: \"200\",\r\n      statusMessage: `exact ${propertyName} has been found`,\r\n      result: found,\r\n    };\r\n  }\r\n  const surrounding = findSurrounding(table, index, propertyValue);\r\n  if (surrounding) {\r\n    return {\r\n      statusCode: \"300\",\r\n      statusMessage: `there was no exact ${propertyName} but surrounding values has been found`,\r\n      result: surrounding,\r\n    };\r\n  }\r\n\r\n  // returns an object with three properties: statusCode, statusMessage, results\r\n  // status code \"11\" means out of table (less then the first value of the table)\r\n  // status code \"12\" means out of table (more then the last value of the table)\r\n  // status code \"20\" means exact solution has been found\r\n  // status code \"30\" means there was no exact solution but the before and after value has been found\r\n}\r\n","/**\r\n *\r\n * @param {number[][]} table a specific thermodynamic tables\r\n * @param {number} index index of property to find\r\n * @param {number} propertyValue value of the property\r\n * @returns {[boolean,?string]} array with a boolean value and position (if it wasn't inside table)\r\n */\r\nexport default function (table, index, propertyValue) {\r\n  const firstInTable = table[0][index];\r\n  const lastInTable = table.slice(-1)[0][index];\r\n  const arr = [firstInTable, lastInTable, propertyValue];\r\n\r\n  if (firstInTable < lastInTable) {\r\n    arr.sort((a, b) => a - b);\r\n  } else if (firstInTable > lastInTable) {\r\n    arr.sort((a, b) => b - a);\r\n  }\r\n\r\n  if (arr[0] === propertyValue && arr[1] !== propertyValue) {\r\n    return [false, \"before\"];\r\n  } else if (arr[2] === propertyValue && arr[1] !== propertyValue) {\r\n    return [false, \"after\"];\r\n  } else if (arr[1] === propertyValue) {\r\n    return [true, undefined];\r\n  }\r\n}\r\n","/**\r\n *\r\n * @param {number[][]} table a specific thermodynamic tables\r\n * @param {number} index index of property to find\r\n * @param {number} propertyValue value of the property\r\n * @returns {number[][]} an array containing surrounding results\r\n */\r\nexport default function (table, index, propertyValue) {\r\n  // first find the size of a row in table\r\n  const rowSize = table[0].length;\r\n\r\n  // create a test row containing property value in correct place\r\n  const testRow = [];\r\n  for (let i = 0; i <= rowSize - 1; i++) {\r\n    testRow.push(i === index ? propertyValue : null);\r\n  }\r\n\r\n  // now create a temporary table and push test row in it\r\n  const firstInTable = table[0][index];\r\n  const lastInTable = table.slice(-1)[0][index];\r\n  const temporaryTable = table.slice();\r\n  temporaryTable.push(testRow);\r\n\r\n  // sort the temporary table based on original table\r\n  if (firstInTable < lastInTable) {\r\n    temporaryTable.sort((a, b) => a[index] - b[index]);\r\n  } else if (firstInTable > lastInTable) {\r\n    temporaryTable.sort((a, b) => b[index] - a[index]);\r\n  }\r\n\r\n  // find the index of test data in sorted array\r\n  const testIndex = temporaryTable.findIndex((arr) => arr[index] === propertyValue);\r\n\r\n  // return rows which are placed before and after it\r\n  return [temporaryTable[testIndex - 1], temporaryTable[testIndex + 1]];\r\n}\r\n","import UI from \"../view/index.js\";\r\n/**\r\n *\r\n * @param {number} x\r\n * @param {number} x1\r\n * @param {number} x2\r\n * @param {number} y1\r\n * @param {number} y2\r\n * @returns {number}\r\n */\r\nexport default function (x, x1, x2, y1, y2) {\r\n  UI.log(\"interpolating...\");\r\n  const y = y1 + ((x - x1) * (y2 - y1)) / (x2 - x1);\r\n  UI.log(`${y1} + ((${x} - ${x1}) * (${y2} - ${y1})) / (${x2} - ${x1})   =   ${y}`);\r\n  return y;\r\n}\r\n","/**\r\n *\r\n * @param {number} number\r\n * @returns {string} substance\r\n */\r\nexport default function (number) {\r\n  switch (number) {\r\n    case 1:\r\n      return \"Water\";\r\n    case 2:\r\n      return \"Ammonia\";\r\n    case 3:\r\n      return \"Carbon Dioxide\";\r\n    case 4:\r\n      return \"R-410a\";\r\n    case 5:\r\n      return \"R-134a\";\r\n    case 6:\r\n      return \"Nitrogen\";\r\n    case 7:\r\n      return \"Methane\";\r\n  }\r\n}\r\n","import onPressureTemperature from \"./onPressureTemperature.js\";\r\nimport onTemperature from \"./onTemperature.js\";\r\nimport onPressure from \"./onPressure.js\";\r\nimport UI from \"../../view/index.js\";\r\n/**\r\n *\r\n * @param {object} tables all thermodynamic tables\r\n * @param {Object.<string, ?number>} inputValues an object containing all property values\r\n * @returns {string} phase\r\n */\r\nexport default function (tables, inputValues) {\r\n  let phase;\r\n  if (inputValues.temperature && inputValues.pressure) {\r\n    // send data to pressure temperature function\r\n    phase = onPressureTemperature(tables, inputValues);\r\n  } else if (inputValues.quality !== null) {\r\n    // send... you already know the phase!\r\n    UI.log(\"quality value was detected\");\r\n    if (inputValues.quality === 0) {\r\n      phase = \"sat.liquid\";\r\n      UI.log(\"phase of the substance is sat.liquid => quality = 0\");\r\n    } else if (inputValues.quality === 1) {\r\n      phase = \"sat.vapor(fallback)\";\r\n      UI.log(\"phase of the substance is sat.vapor => quality = 1\");\r\n    } else {\r\n      phase = \"sat.vapor\";\r\n      UI.log(\"phase of the substance is sup.vapor => 0 < quality < 1 \");\r\n    }\r\n  } else if (inputValues.temperature) {\r\n    // send data to temperature only function\r\n    phase = onTemperature(tables, inputValues);\r\n  } else if (inputValues.pressure) {\r\n    // send data to pressure only function\r\n    phase = onPressure(tables, inputValues);\r\n  } else {\r\n    console.error(\"there is a problem in phase finder !\");\r\n  }\r\n  return phase;\r\n}\r\n","import smartSearch from \"../smartSearch/index.js\";\r\nimport interpolator from \"../interpolator.js\";\r\nimport findSubstanceName from \"../findSubstanceName.js\";\r\nimport UI from \"../../view/index.js\";\r\n/**\r\n *\r\n * finds phase based on pressure and temperature\r\n * @param {number[][]} tables all thermodynamic tables\r\n * @param {Object.<string, ?number>} inputValues an object containing all property values\r\n * @returns {string} returns text explaining phase of the substance\r\n */\r\nexport default function (tables, inputValues) {\r\n  const substance = inputValues.substance;\r\n  if (substance === 1) {\r\n    // if it's water\r\n    UI.log(\"searching Saturated Water Temperature Entry... (TABLE B.1.1)\");\r\n    const tempResult = smartSearch(tables.b11, \"temp.\", inputValues.temperature);\r\n    let phase;\r\n    if (tempResult.statusCode === \"101\") {\r\n      // if the value is less then the first value of the table\r\n      phase = \"sat.solid-sat.vapor\";\r\n\r\n      UI.log(tempResult.statusMessage);\r\n      UI.log(`phase of the substance is ${phase}`);\r\n\r\n      return phase;\r\n    } else if (tempResult.statusCode === \"102\") {\r\n      // if the value is more then the last value of the table\r\n      phase = \"sup.vapor\";\r\n\r\n      UI.log(tempResult.statusMessage);\r\n      UI.log(`phase of the substance is ${phase}`);\r\n\r\n      return phase;\r\n    } else if (tempResult.statusCode === \"200\") {\r\n      // if the exact value has been found in temperature tables\r\n      phase = inputValues.pressure > tempResult.result[1] ? \"comp.liquid\" : \"sup.vapor\";\r\n\r\n      UI.log(\"exact temperature has been found! we shall find the phase in temperature tables\");\r\n      UI.log(`phase of the substance is ${phase}`);\r\n\r\n      return phase;\r\n    } else if (tempResult.statusCode === \"300\") {\r\n      // if the exact value has not been found in temperature tables\r\n      UI.log(\"didn't found exact temperature! let's take a quick look in pressure tables\");\r\n    } else {\r\n      // if somehow wrong of status codes were reported\r\n      console.error(\"there are some serious problems in your app\");\r\n    }\r\n\r\n    // now after searching temperature table if still didn't return phase then search pressure table\r\n    UI.log(\"searching Saturated Water Pressure Entry... (TABLE B.1.2)\");\r\n    const pressResults = smartSearch(tables.b12, 0, inputValues.pressure);\r\n\r\n    if (pressResults.statusCode === \"200\") {\r\n      // if the exact value has been found in pressure tables\r\n      phase = inputValues.temperature > pressResults.result[1] ? \"sup.vapor\" : \"comp.liquid\";\r\n\r\n      UI.log(\"exact pressure has been found! we shall find the phase in pressure tables\");\r\n      UI.log(`phase of the substance is ${phase}`);\r\n\r\n      return phase;\r\n    } else if (pressResults.statusCode === \"300\") {\r\n      // if the exact value has not been found in temperature or pressure tables\r\n      UI.log(\"nope! not here, go back to temperature results\");\r\n    } else {\r\n      // if somehow wrong of status codes were reported\r\n      console.error(\"WOW! HOW DID WE GOT HERE???\");\r\n    }\r\n\r\n    //interpolate the values from temperature tables\r\n    UI.log(\"start interpolating values from temperature tables\");\r\n    const x = [inputValues.temperature, tempResult.result[0][0], tempResult.result[1][0], tempResult.result[0][1], tempResult.result[1][1]];\r\n    const interpValue = interpolator(...x);\r\n    phase = inputValues.pressure > interpValue ? \"comp.liquid\" : \"sup.vapor\";\r\n\r\n    UI.log(`phase of the substance is ${phase}`);\r\n\r\n    return phase;\r\n  } else {\r\n    // if it's not water\r\n    const substanceName = findSubstanceName(substance);\r\n    UI.log(`searching Saturated ${substanceName} Table... (TABLE B.${substance}.1)`);\r\n    const tempResult = smartSearch(tables[`b${substance}1`], \"temp.\", inputValues.temperature);\r\n    let phase;\r\n    if (tempResult.statusCode === \"101\") {\r\n      // if the value is less then the first value of the table\r\n      phase = \"sat.solid-sat.vapor\";\r\n\r\n      UI.log(tempResult.statusMessage);\r\n      UI.log(`phase of the substance is ${phase}`);\r\n\r\n      return phase;\r\n    } else if (tempResult.statusCode === \"102\") {\r\n      // if the value is more then the last value of the table\r\n      phase = \"sup.vapor\";\r\n\r\n      UI.log(tempResult.statusMessage);\r\n      UI.log(`phase of the substance is ${phase}`);\r\n\r\n      return phase;\r\n    } else if (tempResult.statusCode === \"200\") {\r\n      // if the exact value has been found in temperature tables\r\n      phase = inputValues.pressure > tempResult.result[1] ? \"comp.liquid\" : \"sup.vapor\";\r\n\r\n      UI.log(\"exact temperature has been found! we shall find the phase in temperature tables\");\r\n      UI.log(`phase of the substance is ${phase}`);\r\n\r\n      return phase;\r\n    } else if (tempResult.statusCode === \"300\") {\r\n      // if the exact value has not been found in temperature tables\r\n\r\n      UI.log(\"didn't found exact temperature! start interpolating values from temperature tables\");\r\n      const x = [inputValues.temperature, tempResult.result[0][0], tempResult.result[1][0], tempResult.result[0][1], tempResult.result[1][1]];\r\n      const interpValue = interpolator(...x);\r\n      phase = inputValues.pressure > interpValue ? \"comp.liquid\" : \"sup.vapor\";\r\n\r\n      UI.log(`phase of the substance is ${phase}`);\r\n\r\n      return phase;\r\n    } else {\r\n      // if somehow wrong of status codes were reported\r\n      console.error(\"you tried very hard to find a bug in this app, congratulations!\");\r\n    }\r\n  }\r\n}\r\n","import smartSearch from \"../smartSearch/index.js\";\r\nimport interpolator from \"../interpolator.js\";\r\nimport findSubstanceName from \"../findSubstanceName.js\";\r\nimport propertyIndex from \"../propertyIndex.js\";\r\nimport UI from \"../../view/index.js\";\r\n/**\r\n *\r\n * finds phase based on temperature and another property (except pressure)\r\n * @param {object} tables all thermodynamic tables\r\n * @param {Object.<string, ?number>} inputValues an object containing all property values\r\n * @returns {string} returns text explaining phase of the substance\r\n */\r\nexport default function (tables, inputValues) {\r\n  const substance = inputValues.substance;\r\n  const substanceName = findSubstanceName(substance);\r\n\r\n  // store specific table\r\n  const table = tables[`b${substance}1`];\r\n\r\n  // setting indexes to compare based on input values\r\n  let satLiquidIndex;\r\n  let satVaporIndex;\r\n  let valueToCompare;\r\n  if (inputValues.specificVolume) {\r\n    satLiquidIndex = propertyIndex(table, \"v_sat.liquid\");\r\n    satVaporIndex = propertyIndex(table, \"v_sat.vapor\");\r\n    valueToCompare = inputValues.specificVolume;\r\n    UI.log(\"specific volume was detected\");\r\n  } else if (inputValues.internalEnergy) {\r\n    satLiquidIndex = propertyIndex(table, \"u_sat.liquid\");\r\n    satVaporIndex = propertyIndex(table, \"u_sat.vapor\");\r\n    valueToCompare = inputValues.internalEnergy;\r\n    UI.log(\"internal energy was detected\");\r\n  } else if (inputValues.specificEnthalpy) {\r\n    satLiquidIndex = propertyIndex(table, \"h_sat.liquid\");\r\n    satVaporIndex = propertyIndex(table, \"h_sat.vapor\");\r\n    valueToCompare = inputValues.specificEnthalpy;\r\n    UI.log(\"specific enthalpy was detected\");\r\n  } else if (inputValues.specificEntropy) {\r\n    satLiquidIndex = propertyIndex(table, \"s_sat.liquid\");\r\n    satVaporIndex = propertyIndex(table, \"s_sat.vapor\");\r\n    valueToCompare = inputValues.specificEntropy;\r\n    UI.log(\"specific entropy was detected\");\r\n  }\r\n\r\n  // now start the search in saturated tables\r\n  UI.log(`searching Saturated ${substanceName} Table... (TABLE B.${substance}.1)`);\r\n  const tempResult = smartSearch(table, \"temp.\", inputValues.temperature);\r\n\r\n  // finding phase based on temperature result\r\n  let phase;\r\n  if (tempResult.statusCode === \"101\") {\r\n    // if the value is less then the first value of the table\r\n    phase = \"sat.solid-sat.vapor\";\r\n\r\n    UI.log(tempResult.statusMessage);\r\n    UI.log(`phase of the substance is ${phase}`);\r\n\r\n    return phase;\r\n  } else if (tempResult.statusCode === \"102\") {\r\n    // if the value is more then the last value of the table\r\n    phase = \"sup.vapor\";\r\n\r\n    UI.log(tempResult.statusMessage);\r\n    UI.log(`phase of the substance is ${phase}`);\r\n\r\n    return phase;\r\n  } else if (tempResult.statusCode === \"200\") {\r\n    // if the exact value has been found in temperature tables\r\n    UI.log(\"exact temperature has been found! we shall find the phase in temperature tables\");\r\n\r\n    // start comparison\r\n    const satLiquid = tempResult.result[satLiquidIndex];\r\n    const satVapor = tempResult.result[satVaporIndex];\r\n    if (valueToCompare < satLiquid) {\r\n      UI.log(`valueToCompare < satLiquid => ${valueToCompare} < ${satLiquid}`);\r\n      phase = \"comp.liquid\";\r\n    } else if (valueToCompare > satVapor) {\r\n      UI.log(`valueToCompare > satVapor => ${valueToCompare} > ${satVapor}`);\r\n      phase = \"sup.vapor\";\r\n    } else if (valueToCompare > satLiquid && valueToCompare < satVapor) {\r\n      UI.log(`satLiquid < valueToCompare < satVapor => ${satLiquid} < ${valueToCompare} < ${satVapor}`);\r\n      phase = \"sat.vapor\";\r\n    }\r\n    UI.log(`phase of the substance is ${phase}`);\r\n\r\n    return phase;\r\n  } else if (tempResult.statusCode === \"300\") {\r\n    // if the exact value has not been found in temperature tables\r\n    UI.log(tempResult.statusMessage);\r\n\r\n    // interpolate values for saturation liquid and saturation vapor\r\n    const temperatureIndex = propertyIndex(table, \"temp.\");\r\n    const x = [\r\n      inputValues.temperature,\r\n      tempResult.result[0][temperatureIndex],\r\n      tempResult.result[1][temperatureIndex],\r\n      tempResult.result[0][satLiquidIndex],\r\n      tempResult.result[1][satLiquidIndex],\r\n    ];\r\n    const satLiquid = interpolator(...x);\r\n    const y = [\r\n      inputValues.temperature,\r\n      tempResult.result[0][temperatureIndex],\r\n      tempResult.result[1][temperatureIndex],\r\n      tempResult.result[0][satVaporIndex],\r\n      tempResult.result[1][satVaporIndex],\r\n    ];\r\n    const satVapor = interpolator(...y);\r\n\r\n    // start comparison\r\n    if (valueToCompare < satLiquid) {\r\n      UI.log(`valueToCompare < satLiquid => ${valueToCompare} < ${satLiquid}`);\r\n      phase = \"comp.liquid\";\r\n    } else if (valueToCompare > satVapor) {\r\n      UI.log(`valueToCompare > satVapor => ${valueToCompare} > ${satVapor}`);\r\n      phase = \"sup.vapor\";\r\n    } else if (valueToCompare > satLiquid && valueToCompare < satVapor) {\r\n      UI.log(`satLiquid < valueToCompare < satVapor => ${satLiquid} < ${valueToCompare} < ${satVapor}`);\r\n      phase = \"sat.vapor\";\r\n    }\r\n    UI.log(`phase of the substance is ${phase}`);\r\n\r\n    return phase;\r\n  } else {\r\n    // if somehow wrong of status codes were reported\r\n    console.error(\"you tried very hard to find a bug in this app, congratulations!\");\r\n  }\r\n}\r\n","import smartSearch from \"../smartSearch/index.js\";\r\nimport interpolator from \"../interpolator.js\";\r\nimport findSubstanceName from \"../findSubstanceName.js\";\r\nimport propertyIndex from \"../propertyIndex.js\";\r\nimport UI from \"../../view/index.js\";\r\n/**\r\n *\r\n * finds phase based on pressure and another property (except temperature)\r\n * @param {object} tables all thermodynamic tables\r\n * @param {Object.<string, ?number>} inputValues an object containing all property values\r\n * @returns {string} returns text explaining phase of the substance\r\n */\r\nexport default function (tables, inputValues) {\r\n  const substance = inputValues.substance;\r\n  const substanceName = findSubstanceName(substance);\r\n\r\n  // store specific table\r\n  const table = substance === 1 ? tables.b12 : tables[`b${substance}1`];\r\n\r\n  // setting indexes to compare based on input values\r\n  let satLiquidIndex;\r\n  let satVaporIndex;\r\n  let valueToCompare;\r\n  if (inputValues.specificVolume) {\r\n    satLiquidIndex = propertyIndex(table, \"v_sat.liquid\");\r\n    satVaporIndex = propertyIndex(table, \"v_sat.vapor\");\r\n    valueToCompare = inputValues.specificVolume;\r\n    UI.log(\"specific volume was detected\");\r\n  } else if (inputValues.internalEnergy) {\r\n    satLiquidIndex = propertyIndex(table, \"u_sat.liquid\");\r\n    satVaporIndex = propertyIndex(table, \"u_sat.vapor\");\r\n    valueToCompare = inputValues.internalEnergy;\r\n    UI.log(\"internal energy was detected\");\r\n  } else if (inputValues.specificEnthalpy) {\r\n    satLiquidIndex = propertyIndex(table, \"h_sat.liquid\");\r\n    satVaporIndex = propertyIndex(table, \"h_sat.vapor\");\r\n    valueToCompare = inputValues.specificEnthalpy;\r\n    UI.log(\"specific enthalpy was detected\");\r\n  } else if (inputValues.specificEntropy) {\r\n    satLiquidIndex = propertyIndex(table, \"s_sat.liquid\");\r\n    satVaporIndex = propertyIndex(table, \"s_sat.vapor\");\r\n    valueToCompare = inputValues.specificEntropy;\r\n    UI.log(\"specific entropy was detected\");\r\n  }\r\n\r\n  // now start the search in saturated tables\r\n  if (substance === 1) {\r\n    UI.log(`searching Saturated Water Pressure Entry Table... (TABLE B.1.2)`);\r\n  } else {\r\n    UI.log(`searching Saturated ${substanceName} Table... (TABLE B.${substance}.1)`);\r\n  }\r\n  const pressResult = substance === 1 ? smartSearch(table, 0, inputValues.pressure) : smartSearch(table, \"press.\", inputValues.pressure);\r\n\r\n  // finding phase based on pressure result\r\n  let phase;\r\n  if (pressResult.statusCode === \"101\") {\r\n    // if the value is less then the first value of the table\r\n    phase = \"sat.solid-sat.vapor\";\r\n\r\n    UI.log(pressResult.statusMessage);\r\n    UI.log(`phase of the substance is ${phase}`);\r\n\r\n    return phase;\r\n  } else if (pressResult.statusCode === \"102\") {\r\n    // if the value is more then the last value of the table\r\n    phase = \"sup.vapor\";\r\n\r\n    UI.log(pressResult.statusMessage);\r\n    UI.log(`phase of the substance is ${phase}`);\r\n\r\n    return phase;\r\n  } else if (pressResult.statusCode === \"200\") {\r\n    // if the exact value has been found in pressure tables\r\n    if (inputValues.substance === 1) {\r\n      UI.log(\"exact pressure has been found! we shall find the phase in pressure tables\");\r\n    } else {\r\n      UI.log(\"exact pressure has been found! we shall find the phase in temperature tables\");\r\n    }\r\n\r\n    // start comparison\r\n    const satLiquid = pressResult.result[satLiquidIndex];\r\n    const satVapor = pressResult.result[satVaporIndex];\r\n\r\n    if (valueToCompare < satLiquid) {\r\n      UI.log(`valueToCompare < satLiquid => ${valueToCompare} < ${satLiquid}`);\r\n      phase = \"comp.liquid\";\r\n    } else if (valueToCompare > satVapor) {\r\n      UI.log(`valueToCompare > satVapor => ${valueToCompare} > ${satVapor}`);\r\n      phase = \"sup.vapor\";\r\n    } else if (valueToCompare > satLiquid && valueToCompare < satVapor) {\r\n      UI.log(`satLiquid < valueToCompare < satVapor => ${satLiquid} < ${valueToCompare} < ${satVapor}`);\r\n      phase = \"sat.vapor\";\r\n    }\r\n    UI.log(`phase of the substance is ${phase}`);\r\n\r\n    return phase;\r\n  } else if (pressResult.statusCode === \"300\") {\r\n    // if the exact value has not been found in temperature (or pressure in water)tables\r\n    UI.log(pressResult.statusMessage);\r\n\r\n    const pressureIndex = substance === 1 ? 0 : 1;\r\n    // interpolate values for saturation liquid and saturation vapor\r\n\r\n    const x = [\r\n      inputValues.pressure,\r\n      pressResult.result[0][pressureIndex],\r\n      pressResult.result[1][pressureIndex],\r\n      pressResult.result[0][satLiquidIndex],\r\n      pressResult.result[1][satLiquidIndex],\r\n    ];\r\n    const y = [\r\n      inputValues.pressure,\r\n      pressResult.result[0][pressureIndex],\r\n      pressResult.result[1][pressureIndex],\r\n      pressResult.result[0][satVaporIndex],\r\n      pressResult.result[1][satVaporIndex],\r\n    ];\r\n    UI.log(`[${x.join(\", \")}]`);\r\n    UI.log(`[${y.join(\", \")}]`);\r\n    const satLiquid = interpolator(...x);\r\n    const satVapor = interpolator(...y);\r\n\r\n    // start comparison\r\n    if (valueToCompare < satLiquid) {\r\n      UI.log(`valueToCompare < satLiquid => ${valueToCompare} < ${satLiquid}`);\r\n      phase = \"comp.liquid\";\r\n    } else if (valueToCompare > satVapor) {\r\n      UI.log(`valueToCompare > satVapor => ${valueToCompare} > ${satVapor}`);\r\n      phase = \"sup.vapor\";\r\n    } else if (valueToCompare > satLiquid && valueToCompare < satVapor) {\r\n      UI.log(`satLiquid < valueToCompare < satVapor => ${satLiquid} < ${valueToCompare} < ${satVapor}`);\r\n      phase = \"sat.vapor\";\r\n    }\r\n    UI.log(`phase of the substance is ${phase}`);\r\n\r\n    return phase;\r\n  } else {\r\n    // if somehow wrong of status codes were reported\r\n    console.error(\"you tried very hard to find a bug in this app, congratulations!\");\r\n  }\r\n}\r\n","import isInsideTable from \"./isInsideTable.js\";\r\nimport findSurrounding from \"./findSurrounding.js\";\r\nimport smartSearch from \"../../smartSearch/index.js\";\r\n/**\r\n *\r\n * @param {number[][]} table\r\n * @param {number} pressure\r\n * @param {string} secondPropName\r\n * @param {number} secondPropValue\r\n * @returns results\r\n */\r\nexport default function (table, pressure, secondPropName, secondPropValue) {\r\n  const pressureIndex = 0;\r\n\r\n  // sees if pressure value is inside the table or not\r\n  const [isInTable, beforeOrAfter] = isInsideTable(table, pressureIndex, pressure);\r\n  if (!isInTable) {\r\n    return {\r\n      statusCode: `10${beforeOrAfter === \"before\" ? \"1\" : \"2\"}`,\r\n      statusMessage: `pressure value is out of table (${beforeOrAfter === \"before\" ? \"less then the first\" : \"more then the last\"} value of the table)`,\r\n      result: undefined,\r\n    };\r\n  }\r\n\r\n  // searches in table to find the exact pressure arrays\r\n  const found = table.filter((arr) => arr[pressureIndex] === pressure);\r\n  if (found.length !== 0) {\r\n    const secondSearch = smartSearch(found, secondPropName, secondPropValue);\r\n    return {\r\n      statusCode: \"200\" + secondSearch.statusCode,\r\n      statusMessage: \"exact pressure value has been found\" + `, searching for [${secondPropName}]... ` + secondSearch.statusMessage,\r\n      result: secondSearch.result,\r\n    };\r\n  }\r\n  const surrounding = findSurrounding(table, pressureIndex, pressure);\r\n  if (surrounding) {\r\n    const x = smartSearch(surrounding[0], secondPropName, secondPropValue);\r\n    const y = smartSearch(surrounding[1], secondPropName, secondPropValue);\r\n\r\n    if (x.statusCode === \"101\" || y.statusCode === \"101\") {\r\n      return {\r\n        statusCode: \"300101\",\r\n        statusMessage:\r\n          \"there was no exact pressure value but surrounding values has been found\" +\r\n          `, searching for [${secondPropName}]...` +\r\n          \"value is out of table (less then the first value of the table)\",\r\n        result: undefined,\r\n      };\r\n    }\r\n    if (x.statusCode === \"102\" || y.statusCode === \"102\") {\r\n      return {\r\n        statusCode: \"300102\",\r\n        statusMessage:\r\n          \"there was no exact pressure value but surrounding values has been found\" +\r\n          `, searching for [${secondPropName}]...` +\r\n          \"value is out of table (more then the last value of the table)\",\r\n        result: undefined,\r\n      };\r\n    }\r\n    if (x.statusCode === \"200\" && y.statusCode === \"200\") {\r\n      return {\r\n        statusCode: \"300200\",\r\n        statusMessage: \"there was no exact pressure value but surrounding values has been found\" + `, searching for [${secondPropName}]... ` + x.statusMessage,\r\n        result: [x.result, y.result],\r\n      };\r\n    }\r\n    if (x.statusCode === \"300\" && y.statusCode === \"300\") {\r\n      return {\r\n        statusCode: \"300300\",\r\n        statusMessage: \"there was no exact pressure value but surrounding values has been found\" + `, searching for [${secondPropName}]... ` + x.statusMessage,\r\n        result: [...x.result, ...y.result],\r\n      };\r\n    }\r\n    return {\r\n      // the most edge case possible!\r\n      statusCode: \"300\" + x.statusCode + y.statusCode,\r\n      statusMessage:\r\n        \"there was no exact pressure value but surrounding values has been found\" +\r\n        `, searching for [${secondPropName}]...` +\r\n        \" hmmm for the first one \\n\" +\r\n        x.statusMessage +\r\n        \" and for the second, \" +\r\n        y.statusMessage +\r\n        \" this is interesting!\",\r\n      result: [...(x.result.length === 6 ? [x.result] : x.result), ...(y.result.length === 6 ? [y.result] : y.result)],\r\n    };\r\n  }\r\n}\r\n","/**\r\n *\r\n * @param {number[][]} table a specific thermodynamic tables\r\n * @param {number} index index of property to find\r\n * @param {number} propertyValue value of the property\r\n * @returns {[boolean,?string]} array with a boolean value and position (if it wasn't inside table)\r\n */\r\nexport default function (table, index, propertyValue) {\r\n  const firstInTable = table[0][index];\r\n  const lastInTable = table.slice(-1)[0][index];\r\n  const arr = [firstInTable, lastInTable, propertyValue];\r\n\r\n  if (firstInTable < lastInTable) {\r\n    arr.sort((a, b) => a - b);\r\n  } else if (firstInTable > lastInTable) {\r\n    arr.sort((a, b) => b - a);\r\n  }\r\n\r\n  if (arr[0] === propertyValue && arr[1] !== propertyValue) {\r\n    return [false, \"before\"];\r\n  } else if (arr[2] === propertyValue && arr[1] !== propertyValue) {\r\n    return [false, \"after\"];\r\n  } else if (arr[1] === propertyValue) {\r\n    return [true, undefined];\r\n  }\r\n}\r\n","/**\r\n *\r\n * @param {number[][]} table a specific thermodynamic tables\r\n * @param {number} index index of property to find\r\n * @param {number} propertyValue value of the property\r\n * @returns {number[][]} an array containing surrounding results\r\n */\r\nexport default function (table, index, propertyValue) {\r\n  // first find the size of a row in table\r\n  const rowSize = table[0].length;\r\n\r\n  // create a test row containing property value in correct place\r\n  const testRow = [];\r\n  for (let i = 0; i <= rowSize - 1; i++) {\r\n    testRow.push(i === index ? propertyValue : null);\r\n  }\r\n\r\n  // now create a temporary table and push test row in it\r\n  const firstInTable = table[0][index];\r\n  const lastInTable = table.slice(-1)[0][index];\r\n  const temporaryTable = table.slice();\r\n  temporaryTable.push(testRow);\r\n\r\n  // sort the temporary table based on original table\r\n  if (firstInTable < lastInTable) {\r\n    temporaryTable.sort((a, b) => a[index] - b[index]);\r\n  } else if (firstInTable > lastInTable) {\r\n    temporaryTable.sort((a, b) => b[index] - a[index]);\r\n  }\r\n\r\n  // find the index of test data in sorted array\r\n  const testIndex = temporaryTable.findIndex((arr) => arr[index] === propertyValue);\r\n\r\n  // find surrounding pressure values\r\n  const pressureBefore = temporaryTable[testIndex - 1][index];\r\n  const pressureAfter = temporaryTable[testIndex + 1][index];\r\n\r\n  const result = [table.filter((arr) => arr[index] === pressureBefore), table.filter((arr) => arr[index] === pressureAfter)];\r\n\r\n  return result;\r\n}\r\n","import onPressure from \"./onPressure/index.js\";\r\nimport notOnPressure from \"./notOnPressure/index.js\";\r\n/**\r\n * searches superheated or saturated tables based on two individual values\r\n * @param {number[][]} table a specific thermodynamic table (superheated or saturated)\r\n * @param {string} firstPropName name of the first property to search\r\n * @param {number} firstPropValue value of the first property\r\n * @param {string} secondPropName name of the second property to search\r\n * @param {number} secondPropValue value of the second property to search\r\n * @returns results of the search\r\n */\r\nexport default function (table, firstPropName, firstPropValue, secondPropName, secondPropValue) {\r\n  if (firstPropName === \"press.\") {\r\n    return onPressure(table, firstPropValue, secondPropName, secondPropValue);\r\n  } else if (secondPropName === \"press.\") {\r\n    return onPressure(table, secondPropValue, firstPropName, firstPropValue);\r\n  } else {\r\n    return notOnPressure(table, firstPropName, firstPropValue, secondPropName, secondPropValue);\r\n  }\r\n  // returns an object with three properties: statusCode, statusMessage, results\r\n  // status code \"101\" means out of table (less then the first value of the table)\r\n  // status code \"102\" means out of table (more then the last value of the table)\r\n  // status code \"200\" means exact solution has been found\r\n  // status code \"300\" means there was no exact solution but the surrounding values has been found\r\n}\r\n","import smartSearch from \"../../smartSearch/index.js\";\r\n\r\n/**\r\n *\r\n * @param {number} table\r\n * @param {string} firstPropName\r\n * @param {number} firstPropValue\r\n * @param {string} secondPropName\r\n * @param {number} secondPropValue\r\n * @returns result\r\n */\r\nexport default function (table, firstPropName, firstPropValue, secondPropName, secondPropValue) {\r\n  // convert table into buckets of pressure tables!\r\n  const uniquePressures = [...new Set(table.map((arr) => arr[0]))];\r\n  const pressureBuckets = uniquePressures.map((pressureNumber) => table.filter((arr) => pressureNumber === arr[0]));\r\n\r\n  // start the first search\r\n  const firstExact = {\r\n    statusCode: \"200\",\r\n    statusMessage: `exact ${firstPropName} has been found, searching for ${secondPropName}... `,\r\n    result: [],\r\n  };\r\n  const firstSurrounding = {\r\n    statusCode: \"300\",\r\n    statusMessage: `there was no exact ${firstPropName} but surrounding values has been found, searching for ${secondPropName}... `,\r\n    result: [[], []],\r\n  };\r\n\r\n  pressureBuckets.forEach((bucket) => {\r\n    const x = smartSearch(bucket, firstPropName, firstPropValue);\r\n    if (x.statusCode === \"200\") {\r\n      firstExact.result.push(x.result);\r\n    }\r\n    if (x.statusCode === \"300\") {\r\n      firstSurrounding.result[0].push(x.result[0]);\r\n      firstSurrounding.result[1].push(x.result[1]);\r\n    }\r\n  });\r\n\r\n  // start the second search\r\n  if (firstSurrounding.result[0].length !== 0) {\r\n    const lesser = smartSearch(firstSurrounding.result[0], secondPropName, secondPropValue);\r\n    const greater = smartSearch(firstSurrounding.result[1], secondPropName, secondPropValue);\r\n    const conclusion = {\r\n      statusCode: firstSurrounding.statusCode + lesser.statusCode,\r\n      statusMessage: firstSurrounding.statusMessage + lesser.statusMessage,\r\n      result: [...lesser.result, ...greater.result],\r\n    };\r\n    if (conclusion.result.length !== 4) throw new Error(\"something went wrong! try searching manually\");\r\n    return conclusion;\r\n  }\r\n  if (firstExact.result.length !== 0) {\r\n    const secondSearch = smartSearch(firstExact.result, secondPropName, secondPropValue);\r\n    return {\r\n      statusCode: firstExact.statusCode + secondSearch.statusCode,\r\n      statusMessage: firstExact.statusMessage + secondSearch.statusMessage,\r\n      result: secondSearch.result,\r\n    };\r\n  }\r\n}\r\n","/**\r\n *\r\n * @param {number} x\r\n * @param {number} x1\r\n * @param {number} x2\r\n * @param {number} y1\r\n * @param {number} y2\r\n * @returns {number}\r\n */\r\nexport default function (x, x1, x2, y1, y2) {\r\n  const y = y1 + ((x - x1) * (y2 - y1)) / (x2 - x1);\r\n  return y;\r\n}\r\n","import propertyIndex from \"../propertyIndex.js\";\r\nimport silentInterpolator from \"./silentInterpolator.js\";\r\nimport UI from \"../../view/index.js\";\r\n/**\r\n *\r\n * @param {number[][]} table a specific thermodynamic table\r\n * @param {number[][]} result contains exactly 4 arrays with property values\r\n * @param {[number|string]} propsToStart  filtered version of input values\r\n * @returns {number[]} interpolated results\r\n */\r\nexport default function (table, result, propsToStart) {\r\n  const firstValueIndex = propertyIndex(table, propsToStart[0]);\r\n  const firstValue = propsToStart[1];\r\n  const secondValueIndex = propertyIndex(table, propsToStart[2]);\r\n  const secondValue = propsToStart[3];\r\n  const firstConclusion = [null, null, null, null, null, null];\r\n  const secondConclusion = [null, null, null, null, null, null];\r\n  const finalConclusion = [null, null, null, null, null, null];\r\n\r\n  if (result[0][firstValueIndex] !== result[1][firstValueIndex]) {\r\n    firstConclusion.forEach((_element, i, arr) => {\r\n      if (i === firstValueIndex) {\r\n        arr[i] = firstValue;\r\n      } else {\r\n        arr[i] = silentInterpolator(firstValue, result[0][firstValueIndex], result[1][firstValueIndex], result[0][i], result[1][i]);\r\n      }\r\n    });\r\n    secondConclusion.forEach((_element, i, arr) => {\r\n      if (i === firstValueIndex) {\r\n        arr[i] = firstValue;\r\n      } else {\r\n        arr[i] = silentInterpolator(firstValue, result[2][firstValueIndex], result[3][firstValueIndex], result[2][i], result[3][i]);\r\n      }\r\n    });\r\n  } else {\r\n    firstConclusion.forEach((_element, i, arr) => {\r\n      if (i === secondValueIndex) {\r\n        arr[i] = secondValue;\r\n      } else {\r\n        arr[i] = silentInterpolator(secondValue, result[0][secondValueIndex], result[1][secondValueIndex], result[0][i], result[1][i]);\r\n      }\r\n    });\r\n    secondConclusion.forEach((_element, i, arr) => {\r\n      if (i === secondValueIndex) {\r\n        arr[i] = secondValue;\r\n      } else {\r\n        arr[i] = silentInterpolator(secondValue, result[2][secondValueIndex], result[3][secondValueIndex], result[2][i], result[3][i]);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (firstConclusion[firstValueIndex] !== secondConclusion[firstValueIndex]) {\r\n    finalConclusion.forEach((_element, i, arr) => {\r\n      if (i === firstValueIndex) {\r\n        arr[i] = firstValue;\r\n      } else {\r\n        arr[i] = silentInterpolator(firstValue, firstConclusion[firstValueIndex], secondConclusion[firstValueIndex], firstConclusion[i], secondConclusion[i]);\r\n      }\r\n    });\r\n  } else {\r\n    finalConclusion.forEach((_element, i, arr) => {\r\n      if (i === secondValueIndex) {\r\n        arr[i] = secondValue;\r\n      } else {\r\n        arr[i] = silentInterpolator(\r\n          secondValue,\r\n          firstConclusion[secondValueIndex],\r\n          secondConclusion[secondValueIndex],\r\n          firstConclusion[i],\r\n          secondConclusion[i]\r\n        );\r\n      }\r\n    });\r\n  }\r\n  UI.log(\"\");\r\n  UI.log(\"oh no heaviest calculation for this app !!!\");\r\n  UI.log(\"- DOUBLE INTERPOLATION -\");\r\n  UI.log(\"\");\r\n  UI.log(\"first this was result of search =>\");\r\n  result.forEach((array) => UI.log(`[${array.join(\", \")}]`));\r\n  UI.log(\"\");\r\n  UI.log(\"... then result of first interpolation =>\");\r\n\r\n  UI.log(`[${firstConclusion.join(\", \")}]`);\r\n  UI.log(`[${secondConclusion.join(\", \")}]`);\r\n\r\n  UI.log(\"\");\r\n  UI.log(\"and now the final result, tada!!!\");\r\n  UI.log(`[${finalConclusion.join(\", \")}]`);\r\n\r\n  return finalConclusion;\r\n}\r\n","/**\r\n *\r\n * @param {Object.<string, ?number>} inputValues an object containing all property inputs\r\n * @returns {[number|string]} an array with all available values and their name\r\n */\r\nexport default function (inputValues) {\r\n  const output = [];\r\n  if (inputValues.temperature) {\r\n    output.push(\"temp.\");\r\n    output.push(inputValues.temperature);\r\n  }\r\n  if (inputValues.pressure) {\r\n    output.push(\"press.\");\r\n    output.push(inputValues.pressure);\r\n  }\r\n  if (inputValues.specificVolume) {\r\n    output.push(\"v\");\r\n    output.push(inputValues.specificVolume);\r\n  }\r\n  if (inputValues.internalEnergy) {\r\n    output.push(\"u\");\r\n    output.push(inputValues.internalEnergy);\r\n  }\r\n  if (inputValues.specificEnthalpy) {\r\n    output.push(\"h\");\r\n    output.push(inputValues.specificEnthalpy);\r\n  }\r\n  if (inputValues.specificEntropy) {\r\n    output.push(\"s\");\r\n    output.push(inputValues.specificEntropy);\r\n  }\r\n  return output;\r\n}\r\n","import propertyIndex from \"../../propertyIndex.js\";\r\nimport smartSearch from \"../../smartSearch/index.js\";\r\nimport interpolator from \"../../interpolator.js\";\r\nimport UI from \"../../../view/index.js\";\r\n/**\r\n *\r\n * @param {object} tables all thermodynamic tables\r\n * @param {Object.<string, ?number>} inputValues an object containing all property values\r\n * @param {string} phase the requested phase in string (either `sat.liquid` or `sat.vapor`)\r\n * @returns {Object.<string, ?number>}  an object containing all calculated values\r\n */\r\nexport default function (tables, inputValues, phase) {\r\n  const outputValues = { ...inputValues };\r\n  if (phase === \"sat.liquid\") {\r\n    if (inputValues.temperature) {\r\n      const table = tables[`b${inputValues.substance}1`];\r\n      const tempIndex = propertyIndex(table, \"temp.\");\r\n      const pressIndex = propertyIndex(table, \"press.\");\r\n      const vIndex = propertyIndex(table, \"v_sat.liquid\");\r\n      const uIndex = propertyIndex(table, \"u_sat.liquid\");\r\n      const hIndex = propertyIndex(table, \"h_sat.liquid\");\r\n      const sIndex = propertyIndex(table, \"s_sat.liquid\");\r\n      const tempResult = smartSearch(table, \"temp.\", inputValues.temperature);\r\n      UI.log(`searching table b.${inputValues.substance}.1`);\r\n      if (tempResult.statusCode === \"101\" || tempResult.statusCode === \"102\") {\r\n        throw new Error(\"cannot find saturation properties try searching manually\");\r\n      }\r\n      if (tempResult.statusCode === \"200\") {\r\n        const res = tempResult.result;\r\n        UI.log(`found exact row =>\\n [${res[tempIndex]}, ${res[pressIndex]}, ${res[vIndex]}, ${res[uIndex]}, ${res[hIndex]}, ${res[sIndex]}]`);\r\n        outputValues.pressure = inputValues.pressure ?? tempResult.result[pressIndex];\r\n        outputValues.specificVolume = inputValues.specificVolume ?? tempResult.result[vIndex];\r\n        outputValues.internalEnergy = inputValues.internalEnergy ?? tempResult.result[uIndex];\r\n        outputValues.specificEnthalpy = inputValues.specificEnthalpy ?? tempResult.result[hIndex];\r\n        outputValues.specificEntropy = inputValues.specificEntropy ?? tempResult.result[sIndex];\r\n      }\r\n      if (tempResult.statusCode === \"300\") {\r\n        const temp = inputValues.temperature;\r\n        const res = tempResult.result;\r\n        UI.log(\r\n          `found surrounding rows =>\\n [${res[0][tempIndex]}, ${res[0][pressIndex]}, ${res[0][vIndex]}, ${res[0][uIndex]}, ${res[0][hIndex]}, ${res[0][sIndex]}],\\n [${res[1][tempIndex]}, ${res[1][pressIndex]}, ${res[1][vIndex]}, ${res[1][uIndex]}, ${res[1][hIndex]}, ${res[1][sIndex]}]\\n\\n`\r\n        );\r\n        outputValues.pressure = inputValues.pressure ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][pressIndex], res[1][pressIndex]);\r\n        outputValues.specificVolume =\r\n          inputValues.specificVolume ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][vIndex], res[1][pressIndex]);\r\n        outputValues.internalEnergy = inputValues.internalEnergy ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][uIndex], res[1][uIndex]);\r\n        outputValues.specificEnthalpy =\r\n          inputValues.specificEnthalpy ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][hIndex], res[1][hIndex]);\r\n        outputValues.specificEntropy = inputValues.specificEntropy ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][sIndex], res[1][sIndex]);\r\n      }\r\n    } else if (inputValues.pressure) {\r\n      const table = inputValues.substance === 1 ? tables.b12 : tables[`b${inputValues.substance}1`];\r\n      const tempIndex = inputValues.substance === 1 ? 1 : propertyIndex(table, \"temp.\");\r\n      const pressIndex = inputValues.substance === 1 ? 0 : propertyIndex(table, \"press.\");\r\n      const vIndex = propertyIndex(table, \"v_sat.liquid\");\r\n      const uIndex = propertyIndex(table, \"u_sat.liquid\");\r\n      const hIndex = propertyIndex(table, \"h_sat.liquid\");\r\n      const sIndex = propertyIndex(table, \"s_sat.liquid\");\r\n      const tempResult = smartSearch(table, inputValues.substance === 1 ? 0 : \"press.\", inputValues.temperature);\r\n      UI.log(`searching table b1${inputValues.substance === 1 ? \"b12\" : `b${inputValues.substance}1`}`);\r\n      if (tempResult.statusCode === \"101\" || tempResult.statusCode === \"102\") {\r\n        throw new Error(\"cannot find saturation properties try searching manually\");\r\n      }\r\n      if (tempResult.statusCode === \"200\") {\r\n        const res = tempResult.result;\r\n        UI.log(`found exact row =>\\n [${res[tempIndex]}, ${res[pressIndex]}, ${res[vIndex]}, ${res[uIndex]}, ${res[hIndex]}, ${res[sIndex]}]`);\r\n        outputValues.pressure = inputValues.pressure ?? res[pressIndex];\r\n        outputValues.specificVolume = inputValues.specificVolume ?? res[vIndex];\r\n        outputValues.internalEnergy = inputValues.internalEnergy ?? res[uIndex];\r\n        outputValues.specificEnthalpy = inputValues.specificEnthalpy ?? res[hIndex];\r\n        outputValues.specificEntropy = inputValues.specificEntropy ?? res[sIndex];\r\n      }\r\n      if (tempResult.statusCode === \"300\") {\r\n        const temp = inputValues.temperature;\r\n        const res = tempResult.result;\r\n        UI.log(\r\n          `found surrounding rows =>\\n [${res[0][tempIndex]}, ${res[0][pressIndex]}, ${res[0][vIndex]}, ${res[0][uIndex]}, ${res[0][hIndex]}, ${res[0][sIndex]}],\\n [${res[1][tempIndex]}, ${res[1][pressIndex]}, ${res[1][vIndex]}, ${res[1][uIndex]}, ${res[1][hIndex]}, ${res[1][sIndex]}]\\n\\n`\r\n        );\r\n        outputValues.pressure = inputValues.pressure ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][pressIndex], res[1][pressIndex]);\r\n        outputValues.specificVolume =\r\n          inputValues.specificVolume ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][vIndex], res[1][pressIndex]);\r\n        outputValues.internalEnergy = inputValues.internalEnergy ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][uIndex], res[1][uIndex]);\r\n        outputValues.specificEnthalpy =\r\n          inputValues.specificEnthalpy ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][hIndex], res[1][hIndex]);\r\n        outputValues.specificEntropy = inputValues.specificEntropy ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][sIndex], res[1][sIndex]);\r\n      }\r\n    }\r\n  }\r\n  if (phase === \"sat.vapor\") {\r\n    if (inputValues.temperature) {\r\n      const table = tables[`b${inputValues.substance}1`];\r\n      const tempIndex = propertyIndex(table, \"temp.\");\r\n      const pressIndex = propertyIndex(table, \"press.\");\r\n      const vIndex = propertyIndex(table, \"v_sat.vapor\");\r\n      const uIndex = propertyIndex(table, \"u_sat.vapor\");\r\n      const hIndex = propertyIndex(table, \"h_sat.vapor\");\r\n      const sIndex = propertyIndex(table, \"s_sat.vapor\");\r\n      const tempResult = smartSearch(table, \"temp.\", inputValues.temperature);\r\n      UI.log(`searching table b.${inputValues.substance}.1`);\r\n      if (tempResult.statusCode === \"101\" || tempResult.statusCode === \"102\") {\r\n        throw new Error(\"cannot find saturation properties try searching manually\");\r\n      }\r\n      if (tempResult.statusCode === \"200\") {\r\n        const res = tempResult.result;\r\n        UI.log(`found exact row =>\\n [${res[tempIndex]}, ${res[pressIndex]}, ${res[vIndex]}, ${res[uIndex]}, ${res[hIndex]}, ${res[sIndex]}]`);\r\n        outputValues.pressure = inputValues.pressure ?? tempResult.result[pressIndex];\r\n        outputValues.specificVolume = inputValues.specificVolume ?? tempResult.result[vIndex];\r\n        outputValues.internalEnergy = inputValues.internalEnergy ?? tempResult.result[uIndex];\r\n        outputValues.specificEnthalpy = inputValues.specificEnthalpy ?? tempResult.result[hIndex];\r\n        outputValues.specificEntropy = inputValues.specificEntropy ?? tempResult.result[sIndex];\r\n      }\r\n      if (tempResult.statusCode === \"300\") {\r\n        const temp = inputValues.temperature;\r\n        const res = tempResult.result;\r\n        UI.log(\r\n          `found surrounding rows =>\\n [${res[0][tempIndex]}, ${res[0][pressIndex]}, ${res[0][vIndex]}, ${res[0][uIndex]}, ${res[0][hIndex]}, ${res[0][sIndex]}],\\n [${res[1][tempIndex]}, ${res[1][pressIndex]}, ${res[1][vIndex]}, ${res[1][uIndex]}, ${res[1][hIndex]}, ${res[1][sIndex]}]\\n\\n`\r\n        );\r\n        outputValues.pressure = inputValues.pressure ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][pressIndex], res[1][pressIndex]);\r\n        outputValues.specificVolume =\r\n          inputValues.specificVolume ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][vIndex], res[1][pressIndex]);\r\n        outputValues.internalEnergy = inputValues.internalEnergy ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][uIndex], res[1][uIndex]);\r\n        outputValues.specificEnthalpy =\r\n          inputValues.specificEnthalpy ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][hIndex], res[1][hIndex]);\r\n        outputValues.specificEntropy = inputValues.specificEntropy ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][sIndex], res[1][sIndex]);\r\n      }\r\n    } else if (inputValues.pressure) {\r\n      const table = inputValues.substance === 1 ? tables.b12 : tables[`b${inputValues.substance}1`];\r\n      const tempIndex = inputValues.substance === 1 ? 1 : propertyIndex(table, \"temp.\");\r\n      const pressIndex = inputValues.substance === 1 ? 0 : propertyIndex(table, \"press.\");\r\n      const vIndex = propertyIndex(table, \"v_sat.vapor\");\r\n      const uIndex = propertyIndex(table, \"u_sat.vapor\");\r\n      const hIndex = propertyIndex(table, \"h_sat.vapor\");\r\n      const sIndex = propertyIndex(table, \"s_sat.vapor\");\r\n      const tempResult = smartSearch(table, inputValues.substance === 1 ? 0 : \"press.\", inputValues.temperature);\r\n      UI.log(`searching table ${inputValues.substance === 1 ? \"b12\" : `b${inputValues.substance}1`}`);\r\n      if (tempResult.statusCode === \"101\" || tempResult.statusCode === \"102\") {\r\n        throw new Error(\"cannot find saturation properties try searching manually\");\r\n      }\r\n      if (tempResult.statusCode === \"200\") {\r\n        const res = tempResult.result;\r\n        UI.log(`found exact row =>\\n [${res[tempIndex]}, ${res[pressIndex]}, ${res[vIndex]}, ${res[uIndex]}, ${res[hIndex]}, ${res[sIndex]}]`);\r\n        outputValues.pressure = inputValues.pressure ?? tempResult.result[pressIndex];\r\n        outputValues.specificVolume = inputValues.specificVolume ?? tempResult.result[vIndex];\r\n        outputValues.internalEnergy = inputValues.internalEnergy ?? tempResult.result[uIndex];\r\n        outputValues.specificEnthalpy = inputValues.specificEnthalpy ?? tempResult.result[hIndex];\r\n        outputValues.specificEntropy = inputValues.specificEntropy ?? tempResult.result[sIndex];\r\n      }\r\n      if (tempResult.statusCode === \"300\") {\r\n        const temp = inputValues.temperature;\r\n        const res = tempResult.result;\r\n        UI.log(\r\n          `found surrounding rows =>\\n [${res[0][tempIndex]}, ${res[0][pressIndex]}, ${res[0][vIndex]}, ${res[0][uIndex]}, ${res[0][hIndex]}, ${res[0][sIndex]}],\\n [${res[1][tempIndex]}, ${res[1][pressIndex]}, ${res[1][vIndex]}, ${res[1][uIndex]}, ${res[1][hIndex]}, ${res[1][sIndex]}]\\n\\n`\r\n        );\r\n        outputValues.pressure = inputValues.pressure ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][pressIndex], res[1][pressIndex]);\r\n        outputValues.specificVolume =\r\n          inputValues.specificVolume ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][vIndex], res[1][pressIndex]);\r\n        outputValues.internalEnergy = inputValues.internalEnergy ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][uIndex], res[1][uIndex]);\r\n        outputValues.specificEnthalpy =\r\n          inputValues.specificEnthalpy ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][hIndex], res[1][hIndex]);\r\n        outputValues.specificEntropy = inputValues.specificEntropy ?? interpolator(temp, res[0][tempIndex], res[1][tempIndex], res[0][sIndex], res[1][sIndex]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return outputValues;\r\n}\r\n","import twoDimensionalSearch from \"../../twoDimensionalSearch/index.js\";\r\nimport edgeCaseInterpolation from \"./edgeCaseInterpolation.js\";\r\nimport findSubstanceName from \"../../findSubstanceName.js\";\r\nimport doubleInterpolator from \"../doubleInterpolator.js\";\r\nimport inputReader from \"../inputReader.js\";\r\nimport ancillary from \"./ancillary.js\";\r\nimport fallback from \"../fallback/index.js\";\r\nimport UI from \"../../../view/index.js\";\r\n/**\r\n *\r\n * @param {object} tables all thermodynamic tables\r\n * @param {Object.<string, ?number>} inputValues an object containing all property values\r\n * @returns {Object.<string, ?number>}  an object containing all calculated values\r\n */\r\nexport default function (tables, inputValues) {\r\n  const substance = inputValues.substance;\r\n  const propsToStart = inputReader(inputValues);\r\n  const table = tables[`b${substance}${substance === 1 ? 3 : 2}`];\r\n  const searchResult = twoDimensionalSearch(table, ...propsToStart);\r\n  const outputValues = { ...inputValues };\r\n\r\n  UI.log(\"\");\r\n  UI.log(`searching Superheated ${findSubstanceName(substance)}... (TABLE B.${substance}.${substance === 1 ? 3 : 2})`);\r\n  UI.log(searchResult.statusMessage);\r\n  let finalResult;\r\n  if (searchResult.statusCode === \"101\" || searchResult.statusCode === \"200101\" || searchResult.statusCode === \"300101\") {\r\n    UI.log(\"didn't found requested values in Superheated tables take Saturated Vapor values instead =>\");\r\n    return fallback(tables, inputValues, \"sat.vapor\");\r\n  }\r\n  if (searchResult.statusCode === \"102\" || searchResult.statusCode === \"200102\" || searchResult.statusCode === \"300102\") {\r\n    UI.log(\"out of table\");\r\n  }\r\n  if (searchResult.statusCode === \"200200\") {\r\n    finalResult = searchResult.result;\r\n    UI.log(` => [${finalResult.join(\", \")}]`);\r\n  }\r\n  if (searchResult.statusCode === \"200300\" || searchResult.statusCode === \"300200\") {\r\n    finalResult = ancillary(table, searchResult.result, propsToStart);\r\n    searchResult.result.forEach((array) => UI.log(`[${array.join(\", \")}]`));\r\n    UI.log(`interpolating...\\n => [${finalResult.join(\", \")}]`);\r\n  }\r\n  if (searchResult.statusCode === \"300300\") {\r\n    finalResult = doubleInterpolator(table, searchResult.result, propsToStart);\r\n  }\r\n  if (searchResult.statusCode === \"300200300\" || searchResult.statusCode === \"300300200\") {\r\n    finalResult = edgeCaseInterpolation(table, searchResult.result, searchResult.statusCode, propsToStart);\r\n  }\r\n\r\n  //#region return results here!\r\n  UI.log(\"\");\r\n  outputValues.pressure = finalResult[0];\r\n  outputValues.temperature = finalResult[1];\r\n  outputValues.specificVolume = finalResult[2];\r\n  outputValues.internalEnergy = finalResult[3];\r\n  outputValues.specificEnthalpy = finalResult[4];\r\n  outputValues.specificEntropy = finalResult[5];\r\n  outputValues.quality = \"\";\r\n  return outputValues;\r\n  //#endregion\r\n}\r\n","import silentInterpolator from \"../silentInterpolator.js\";\r\nimport propertyIndex from \"../../propertyIndex.js\";\r\n/**\r\n *\r\n * @param {number[][]} table a specific thermodynamic table\r\n * @param {number[][]} result array with tow rows os values\r\n * @param {[string|number]} propsToStart filtered version of input values\r\n * @returns {number[]} interpolated results\r\n */\r\nexport default function (table, result, propsToStart) {\r\n  // finding out which value is the middle value\r\n  const x = propertyIndex(table, propsToStart[0]);\r\n  const y = propertyIndex(table, propsToStart[2]);\r\n  const middleValueIndex = result[0][x] !== result[1][x] ? x : result[0][y] !== result[1][y] ? y : undefined;\r\n  const middleValue = result[0][x] !== result[1][x] ? propsToStart[1] : result[0][y] !== result[1][y] ? propsToStart[3] : undefined;\r\n\r\n  // make an empty pressure table array\r\n  const output = [null, null, null, null, null, null];\r\n\r\n  // fill im the array with interpolated values\r\n  output.forEach((_element, i, arr) => {\r\n    if (i === middleValueIndex) {\r\n      arr[i] = middleValue;\r\n    } else {\r\n      arr[i] = silentInterpolator(middleValue, result[0][middleValueIndex], result[1][middleValueIndex], result[0][i], result[1][i]);\r\n    }\r\n  });\r\n  return output;\r\n}\r\n","import silentInterpolator from \"../silentInterpolator.js\";\r\nimport propertyIndex from \"../../propertyIndex.js\";\r\nimport UI from \"../../../view/index.js\";\r\n/**\r\n *\r\n * @param {number[][]} table a specific thermodynamic table\r\n * @param {number[][]} results contains exactly 3 arrays with property values\r\n * @param {string} statusCode either `300200300` or `300300200`\r\n * @param {[number|string]} propsToStart filtered version of input values\r\n * @returns {number[]} interpolated results\r\n */\r\nexport default function (table, results, statusCode, propsToStart) {\r\n  const firstValueIndex = propertyIndex(table, propsToStart[0]);\r\n  const firstValue = propsToStart[1];\r\n  const secondValueIndex = propertyIndex(table, propsToStart[2]);\r\n  const secondValue = propsToStart[3];\r\n  const exactResults = [];\r\n  const firstSurrounding = [];\r\n  const secondSurrounding = [];\r\n  const interpSurrounding = [];\r\n  const conclusion = [];\r\n  //#region\r\n  if (statusCode === \"300200300\") {\r\n    results[0].forEach((number) => exactResults.push(number));\r\n    results[1].forEach((number) => firstSurrounding.push(number));\r\n    results[2].forEach((number) => secondSurrounding.push(number));\r\n  }\r\n\r\n  if (statusCode === \"300300200\") {\r\n    results[0].forEach((number) => firstSurrounding.push(number));\r\n    results[1].forEach((number) => secondSurrounding.push(number));\r\n    results[2].forEach((number) => exactResults.push(number));\r\n  }\r\n\r\n  if (firstSurrounding[firstValueIndex] !== secondSurrounding[firstValueIndex]) {\r\n    firstSurrounding.forEach((_element, i) => {\r\n      if (i === firstValueIndex) {\r\n        interpSurrounding.push(firstValue);\r\n      } else {\r\n        interpSurrounding.push(\r\n          silentInterpolator(firstValue, firstSurrounding[firstValueIndex], secondSurrounding[firstValueIndex], firstSurrounding[i], secondSurrounding[i])\r\n        );\r\n      }\r\n    });\r\n  } else {\r\n    firstSurrounding.forEach((_element, i) => {\r\n      if (i === secondValueIndex) {\r\n        interpSurrounding.push(secondValue);\r\n      } else {\r\n        interpSurrounding.push(\r\n          silentInterpolator(secondValue, firstSurrounding[secondValueIndex], secondSurrounding[secondValueIndex], firstSurrounding[i], secondSurrounding[i])\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  if (exactResults[firstValueIndex] !== interpSurrounding[firstValueIndex]) {\r\n    exactResults.forEach((_element, i) => {\r\n      if (i === firstValueIndex) {\r\n        conclusion.push(firstValue);\r\n      } else {\r\n        conclusion.push(\r\n          silentInterpolator(firstValue, exactResults[firstValueIndex], interpSurrounding[firstValueIndex], exactResults[i], interpSurrounding[i])\r\n        );\r\n      }\r\n    });\r\n  } else {\r\n    exactResults.forEach((_element, i) => {\r\n      if (i === secondValueIndex) {\r\n        conclusion.push(secondValue);\r\n      } else {\r\n        conclusion.push(\r\n          silentInterpolator(secondValue, exactResults[secondValueIndex], interpSurrounding[secondValueIndex], exactResults[i], interpSurrounding[i])\r\n        );\r\n      }\r\n    });\r\n  }\r\n  //#endregion\r\n  UI.log(\"\");\r\n  UI.log(\"this is an edge case, get ready! \");\r\n  UI.log(`exact array => [${exactResults.join(\", \")}]`);\r\n  UI.log(`surrounding arrays =>\\n [${firstSurrounding.join(\", \")}],\\n [${secondSurrounding.join(\", \")}]`);\r\n  UI.log(`interpolating surrounding arrays =>\\n [${interpSurrounding.join(\", \")}]`);\r\n  UI.log(`interpolating two last arrays ...\\nfinal result =>\\n [${conclusion.join(\", \")}]`);\r\n\r\n  return conclusion;\r\n}\r\n","import twoDimensionalSearch from \"../../twoDimensionalSearch/index.js\";\r\nimport edgeCaseInterpolation from \"./edgeCaseInterpolation.js\";\r\nimport doubleInterpolator from \"../doubleInterpolator.js\";\r\nimport inputReader from \"../inputReader.js\";\r\nimport ancillary from \"./ancillary.js\";\r\nimport fallback from \"../fallback/index.js\";\r\nimport UI from \"../../../view/index.js\";\r\n/**\r\n *\r\n * @param {object} tables all thermodynamic tables\r\n * @param {Object.<string, ?number>} inputValues an object containing all property values\r\n * @returns {Object.<string, ?number>}  an object containing all calculated values\r\n */\r\nexport default function (tables, inputValues) {\r\n  const substance = inputValues.substance;\r\n  if (substance !== 1) {\r\n    // only water has compress liquid table\r\n    return fallback(tables, inputValues, \"sat.liquid\");\r\n  }\r\n  const propsToStart = inputReader(inputValues);\r\n  const table = tables.b14;\r\n  const searchResult = twoDimensionalSearch(table, ...propsToStart);\r\n  const outputValues = { ...inputValues };\r\n\r\n  UI.log(\"\");\r\n  UI.log(`searching Compressed Liquid Water... (TABLE B.1.4)`);\r\n  UI.log(searchResult.statusMessage);\r\n  let finalResult;\r\n  if (searchResult.statusCode === \"101\" || searchResult.statusCode === \"200101\" || searchResult.statusCode === \"300101\") {\r\n    UI.log(\"didn't found requested values in Compressed Liquid tables take Saturated liquid values instead =>\");\r\n    return fallback(tables, inputValues, \"sat.liquid\");\r\n  }\r\n  if (searchResult.statusCode === \"102\" || searchResult.statusCode === \"200102\" || searchResult.statusCode === \"300102\") {\r\n    console.error(\"out of table\");\r\n  }\r\n  if (searchResult.statusCode === \"200200\") {\r\n    finalResult = searchResult.result;\r\n  }\r\n  if (searchResult.statusCode === \"200300\" || searchResult.statusCode === \"300200\") {\r\n    finalResult = ancillary(table, searchResult.result, propsToStart);\r\n    searchResult.result.forEach((array) => UI.log(`[${array.join(\", \")}]`));\r\n  }\r\n  if (searchResult.statusCode === \"300300\") {\r\n    finalResult = doubleInterpolator(table, searchResult.result, propsToStart);\r\n  }\r\n  if (searchResult.statusCode === \"300200300\" || searchResult.statusCode === \"300300200\") {\r\n    finalResult = edgeCaseInterpolation(table, searchResult.result, searchResult.statusCode, propsToStart);\r\n  }\r\n\r\n  //#region return results here!\r\n  UI.log(\"\");\r\n  outputValues.pressure = finalResult[0];\r\n  outputValues.temperature = finalResult[1];\r\n  outputValues.specificVolume = finalResult[2];\r\n  outputValues.internalEnergy = finalResult[3];\r\n  outputValues.specificEnthalpy = finalResult[4];\r\n  outputValues.specificEntropy = finalResult[5];\r\n  outputValues.quality = \"\";\r\n  return outputValues;\r\n  //#endregion\r\n}\r\n","import silentInterpolator from \"../silentInterpolator.js\";\r\nimport propertyIndex from \"../../propertyIndex.js\";\r\n/**\r\n *\r\n * @param {number[][]} table a specific thermodynamic table\r\n * @param {number[][]} result array with tow rows os values\r\n * @param {[string|number]} propsToStart filtered version of input values\r\n * @returns {number[]} interpolated results\r\n */\r\nexport default function (table, result, propsToStart) {\r\n  // finding out which value is the middle value\r\n  const x = propertyIndex(table, propsToStart[0]);\r\n  const y = propertyIndex(table, propsToStart[2]);\r\n  const middleValueIndex = result[0][x] !== result[1][x] ? x : result[0][y] !== result[1][y] ? y : undefined;\r\n  const middleValue = result[0][x] !== result[1][x] ? propsToStart[1] : result[0][y] !== result[1][y] ? propsToStart[3] : undefined;\r\n\r\n  // make an empty pressure table array\r\n  const output = [null, null, null, null, null, null];\r\n\r\n  // fill im the array with interpolated values\r\n  output.forEach((_element, i, arr) => {\r\n    if (i === middleValueIndex) {\r\n      arr[i] = middleValue;\r\n    } else {\r\n      arr[i] = silentInterpolator(middleValue, result[0][middleValueIndex], result[1][middleValueIndex], result[0][i], result[1][i]);\r\n    }\r\n  });\r\n  return output;\r\n}\r\n","import silentInterpolator from \"../silentInterpolator.js\";\r\nimport propertyIndex from \"../../propertyIndex.js\";\r\nimport UI from \"../../../view/index.js\";\r\n/**\r\n *\r\n * @param {number[][]} table a specific thermodynamic table\r\n * @param {number[][]} results contains exactly 3 arrays with property values\r\n * @param {string} statusCode either `300200300` or `300300200`\r\n * @param {[number|string]} propsToStart filtered version of input values\r\n * @returns {number[]} interpolated results\r\n */\r\nexport default function (table, results, statusCode, propsToStart) {\r\n  const firstValueIndex = propertyIndex(table, propsToStart[0]);\r\n  const firstValue = propsToStart[1];\r\n  const secondValueIndex = propertyIndex(table, propsToStart[2]);\r\n  const secondValue = propsToStart[3];\r\n  const exactResults = [];\r\n  const firstSurrounding = [];\r\n  const secondSurrounding = [];\r\n  const interpSurrounding = [];\r\n  const conclusion = [];\r\n  //#region\r\n  if (statusCode === \"300200300\") {\r\n    results[0].forEach((number) => exactResults.push(number));\r\n    results[1].forEach((number) => firstSurrounding.push(number));\r\n    results[2].forEach((number) => secondSurrounding.push(number));\r\n  }\r\n\r\n  if (statusCode === \"300300200\") {\r\n    results[0].forEach((number) => firstSurrounding.push(number));\r\n    results[1].forEach((number) => secondSurrounding.push(number));\r\n    results[2].forEach((number) => exactResults.push(number));\r\n  }\r\n\r\n  if (firstSurrounding[firstValueIndex] !== secondSurrounding[firstValueIndex]) {\r\n    firstSurrounding.forEach((_element, i) => {\r\n      if (i === firstValueIndex) {\r\n        interpSurrounding.push(firstValue);\r\n      } else {\r\n        interpSurrounding.push(\r\n          silentInterpolator(firstValue, firstSurrounding[firstValueIndex], secondSurrounding[firstValueIndex], firstSurrounding[i], secondSurrounding[i])\r\n        );\r\n      }\r\n    });\r\n  } else {\r\n    firstSurrounding.forEach((_element, i) => {\r\n      if (i === secondValueIndex) {\r\n        interpSurrounding.push(secondValue);\r\n      } else {\r\n        interpSurrounding.push(\r\n          silentInterpolator(secondValue, firstSurrounding[secondValueIndex], secondSurrounding[secondValueIndex], firstSurrounding[i], secondSurrounding[i])\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  if (exactResults[firstValueIndex] !== interpSurrounding[firstValueIndex]) {\r\n    exactResults.forEach((_element, i) => {\r\n      if (i === firstValueIndex) {\r\n        conclusion.push(firstValue);\r\n      } else {\r\n        conclusion.push(\r\n          silentInterpolator(firstValue, exactResults[firstValueIndex], interpSurrounding[firstValueIndex], exactResults[i], interpSurrounding[i])\r\n        );\r\n      }\r\n    });\r\n  } else {\r\n    exactResults.forEach((_element, i) => {\r\n      if (i === secondValueIndex) {\r\n        conclusion.push(secondValue);\r\n      } else {\r\n        conclusion.push(\r\n          silentInterpolator(secondValue, exactResults[secondValueIndex], interpSurrounding[secondValueIndex], exactResults[i], interpSurrounding[i])\r\n        );\r\n      }\r\n    });\r\n  }\r\n  //#endregion\r\n  UI.log(\"\");\r\n  UI.log(\"this is an edge case, get ready! \");\r\n  UI.log(`exact array => [${exactResults.join(\", \")}]`);\r\n  UI.log(`surrounding arrays =>\\n [${firstSurrounding.join(\", \")}],\\n [${secondSurrounding.join(\", \")}]`);\r\n  UI.log(`interpolating surrounding arrays =>\\n [${interpSurrounding.join(\", \")}]`);\r\n  UI.log(`interpolating two last arrays ...\\nfinal result =>\\n [${conclusion.join(\", \")}]`);\r\n\r\n  return conclusion;\r\n}\r\n","import onSatVapor from \"./onSatVapor/index.js\";\r\nimport onSupVapor from \"./onSupVapor/index.js\";\r\nimport onCompLiquid from \"./onCompLiquid/index.js\";\r\nimport fallback from \"./fallback/index.js\";\r\n/**\r\n *\r\n * @param {object} tables all thermodynamic tables\r\n * @param {string} phase phase\r\n * @param {Object.<string, ?number>} inputValues an object containing all properties and their values (value can be null)\r\n * @returns {Object.<string, ?number>} an object containing all calculated values\r\n */\r\nexport default function (tables, phase, inputValues) {\r\n  if (phase === \"sat.vapor\") {\r\n    return onSatVapor(tables, inputValues);\r\n  } else if (phase === \"sup.vapor\") {\r\n    return onSupVapor(tables, inputValues);\r\n  } else if (phase === \"comp.liquid\") {\r\n    return onCompLiquid(tables, inputValues);\r\n  } else if (phase === \"sat.liquid\") {\r\n    return fallback(tables, inputValues, \"sat.liquid\");\r\n  } else if (phase === \"sat.vapor(fallback)\") {\r\n    return fallback(tables, inputValues, \"sat.vapor\");\r\n  }\r\n}\r\n","import smartSearch from \"../../smartSearch/index.js\";\r\nimport propertyIndex from \"../../propertyIndex.js\";\r\nimport interpolator from \"../../interpolator.js\";\r\nimport UI from \"../../../view/index.js\";\r\n/**\r\n *\r\n * @param {number[][]} tables all thermodynamic tables\r\n * @param {Object.<string, ?number>} inputValues\r\n * @returns {Object.<string, ?number>}  an object containing all calculated values\r\n */\r\nexport default function (tables, inputValues) {\r\n  UI.log(\"\");\r\n  const outputValues = { ...inputValues };\r\n  const substance = inputValues.substance;\r\n\r\n  if (substance === 1 && inputValues.pressure) {\r\n    //#region base variables\r\n    const table = tables.b12;\r\n    const pressure = inputValues.pressure;\r\n    const pressIndex = 0; // on table b12 pressure is first value of array\r\n    const pressResult = smartSearch(table, 0, pressure);\r\n    const tempIndex = 1; // and temperature is second\r\n    //#endregion\r\n\r\n    if (pressResult.statusCode === \"200\") {\r\n      //#region find saturation temperature\r\n      outputValues.temperature = pressResult.result[tempIndex];\r\n      UI.log(`saturated temperature is ${outputValues.temperature}`);\r\n      UI.log(\"\");\r\n      //#endregion\r\n\r\n      //#region find x\r\n      if (inputValues.specificVolume) {\r\n        UI.log(\"finding quality based on specific volume...\");\r\n        const vf = pressResult.result[propertyIndex(table, \"v_sat.liquid\")];\r\n        const vfg = pressResult.result[propertyIndex(table, \"v_evap.\")];\r\n        const quality = (inputValues.specificVolume - vf) / vfg;\r\n        UI.log(`vf = ${vf}, vfg = ${vfg}, x = (${inputValues.specificVolume} - ${vf}) / ${vfg}`);\r\n        outputValues.quality = quality;\r\n      } else if (inputValues.internalEnergy) {\r\n        UI.log(\"finding quality based on internal energy...\");\r\n        const uf = pressResult.result[propertyIndex(table, \"u_sat.liquid\")];\r\n        const ufg = pressResult.result[propertyIndex(table, \"u_evap.\")];\r\n        const quality = (inputValues.internalEnergy - uf) / ufg;\r\n        UI.log(`uf = ${uf}, ufg = ${ufg}, x = (${inputValues.internalEnergy} - ${uf}) / ${ufg}`);\r\n        outputValues.quality = quality;\r\n      } else if (inputValues.specificEnthalpy) {\r\n        UI.log(\"finding quality based on specific enthalpy...\");\r\n        const hf = pressResult.result[propertyIndex(table, \"h_sat.liquid\")];\r\n        const hfg = pressResult.result[propertyIndex(table, \"h_evap.\")];\r\n        const quality = (inputValues.specificEnthalpy - hf) / hfg;\r\n        UI.log(`hf = ${hf}, hfg = ${hfg}, x = (${inputValues.specificEnthalpy} - ${hf}) / ${hfg}`);\r\n        outputValues.quality = quality;\r\n      } else if (inputValues.specificEntropy) {\r\n        UI.log(\"finding quality based on specific entropy...\");\r\n        const sf = pressResult.result[propertyIndex(table, \"s_sat.liquid\")];\r\n        const sfg = pressResult.result[propertyIndex(table, \"s_evap.\")];\r\n        const quality = (inputValues.specificEntropy - sf) / sfg;\r\n        UI.log(`sf = ${sf}, sfg = ${sfg}, x = (${inputValues.specificEntropy} - ${sf}) / ${sfg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      const quality = outputValues.quality;\r\n      UI.log(`x = ${quality}`);\r\n      UI.log(\"\");\r\n      //#endregion\r\n\r\n      //#region find v u h s\r\n      if (inputValues.specificVolume === null) {\r\n        const vf = pressResult.result[propertyIndex(table, \"v_sat.liquid\")];\r\n        const vfg = pressResult.result[propertyIndex(table, \"v_evap.\")];\r\n        const v = vf + quality * vfg;\r\n\r\n        UI.log(\"finding specific volume based on quality...\");\r\n        UI.log(`vf = ${vf}, vfg = ${vfg}, v = (${vf} + ${quality} * ${vfg})`);\r\n        UI.log(`v = ${v}`);\r\n\r\n        outputValues.specificVolume = v;\r\n      }\r\n      if (inputValues.internalEnergy === null) {\r\n        const uf = pressResult.result[propertyIndex(table, \"u_sat.liquid\")];\r\n        const ufg = pressResult.result[propertyIndex(table, \"u_evap.\")];\r\n        const u = uf + quality * ufg;\r\n\r\n        UI.log(\"finding internal energy based on quality...\");\r\n        UI.log(`uf = ${uf}, ufg = ${ufg}, u = (${uf} + ${quality} * ${ufg})`);\r\n        UI.log(`u = ${u}`);\r\n\r\n        outputValues.internalEnergy = u;\r\n      }\r\n      if (inputValues.specificEnthalpy === null) {\r\n        const hf = pressResult.result[propertyIndex(table, \"h_sat.liquid\")];\r\n        const hfg = pressResult.result[propertyIndex(table, \"h_evap.\")];\r\n        const h = hf + quality * hfg;\r\n\r\n        UI.log(\"finding specific enthalpy based on quality...\");\r\n        UI.log(`hf = ${hf}, hfg = ${hfg}, h = (${hf} + ${quality} * ${hfg})`);\r\n        UI.log(`h = ${h}`);\r\n\r\n        outputValues.specificEnthalpy = h;\r\n      }\r\n      if (inputValues.specificEntropy === null) {\r\n        const sf = pressResult.result[propertyIndex(table, \"s_sat.liquid\")];\r\n        const sfg = pressResult.result[propertyIndex(table, \"s_evap.\")];\r\n        const s = sf + quality * sfg;\r\n\r\n        UI.log(\"finding specific entropy based on quality...\");\r\n        UI.log(`sf = ${sf}, sfg = ${sfg}, s = (${sf} + ${quality} * ${sfg})`);\r\n        UI.log(`s = ${s}`);\r\n\r\n        outputValues.specificEntropy = s;\r\n      }\r\n      //#endregion\r\n\r\n      return outputValues;\r\n    } else if ((pressResult.statusCode = \"300\")) {\r\n      // if didn't found exact temperature =>\r\n\r\n      //#region find temperature\r\n      UI.log(\"start interpolation to find saturated temperature\");\r\n      const temperature = interpolator(\r\n        pressure,\r\n        pressResult.result[0][pressIndex],\r\n        pressResult.result[1][pressIndex],\r\n        pressResult.result[0][tempIndex],\r\n        pressResult.result[1][tempIndex]\r\n      );\r\n      outputValues.temperature = temperature;\r\n      UI.log(`saturated temperature is ${outputValues.temperature}`);\r\n      UI.log(\"\");\r\n      //#endregion\r\n\r\n      //#region find x\r\n      if (inputValues.specificVolume) {\r\n        UI.log(\"finding quality based on specific volume...\");\r\n        const vfIndex = propertyIndex(table, \"v_sat.liquid\");\r\n        const vfgIndex = propertyIndex(table, \"v_evap.\");\r\n\r\n        const vf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][vfIndex],\r\n          pressResult.result[1][vfIndex]\r\n        );\r\n\r\n        const vfg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][vfgIndex],\r\n          pressResult.result[1][vfgIndex]\r\n        );\r\n\r\n        const quality = (inputValues.specificVolume - vf) / vfg;\r\n        UI.log(`vf = ${vf}, vfg = ${vfg}, x = (${inputValues.specificVolume} - ${vf}) / ${vfg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      if (inputValues.internalEnergy) {\r\n        UI.log(\"finding quality based on internal energy...\");\r\n        const ufIndex = propertyIndex(table, \"u_sat.liquid\");\r\n        const ufgIndex = propertyIndex(table, \"u_evap.\");\r\n\r\n        const uf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][ufIndex],\r\n          pressResult.result[1][ufIndex]\r\n        );\r\n\r\n        const ufg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][ufgIndex],\r\n          pressResult.result[1][ufgIndex]\r\n        );\r\n\r\n        const quality = (inputValues.internalEnergy - uf) / ufg;\r\n        UI.log(`uf = ${uf}, ufg = ${ufg}, x = (${inputValues.internalEnergy} - ${uf}) / ${ufg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      if (inputValues.specificEnthalpy) {\r\n        UI.log(\"finding quality based on specific enthalpy...\");\r\n        const hfIndex = propertyIndex(table, \"h_sat.liquid\");\r\n        const hfgIndex = propertyIndex(table, \"h_evap.\");\r\n\r\n        const hf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][hfIndex],\r\n          pressResult.result[1][hfIndex]\r\n        );\r\n\r\n        const hfg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][hfgIndex],\r\n          pressResult.result[1][hfgIndex]\r\n        );\r\n\r\n        const quality = (inputValues.specificEnthalpy - hf) / hfg;\r\n        UI.log(`hf = ${hf}, hfg = ${hfg}, x = (${inputValues.specificEnthalpy} - ${hf}) / ${hfg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      if (inputValues.specificEntropy) {\r\n        UI.log(\"finding quality based on specific entropy...\");\r\n        const sfIndex = propertyIndex(table, \"s_sat.liquid\");\r\n        const sfgIndex = propertyIndex(table, \"s_evap.\");\r\n\r\n        const sf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][sfIndex],\r\n          pressResult.result[1][sfIndex]\r\n        );\r\n\r\n        const sfg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][sfgIndex],\r\n          pressResult.result[1][sfgIndex]\r\n        );\r\n\r\n        const quality = (inputValues.specificEntropy - sf) / sfg;\r\n        UI.log(`sf = ${sf}, sfg = ${sfg}, x = (${inputValues.specificEntropy} - ${sf}) / ${sfg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      const quality = outputValues.quality;\r\n      UI.log(`x = ${quality}`);\r\n      UI.log(\"\");\r\n      //#endregion\r\n\r\n      //#region find v u h s\r\n      if (inputValues.specificVolume === null) {\r\n        UI.log(\"finding specific volume based on quality...\");\r\n\r\n        const vfIndex = propertyIndex(table, \"v_sat.liquid\");\r\n        const vfgIndex = propertyIndex(table, \"v_evap.\");\r\n\r\n        const vf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][vfIndex],\r\n          pressResult.result[1][vfIndex]\r\n        );\r\n\r\n        const vfg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][vfgIndex],\r\n          pressResult.result[1][vfgIndex]\r\n        );\r\n        const v = vf + quality * vfg;\r\n\r\n        UI.log(`vf = ${vf}, vfg = ${vfg}, v = (${vf} + ${quality} * ${vfg})`);\r\n        UI.log(`v = ${v}`);\r\n        UI.log(\"\");\r\n\r\n        outputValues.specificVolume = v;\r\n      }\r\n      if (inputValues.internalEnergy === null) {\r\n        UI.log(\"finding internal energy based on quality...\");\r\n\r\n        const ufIndex = propertyIndex(table, \"u_sat.liquid\");\r\n        const ufgIndex = propertyIndex(table, \"u_evap.\");\r\n\r\n        const uf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][ufIndex],\r\n          pressResult.result[1][ufIndex]\r\n        );\r\n\r\n        const ufg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][ufgIndex],\r\n          pressResult.result[1][ufgIndex]\r\n        );\r\n        const u = uf + quality * ufg;\r\n\r\n        UI.log(`uf = ${uf}, ufg = ${ufg}, u = (${uf} + ${quality} * ${ufg})`);\r\n        UI.log(`u = ${u}`);\r\n        UI.log(\"\");\r\n\r\n        outputValues.internalEnergy = u;\r\n      }\r\n      if (inputValues.specificEnthalpy === null) {\r\n        UI.log(\"finding specific enthalpy based on quality...\");\r\n        const hfIndex = propertyIndex(table, \"h_sat.liquid\");\r\n        const hfgIndex = propertyIndex(table, \"h_evap.\");\r\n\r\n        const hf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][hfIndex],\r\n          pressResult.result[1][hfIndex]\r\n        );\r\n\r\n        const hfg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][hfgIndex],\r\n          pressResult.result[1][hfgIndex]\r\n        );\r\n        const h = hf + quality * hfg;\r\n\r\n        UI.log(`hf = ${hf}, hfg = ${hfg}, h = (${hf} + ${quality} * ${hfg})`);\r\n        UI.log(`h = ${h}`);\r\n        UI.log(\"\");\r\n\r\n        outputValues.specificEnthalpy = h;\r\n      }\r\n      if (inputValues.specificEntropy === null) {\r\n        UI.log(\"finding specific entropy based on quality...\");\r\n\r\n        const sfIndex = propertyIndex(table, \"s_sat.liquid\");\r\n        const sfgIndex = propertyIndex(table, \"s_evap.\");\r\n\r\n        const sf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][sfIndex],\r\n          pressResult.result[1][sfIndex]\r\n        );\r\n\r\n        const sfg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][sfgIndex],\r\n          pressResult.result[1][sfgIndex]\r\n        );\r\n        const s = sf + quality * sfg;\r\n        UI.log(`sf = ${sf}, sfg = ${sfg}, s = (${sf} + ${quality} * ${sfg})`);\r\n        UI.log(`s = ${s}`);\r\n        UI.log(\"\");\r\n\r\n        outputValues.specificEntropy = s;\r\n      }\r\n      //#endregion\r\n      return outputValues;\r\n    }\r\n  } else if (inputValues.temperature) {\r\n    //#region base variables\r\n    const table = tables[\"b1\" + substance];\r\n    const temp = inputValues.temperature;\r\n    const tempIndex = propertyIndex(table, \"temp.\");\r\n    const tempResult = smartSearch(table, \"temp.\", temp);\r\n    const pressIndex = propertyIndex(table, \"press.\");\r\n    //#endregion\r\n\r\n    if (tempResult.statusCode === \"200\") {\r\n      //#region find pressure\r\n      outputValues.pressure = tempResult.result[pressIndex];\r\n      UI.log(`saturated pressure is ${outputValues.pressure}`);\r\n      UI.log(\"\");\r\n      //#endregion\r\n\r\n      //#region find x\r\n      if (inputValues.specificVolume) {\r\n        UI.log(\"finding quality based on specific volume...\");\r\n        const vf = tempResult.result[propertyIndex(table, \"v_sat.liquid\")];\r\n        const vfg = tempResult.result[propertyIndex(table, \"v_evap.\")];\r\n        const quality = (inputValues.specificVolume - vf) / vfg;\r\n        UI.log(`vf = ${vf}, vfg = ${vfg}, x = (${inputValues.specificVolume} - ${vf}) / ${vfg}`);\r\n        outputValues.quality = quality;\r\n      } else if (inputValues.internalEnergy) {\r\n        UI.log(\"finding quality based on internal energy...\");\r\n        const uf = tempResult.result[propertyIndex(table, \"u_sat.liquid\")];\r\n        const ufg = tempResult.result[propertyIndex(table, \"u_evap.\")];\r\n        const quality = (inputValues.internalEnergy - uf) / ufg;\r\n        UI.log(`uf = ${uf}, ufg = ${ufg}, x = (${inputValues.internalEnergy} - ${uf}) / ${ufg}`);\r\n        outputValues.quality = quality;\r\n      } else if (inputValues.specificEnthalpy) {\r\n        UI.log(\"finding quality based on specific enthalpy...\");\r\n        const hf = tempResult.result[propertyIndex(table, \"h_sat.liquid\")];\r\n        const hfg = tempResult.result[propertyIndex(table, \"h_evap.\")];\r\n        const quality = (inputValues.specificEnthalpy - hf) / hfg;\r\n        UI.log(`hf = ${hf}, hfg = ${hfg}, x = (${inputValues.specificEnthalpy} - ${hf}) / ${hfg}`);\r\n        outputValues.quality = quality;\r\n      } else if (inputValues.specificEntropy) {\r\n        UI.log(\"finding quality based on specific entropy...\");\r\n        const sf = tempResult.result[propertyIndex(table, \"s_sat.liquid\")];\r\n        const sfg = tempResult.result[propertyIndex(table, \"s_evap.\")];\r\n        const quality = (inputValues.specificEntropy - sf) / sfg;\r\n        UI.log(`sf = ${sf}, sfg = ${sfg}, x = (${inputValues.specificEntropy} - ${sf}) / ${sfg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      const quality = outputValues.quality;\r\n      UI.log(`x = ${quality}`);\r\n      UI.log(\"\");\r\n      //#endregion\r\n\r\n      //#region find v u h s\r\n      if (inputValues.specificVolume === null) {\r\n        const vf = tempResult.result[propertyIndex(table, \"v_sat.liquid\")];\r\n        const vfg = tempResult.result[propertyIndex(table, \"v_evap.\")];\r\n        const v = vf + quality * vfg;\r\n\r\n        UI.log(\"finding specific volume based on quality...\");\r\n        UI.log(`vf = ${vf}, vfg = ${vfg}, v = (${vf} + ${quality} * ${vfg})`);\r\n        UI.log(`v = ${v}`);\r\n\r\n        outputValues.specificVolume = v;\r\n      }\r\n      if (inputValues.internalEnergy === null) {\r\n        const uf = tempResult.result[propertyIndex(table, \"u_sat.liquid\")];\r\n        const ufg = tempResult.result[propertyIndex(table, \"u_evap.\")];\r\n        const u = uf + quality * ufg;\r\n\r\n        UI.log(\"finding internal energy based on quality...\");\r\n        UI.log(`uf = ${uf}, ufg = ${ufg}, u = (${uf} + ${quality} * ${ufg})`);\r\n        UI.log(`u = ${u}`);\r\n\r\n        outputValues.internalEnergy = u;\r\n      }\r\n      if (inputValues.specificEnthalpy === null) {\r\n        const hf = tempResult.result[propertyIndex(table, \"h_sat.liquid\")];\r\n        const hfg = tempResult.result[propertyIndex(table, \"h_evap.\")];\r\n        const h = hf + quality * hfg;\r\n\r\n        UI.log(\"finding specific enthalpy based on quality...\");\r\n        UI.log(`hf = ${hf}, hfg = ${hfg}, h = (${hf} + ${quality} * ${hfg})`);\r\n        UI.log(`h = ${h}`);\r\n\r\n        outputValues.specificEnthalpy = h;\r\n      }\r\n      if (inputValues.specificEntropy === null) {\r\n        const sf = tempResult.result[propertyIndex(table, \"s_sat.liquid\")];\r\n        const sfg = tempResult.result[propertyIndex(table, \"s_evap.\")];\r\n        const s = sf + quality * sfg;\r\n\r\n        UI.log(\"finding specific entropy based on quality...\");\r\n        UI.log(`sf = ${sf}, sfg = ${sfg}, s = (${sf} + ${quality} * ${sfg})`);\r\n        UI.log(`s = ${s}`);\r\n\r\n        outputValues.specificEntropy = s;\r\n      }\r\n      //#endregion\r\n\r\n      return outputValues;\r\n    } else if ((tempResult.statusCode = \"300\")) {\r\n      // if didn't found exact temperature =>\r\n\r\n      //#region find pressure\r\n      UI.log(\"start interpolation to find saturated pressure\");\r\n      const pressure = interpolator(\r\n        temp,\r\n        tempResult.result[0][tempIndex],\r\n        tempResult.result[1][tempIndex],\r\n        tempResult.result[0][pressIndex],\r\n        tempResult.result[1][pressIndex]\r\n      );\r\n      outputValues.pressure = pressure;\r\n      UI.log(`saturated pressure is ${outputValues.pressure}`);\r\n      UI.log(\"\");\r\n      //#endregion\r\n\r\n      //#region find x\r\n      if (inputValues.specificVolume) {\r\n        UI.log(\"finding quality based on specific volume...\");\r\n        const vfIndex = propertyIndex(table, \"v_sat.liquid\");\r\n        const vfgIndex = propertyIndex(table, \"v_evap.\");\r\n\r\n        const vf = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][vfIndex],\r\n          tempResult.result[1][vfIndex]\r\n        );\r\n\r\n        const vfg = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][vfgIndex],\r\n          tempResult.result[1][vfgIndex]\r\n        );\r\n\r\n        const quality = (inputValues.specificVolume - vf) / vfg;\r\n        UI.log(`vf = ${vf}, vfg = ${vfg}, x = (${inputValues.specificVolume} - ${vf}) / ${vfg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      if (inputValues.internalEnergy) {\r\n        UI.log(\"finding quality based on internal energy...\");\r\n        const ufIndex = propertyIndex(table, \"u_sat.liquid\");\r\n        const ufgIndex = propertyIndex(table, \"u_evap.\");\r\n\r\n        const uf = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][ufIndex],\r\n          tempResult.result[1][ufIndex]\r\n        );\r\n\r\n        const ufg = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][ufgIndex],\r\n          tempResult.result[1][ufgIndex]\r\n        );\r\n\r\n        const quality = (inputValues.internalEnergy - uf) / ufg;\r\n        UI.log(`uf = ${uf}, ufg = ${ufg}, x = (${inputValues.internalEnergy} - ${uf}) / ${ufg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      if (inputValues.specificEnthalpy) {\r\n        UI.log(\"finding quality based on specific enthalpy...\");\r\n        const hfIndex = propertyIndex(table, \"h_sat.liquid\");\r\n        const hfgIndex = propertyIndex(table, \"h_evap.\");\r\n\r\n        const hf = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][hfIndex],\r\n          tempResult.result[1][hfIndex]\r\n        );\r\n\r\n        const hfg = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][hfgIndex],\r\n          tempResult.result[1][hfgIndex]\r\n        );\r\n\r\n        const quality = (inputValues.specificEnthalpy - hf) / hfg;\r\n        UI.log(`hf = ${hf}, hfg = ${hfg}, x = (${inputValues.specificEnthalpy} - ${hf}) / ${hfg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      if (inputValues.specificEntropy) {\r\n        UI.log(\"finding quality based on specific entropy...\");\r\n        const sfIndex = propertyIndex(table, \"s_sat.liquid\");\r\n        const sfgIndex = propertyIndex(table, \"s_evap.\");\r\n\r\n        const sf = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][sfIndex],\r\n          tempResult.result[1][sfIndex]\r\n        );\r\n\r\n        const sfg = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][sfgIndex],\r\n          tempResult.result[1][sfgIndex]\r\n        );\r\n\r\n        const quality = (inputValues.specificEntropy - sf) / sfg;\r\n        UI.log(`sf = ${sf}, sfg = ${sfg}, x = (${inputValues.specificEntropy} - ${sf}) / ${sfg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      const quality = outputValues.quality;\r\n      UI.log(`x = ${quality}`);\r\n      UI.log(\"\");\r\n      //#endregion\r\n\r\n      //#region find v u h s\r\n      if (inputValues.specificVolume === null) {\r\n        UI.log(\"finding specific volume based on quality...\");\r\n\r\n        const vfIndex = propertyIndex(table, \"v_sat.liquid\");\r\n        const vfgIndex = propertyIndex(table, \"v_evap.\");\r\n\r\n        const vf = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][vfIndex],\r\n          tempResult.result[1][vfIndex]\r\n        );\r\n\r\n        const vfg = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][vfgIndex],\r\n          tempResult.result[1][vfgIndex]\r\n        );\r\n        const v = vf + quality * vfg;\r\n\r\n        UI.log(`vf = ${vf}, vfg = ${vfg}, v = (${vf} + ${quality} * ${vfg})`);\r\n        UI.log(`v = ${v}`);\r\n        UI.log(\"\");\r\n\r\n        outputValues.specificVolume = v;\r\n      }\r\n      if (inputValues.internalEnergy === null) {\r\n        UI.log(\"finding internal energy based on quality...\");\r\n\r\n        const ufIndex = propertyIndex(table, \"u_sat.liquid\");\r\n        const ufgIndex = propertyIndex(table, \"u_evap.\");\r\n\r\n        const uf = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][ufIndex],\r\n          tempResult.result[1][ufIndex]\r\n        );\r\n\r\n        const ufg = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][ufgIndex],\r\n          tempResult.result[1][ufgIndex]\r\n        );\r\n        const u = uf + quality * ufg;\r\n\r\n        UI.log(`uf = ${uf}, ufg = ${ufg}, u = (${uf} + ${quality} * ${ufg})`);\r\n        UI.log(`u = ${u}`);\r\n        UI.log(\"\");\r\n\r\n        outputValues.internalEnergy = u;\r\n      }\r\n      if (inputValues.specificEnthalpy === null) {\r\n        UI.log(\"finding specific enthalpy based on quality...\");\r\n        const hfIndex = propertyIndex(table, \"h_sat.liquid\");\r\n        const hfgIndex = propertyIndex(table, \"h_evap.\");\r\n\r\n        const hf = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][hfIndex],\r\n          tempResult.result[1][hfIndex]\r\n        );\r\n\r\n        const hfg = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][hfgIndex],\r\n          tempResult.result[1][hfgIndex]\r\n        );\r\n        const h = hf + quality * hfg;\r\n\r\n        UI.log(`hf = ${hf}, hfg = ${hfg}, h = (${hf} + ${quality} * ${hfg})`);\r\n        UI.log(`h = ${h}`);\r\n        UI.log(\"\");\r\n\r\n        outputValues.specificEnthalpy = h;\r\n      }\r\n      if (inputValues.specificEntropy === null) {\r\n        UI.log(\"finding specific entropy based on quality...\");\r\n\r\n        const sfIndex = propertyIndex(table, \"s_sat.liquid\");\r\n        const sfgIndex = propertyIndex(table, \"s_evap.\");\r\n\r\n        const sf = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][sfIndex],\r\n          tempResult.result[1][sfIndex]\r\n        );\r\n\r\n        const sfg = interpolator(\r\n          temp,\r\n          tempResult.result[0][tempIndex],\r\n          tempResult.result[1][tempIndex],\r\n          tempResult.result[0][sfgIndex],\r\n          tempResult.result[1][sfgIndex]\r\n        );\r\n        const s = sf + quality * sfg;\r\n        UI.log(`sf = ${sf}, sfg = ${sfg}, s = (${sf} + ${quality} * ${sfg})`);\r\n        UI.log(`s = ${s}`);\r\n        UI.log(\"\");\r\n\r\n        outputValues.specificEntropy = s;\r\n      }\r\n      //#endregion\r\n      return outputValues;\r\n    }\r\n  } else if (inputValues.pressure) {\r\n    //#region base variables\r\n    const table = tables[\"b1\" + substance];\r\n    const pressure = inputValues.pressure;\r\n    const pressIndex = propertyIndex(table, \"press.\");\r\n    const pressResult = smartSearch(table, \"press.\", pressure);\r\n    const tempIndex = propertyIndex(table, \"temp.\");\r\n    //#endregion\r\n\r\n    if (pressResult.statusCode === \"200\") {\r\n      //#region find saturation temperature\r\n      outputValues.temperature = pressResult.result[tempIndex];\r\n      UI.log(`saturated temperature is ${outputValues.temperature}`);\r\n      UI.log(\"\");\r\n      //#endregion\r\n\r\n      //#region find x\r\n      if (inputValues.specificVolume) {\r\n        UI.log(\"finding quality based on specific volume...\");\r\n        const vf = pressResult.result[propertyIndex(table, \"v_sat.liquid\")];\r\n        const vfg = pressResult.result[propertyIndex(table, \"v_evap.\")];\r\n        const quality = (inputValues.specificVolume - vf) / vfg;\r\n        UI.log(`vf = ${vf}, vfg = ${vfg}, x = (${inputValues.specificVolume} - ${vf}) / ${vfg}`);\r\n        outputValues.quality = quality;\r\n      } else if (inputValues.internalEnergy) {\r\n        UI.log(\"finding quality based on internal energy...\");\r\n        const uf = pressResult.result[propertyIndex(table, \"u_sat.liquid\")];\r\n        const ufg = pressResult.result[propertyIndex(table, \"u_evap.\")];\r\n        const quality = (inputValues.internalEnergy - uf) / ufg;\r\n        UI.log(`uf = ${uf}, ufg = ${ufg}, x = (${inputValues.internalEnergy} - ${uf}) / ${ufg}`);\r\n        outputValues.quality = quality;\r\n      } else if (inputValues.specificEnthalpy) {\r\n        UI.log(\"finding quality based on specific enthalpy...\");\r\n        const hf = pressResult.result[propertyIndex(table, \"h_sat.liquid\")];\r\n        const hfg = pressResult.result[propertyIndex(table, \"h_evap.\")];\r\n        const quality = (inputValues.specificEnthalpy - hf) / hfg;\r\n        UI.log(`hf = ${hf}, hfg = ${hfg}, x = (${inputValues.specificEnthalpy} - ${hf}) / ${hfg}`);\r\n        outputValues.quality = quality;\r\n      } else if (inputValues.specificEntropy) {\r\n        UI.log(\"finding quality based on specific entropy...\");\r\n        const sf = pressResult.result[propertyIndex(table, \"s_sat.liquid\")];\r\n        const sfg = pressResult.result[propertyIndex(table, \"s_evap.\")];\r\n        const quality = (inputValues.specificEntropy - sf) / sfg;\r\n        UI.log(`sf = ${sf}, sfg = ${sfg}, x = (${inputValues.specificEntropy} - ${sf}) / ${sfg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      const quality = outputValues.quality;\r\n      UI.log(`x = ${quality}`);\r\n      UI.log(\"\");\r\n      //#endregion\r\n\r\n      //#region find v u h s\r\n      if (inputValues.specificVolume === null) {\r\n        const vf = pressResult.result[propertyIndex(table, \"v_sat.liquid\")];\r\n        const vfg = pressResult.result[propertyIndex(table, \"v_evap.\")];\r\n        const v = vf + quality * vfg;\r\n\r\n        UI.log(\"finding specific volume based on quality...\");\r\n        UI.log(`vf = ${vf}, vfg = ${vfg}, v = (${vf} + ${quality} * ${vfg})`);\r\n        UI.log(`v = ${v}`);\r\n\r\n        outputValues.specificVolume = v;\r\n      }\r\n      if (inputValues.internalEnergy === null) {\r\n        const uf = pressResult.result[propertyIndex(table, \"u_sat.liquid\")];\r\n        const ufg = pressResult.result[propertyIndex(table, \"u_evap.\")];\r\n        const u = uf + quality * ufg;\r\n\r\n        UI.log(\"finding internal energy based on quality...\");\r\n        UI.log(`uf = ${uf}, ufg = ${ufg}, u = (${uf} + ${quality} * ${ufg})`);\r\n        UI.log(`u = ${u}`);\r\n\r\n        outputValues.internalEnergy = u;\r\n      }\r\n      if (inputValues.specificEnthalpy === null) {\r\n        const hf = pressResult.result[propertyIndex(table, \"h_sat.liquid\")];\r\n        const hfg = pressResult.result[propertyIndex(table, \"h_evap.\")];\r\n        const h = hf + quality * hfg;\r\n\r\n        UI.log(\"finding specific enthalpy based on quality...\");\r\n        UI.log(`hf = ${hf}, hfg = ${hfg}, h = (${hf} + ${quality} * ${hfg})`);\r\n        UI.log(`h = ${h}`);\r\n\r\n        outputValues.specificEnthalpy = h;\r\n      }\r\n      if (inputValues.specificEntropy === null) {\r\n        const sf = pressResult.result[propertyIndex(table, \"s_sat.liquid\")];\r\n        const sfg = pressResult.result[propertyIndex(table, \"s_evap.\")];\r\n        const s = sf + quality * sfg;\r\n\r\n        UI.log(\"finding specific entropy based on quality...\");\r\n        UI.log(`sf = ${sf}, sfg = ${sfg}, s = (${sf} + ${quality} * ${sfg})`);\r\n        UI.log(`s = ${s}`);\r\n\r\n        outputValues.specificEntropy = s;\r\n      }\r\n      //#endregion\r\n\r\n      return outputValues;\r\n    } else if ((pressResult.statusCode = \"300\")) {\r\n      // if didn't found exact temperature =>\r\n\r\n      //#region find temperature\r\n      UI.log(\"start interpolation to find saturated temperature\");\r\n      const temperature = interpolator(\r\n        pressure,\r\n        pressResult.result[0][pressIndex],\r\n        pressResult.result[1][pressIndex],\r\n        pressResult.result[0][tempIndex],\r\n        pressResult.result[1][tempIndex]\r\n      );\r\n      outputValues.temperature = temperature;\r\n      UI.log(`saturated temperature is ${outputValues.temperature}`);\r\n      UI.log(\"\");\r\n      //#endregion\r\n\r\n      //#region find x\r\n      if (inputValues.specificVolume) {\r\n        UI.log(\"finding quality based on specific volume...\");\r\n        const vfIndex = propertyIndex(table, \"v_sat.liquid\");\r\n        const vfgIndex = propertyIndex(table, \"v_evap.\");\r\n\r\n        const vf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][vfIndex],\r\n          pressResult.result[1][vfIndex]\r\n        );\r\n\r\n        const vfg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][vfgIndex],\r\n          pressResult.result[1][vfgIndex]\r\n        );\r\n\r\n        const quality = (inputValues.specificVolume - vf) / vfg;\r\n        UI.log(`vf = ${vf}, vfg = ${vfg}, x = (${inputValues.specificVolume} - ${vf}) / ${vfg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      if (inputValues.internalEnergy) {\r\n        UI.log(\"finding quality based on internal energy...\");\r\n        const ufIndex = propertyIndex(table, \"u_sat.liquid\");\r\n        const ufgIndex = propertyIndex(table, \"u_evap.\");\r\n\r\n        const uf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][ufIndex],\r\n          pressResult.result[1][ufIndex]\r\n        );\r\n\r\n        const ufg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][ufgIndex],\r\n          pressResult.result[1][ufgIndex]\r\n        );\r\n\r\n        const quality = (inputValues.internalEnergy - uf) / ufg;\r\n        UI.log(`uf = ${uf}, ufg = ${ufg}, x = (${inputValues.internalEnergy} - ${uf}) / ${ufg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      if (inputValues.specificEnthalpy) {\r\n        UI.log(\"finding quality based on specific enthalpy...\");\r\n        const hfIndex = propertyIndex(table, \"h_sat.liquid\");\r\n        const hfgIndex = propertyIndex(table, \"h_evap.\");\r\n\r\n        const hf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][hfIndex],\r\n          pressResult.result[1][hfIndex]\r\n        );\r\n\r\n        const hfg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][hfgIndex],\r\n          pressResult.result[1][hfgIndex]\r\n        );\r\n\r\n        const quality = (inputValues.specificEnthalpy - hf) / hfg;\r\n        UI.log(`hf = ${hf}, hfg = ${hfg}, x = (${inputValues.specificEnthalpy} - ${hf}) / ${hfg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      if (inputValues.specificEntropy) {\r\n        UI.log(\"finding quality based on specific entropy...\");\r\n        const sfIndex = propertyIndex(table, \"s_sat.liquid\");\r\n        const sfgIndex = propertyIndex(table, \"s_evap.\");\r\n\r\n        const sf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][sfIndex],\r\n          pressResult.result[1][sfIndex]\r\n        );\r\n\r\n        const sfg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][sfgIndex],\r\n          pressResult.result[1][sfgIndex]\r\n        );\r\n\r\n        const quality = (inputValues.specificEntropy - sf) / sfg;\r\n        UI.log(`sf = ${sf}, sfg = ${sfg}, x = (${inputValues.specificEntropy} - ${sf}) / ${sfg}`);\r\n        outputValues.quality = quality;\r\n      }\r\n      const quality = outputValues.quality;\r\n      UI.log(`x = ${quality}`);\r\n      UI.log(\"\");\r\n      //#endregion\r\n\r\n      //#region find v u h s\r\n      if (inputValues.specificVolume === null) {\r\n        UI.log(\"finding specific volume based on quality...\");\r\n\r\n        const vfIndex = propertyIndex(table, \"v_sat.liquid\");\r\n        const vfgIndex = propertyIndex(table, \"v_evap.\");\r\n\r\n        const vf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][vfIndex],\r\n          pressResult.result[1][vfIndex]\r\n        );\r\n\r\n        const vfg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][vfgIndex],\r\n          pressResult.result[1][vfgIndex]\r\n        );\r\n        const v = vf + quality * vfg;\r\n\r\n        UI.log(`vf = ${vf}, vfg = ${vfg}, v = (${vf} + ${quality} * ${vfg})`);\r\n        UI.log(`v = ${v}`);\r\n        UI.log(\"\");\r\n\r\n        outputValues.specificVolume = v;\r\n      }\r\n      if (inputValues.internalEnergy === null) {\r\n        UI.log(\"finding internal energy based on quality...\");\r\n\r\n        const ufIndex = propertyIndex(table, \"u_sat.liquid\");\r\n        const ufgIndex = propertyIndex(table, \"u_evap.\");\r\n\r\n        const uf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][ufIndex],\r\n          pressResult.result[1][ufIndex]\r\n        );\r\n\r\n        const ufg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][ufgIndex],\r\n          pressResult.result[1][ufgIndex]\r\n        );\r\n        const u = uf + quality * ufg;\r\n\r\n        UI.log(`uf = ${uf}, ufg = ${ufg}, u = (${uf} + ${quality} * ${ufg})`);\r\n        UI.log(`u = ${u}`);\r\n        UI.log(\"\");\r\n\r\n        outputValues.internalEnergy = u;\r\n      }\r\n      if (inputValues.specificEnthalpy === null) {\r\n        UI.log(\"finding specific enthalpy based on quality...\");\r\n        const hfIndex = propertyIndex(table, \"h_sat.liquid\");\r\n        const hfgIndex = propertyIndex(table, \"h_evap.\");\r\n\r\n        const hf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][hfIndex],\r\n          pressResult.result[1][hfIndex]\r\n        );\r\n\r\n        const hfg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][hfgIndex],\r\n          pressResult.result[1][hfgIndex]\r\n        );\r\n        const h = hf + quality * hfg;\r\n\r\n        UI.log(`hf = ${hf}, hfg = ${hfg}, h = (${hf} + ${quality} * ${hfg})`);\r\n        UI.log(`h = ${h}`);\r\n        UI.log(\"\");\r\n\r\n        outputValues.specificEnthalpy = h;\r\n      }\r\n      if (inputValues.specificEntropy === null) {\r\n        UI.log(\"finding specific entropy based on quality...\");\r\n\r\n        const sfIndex = propertyIndex(table, \"s_sat.liquid\");\r\n        const sfgIndex = propertyIndex(table, \"s_evap.\");\r\n\r\n        const sf = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][sfIndex],\r\n          pressResult.result[1][sfIndex]\r\n        );\r\n\r\n        const sfg = interpolator(\r\n          pressure,\r\n          pressResult.result[0][pressIndex],\r\n          pressResult.result[1][pressIndex],\r\n          pressResult.result[0][sfgIndex],\r\n          pressResult.result[1][sfgIndex]\r\n        );\r\n        const s = sf + quality * sfg;\r\n        UI.log(`sf = ${sf}, sfg = ${sfg}, s = (${sf} + ${quality} * ${sfg})`);\r\n        UI.log(`s = ${s}`);\r\n        UI.log(\"\");\r\n\r\n        outputValues.specificEntropy = s;\r\n      }\r\n      //#endregion\r\n      return outputValues;\r\n    }\r\n  }\r\n}\r\n","import UI from \"../view/index.js\";\r\nimport rounder from \"./rounder.js\";\r\nimport tables from \"../model/data.js\";\r\nimport phaseFinder from \"./phaseFinder/index.js\";\r\nimport propertyFinder from \"./propertyFinder/index.js\";\r\n\r\nexport default function (inputValues) {\r\n  document.querySelector(\"pre\").textContent = \"\";\r\n\r\n  const phase = phaseFinder(tables, inputValues);\r\n\r\n  const outputValues = propertyFinder(tables, phase, inputValues);\r\n\r\n  UI.update(rounder(outputValues));\r\n}\r\n","import UI from \"../view/index.js\";\r\n/**\r\n *\r\n * @param {Object.<string, ?number>} outputValues object containing all calculated values\r\n * @returns {Object.<string, ?number>} finalOutput contains all calculated values rounded to 6 significant digits\r\n */\r\nexport default function (outputValues) {\r\n  UI.log(\"rounding everything into 6 significant figures...\");\r\n  const finalOutput = {};\r\n  for (const prop in outputValues) {\r\n    if (Number.isFinite(outputValues[prop])) {\r\n      finalOutput[prop] = Number(outputValues[prop].toPrecision(6));\r\n    } else {\r\n      finalOutput[prop] = \"\";\r\n    }\r\n  }\r\n  return finalOutput;\r\n}\r\n","import showCorrectTemperature from \"./showCorrectTemperature.js\";\r\nimport toggleCalculations from \"./toggleCalculations.js\";\r\nimport inputBlocker from \"./inputBlocker.js\";\r\nimport inputValidation from \"./inputValidation.js\";\r\nimport requestInputValues from \"./requestInputValues.js\";\r\nimport controller from \"../controller/index.js\";\r\nimport updateUI from \"./updateUI.js\";\r\nconst UI = {\r\n  start() {\r\n    showCorrectTemperature();\r\n    toggleCalculations();\r\n    inputBlocker();\r\n    inputValidation();\r\n    this.control();\r\n    document.querySelector(\"#clear-input\").addEventListener(\"click\", () => this.clear());\r\n    document.querySelector(\"#substance\").addEventListener(\"change\", () => this.clear());\r\n  },\r\n  control() {\r\n    const form = document.querySelector(\"form\");\r\n    form.addEventListener(\"submit\", (e) => {\r\n      e.preventDefault();\r\n      controller(requestInputValues());\r\n    });\r\n  },\r\n  log(message = \"-------------------------\") {\r\n    // logs messages to the UI and console\r\n    document.querySelector(\"pre\").insertAdjacentText(\"beforeend\", \"\\n\" + message);\r\n    console.log(message);\r\n  },\r\n  clear() {\r\n    // only clears UI doesn't clears console\r\n    document.querySelector(\"pre\").textContent = \"#hello world\";\r\n    document.querySelectorAll(\"input[type='number']\").forEach((input) => {\r\n      input.value = \"\";\r\n      input.disabled = false;\r\n      input.required = true;\r\n    });\r\n  },\r\n  update(outputValues) {\r\n    updateUI(outputValues);\r\n  },\r\n};\r\nexport default UI;\r\n","export default function () {\r\n  const select = document.querySelector(\"select\");\r\n  select.addEventListener(\"change\", () => {\r\n    const temperatureLabel = document.querySelector('[for=\"temperature\"]');\r\n    if (select.value === \"6\" || select.value === \"7\") {\r\n      temperatureLabel.textContent = \"T (K)\";\r\n    } else {\r\n      temperatureLabel.textContent = \"T (°C)\";\r\n    }\r\n  });\r\n}\r\n","export default function () {\r\n  const checkbox = document.querySelector(\"#show-calculations\");\r\n  const calculationElement = document.querySelector(\".tile.is-9.is-parent\");\r\n  checkbox.addEventListener(\"input\", () => {\r\n    if (checkbox.checked) {\r\n      calculationElement.style.display = \"block\";\r\n    } else {\r\n      calculationElement.removeAttribute(\"style\");\r\n    }\r\n  });\r\n}\r\n","export default function () {\r\n  const temperature = document.querySelector(\"#temperature\");\r\n  const pressure = document.querySelector(\"#pressure\");\r\n  const specificVolume = document.querySelector(\"#specific-volume\");\r\n  const internalEnergy = document.querySelector(\"#internal-energy\");\r\n  const specificEnthalpy = document.querySelector(\"#specific-enthalpy\");\r\n  const specificEntropy = document.querySelector(\"#specific-entropy\");\r\n  const quality = document.querySelector(\"#quality\");\r\n  const allInputs = [temperature, pressure, specificVolume, internalEnergy, specificEnthalpy, specificEntropy, quality];\r\n\r\n  const toggleInputDisable = function (inputElement, disable = true) {\r\n    if (disable) inputElement.value = \"\";\r\n    inputElement.disabled = disable;\r\n    inputElement.required = !disable;\r\n  };\r\n\r\n  //TODO the code below works but needs cleaning\r\n  //check every single input!\r\n  temperature.addEventListener(\"input\", () => {\r\n    const inputsToDisable = [];\r\n    if (temperature.value && pressure.value) {\r\n      inputsToDisable.push(specificVolume, internalEnergy, specificEnthalpy, specificEntropy, quality);\r\n    } else if (temperature.value && specificVolume.value) {\r\n      inputsToDisable.push(pressure, internalEnergy, specificEnthalpy, specificEntropy, quality);\r\n    } else if (temperature.value && internalEnergy.value) {\r\n      inputsToDisable.push(pressure, specificVolume, specificEnthalpy, specificEntropy, quality);\r\n    } else if (temperature.value && specificEnthalpy.value) {\r\n      inputsToDisable.push(pressure, specificVolume, internalEnergy, specificEntropy, quality);\r\n    } else if (temperature.value && specificEntropy.value) {\r\n      inputsToDisable.push(pressure, specificVolume, internalEnergy, specificEnthalpy, quality);\r\n    } else if (temperature.value && quality.value) {\r\n      inputsToDisable.push(pressure, specificVolume, internalEnergy, specificEnthalpy, specificEntropy);\r\n    } else {\r\n      allInputs.forEach((input) => toggleInputDisable(input, false));\r\n    }\r\n    inputsToDisable.forEach((input) => toggleInputDisable(input));\r\n  });\r\n\r\n  pressure.addEventListener(\"input\", () => {\r\n    const inputsToDisable = [];\r\n    if (pressure.value && temperature.value) {\r\n      inputsToDisable.push(specificVolume, internalEnergy, specificEnthalpy, specificEntropy, quality);\r\n    } else if (pressure.value && specificVolume.value) {\r\n      inputsToDisable.push(temperature, internalEnergy, specificEnthalpy, specificEntropy, quality);\r\n    } else if (pressure.value && internalEnergy.value) {\r\n      inputsToDisable.push(temperature, specificVolume, specificEnthalpy, specificEntropy, quality);\r\n    } else if (pressure.value && specificEnthalpy.value) {\r\n      inputsToDisable.push(temperature, specificVolume, internalEnergy, specificEntropy, quality);\r\n    } else if (pressure.value && specificEntropy.value) {\r\n      inputsToDisable.push(temperature, specificVolume, internalEnergy, specificEnthalpy, quality);\r\n    } else if (pressure.value && quality.value) {\r\n      inputsToDisable.push(temperature, specificVolume, internalEnergy, specificEnthalpy, specificEntropy);\r\n    } else {\r\n      allInputs.forEach((input) => toggleInputDisable(input, false));\r\n    }\r\n    inputsToDisable.forEach((input) => toggleInputDisable(input));\r\n  });\r\n\r\n  specificVolume.addEventListener(\"input\", () => {\r\n    const inputsToDisable = [];\r\n    if (specificVolume.value && temperature.value) {\r\n      inputsToDisable.push(pressure, internalEnergy, specificEnthalpy, specificEntropy, quality);\r\n    } else if (specificVolume.value && pressure.value) {\r\n      inputsToDisable.push(temperature, internalEnergy, specificEnthalpy, specificEntropy, quality);\r\n    } else if (specificVolume.value) {\r\n      inputsToDisable.push(internalEnergy, specificEnthalpy, specificEntropy, quality);\r\n    } else {\r\n      allInputs.forEach((input) => toggleInputDisable(input, false));\r\n    }\r\n    inputsToDisable.forEach((input) => toggleInputDisable(input));\r\n  });\r\n\r\n  internalEnergy.addEventListener(\"input\", () => {\r\n    const inputsToDisable = [];\r\n    if (internalEnergy.value && temperature.value) {\r\n      inputsToDisable.push(pressure, specificVolume, specificEnthalpy, specificEntropy, quality);\r\n    } else if (internalEnergy.value && pressure.value) {\r\n      inputsToDisable.push(temperature, specificVolume, specificEnthalpy, specificEntropy, quality);\r\n    } else if (internalEnergy.value) {\r\n      inputsToDisable.push(specificVolume, specificEnthalpy, specificEntropy, quality);\r\n    } else {\r\n      allInputs.forEach((input) => toggleInputDisable(input, false));\r\n    }\r\n    inputsToDisable.forEach((input) => toggleInputDisable(input));\r\n  });\r\n\r\n  specificEnthalpy.addEventListener(\"input\", () => {\r\n    const inputsToDisable = [];\r\n    if (specificEnthalpy.value && temperature.value) {\r\n      inputsToDisable.push(pressure, specificVolume, internalEnergy, specificEntropy, quality);\r\n    } else if (specificEnthalpy.value && pressure.value) {\r\n      inputsToDisable.push(temperature, specificVolume, internalEnergy, specificEntropy, quality);\r\n    } else if (specificEnthalpy.value) {\r\n      inputsToDisable.push(specificVolume, internalEnergy, specificEntropy, quality);\r\n    } else {\r\n      allInputs.forEach((input) => toggleInputDisable(input, false));\r\n    }\r\n    inputsToDisable.forEach((input) => toggleInputDisable(input));\r\n  });\r\n\r\n  specificEntropy.addEventListener(\"input\", () => {\r\n    const inputsToDisable = [];\r\n    if (specificEntropy.value && temperature.value) {\r\n      inputsToDisable.push(pressure, specificVolume, internalEnergy, specificEnthalpy, quality);\r\n    } else if (specificEntropy.value && pressure.value) {\r\n      inputsToDisable.push(temperature, specificVolume, internalEnergy, specificEnthalpy, quality);\r\n    } else if (specificEntropy.value) {\r\n      inputsToDisable.push(specificVolume, internalEnergy, specificEnthalpy, quality);\r\n    } else {\r\n      allInputs.forEach((input) => toggleInputDisable(input, false));\r\n    }\r\n    inputsToDisable.forEach((input) => toggleInputDisable(input));\r\n  });\r\n\r\n  quality.addEventListener(\"input\", () => {\r\n    const inputsToDisable = [];\r\n    if (quality.value && temperature.value) {\r\n      inputsToDisable.push(pressure, specificVolume, internalEnergy, specificEnthalpy, specificEntropy);\r\n    } else if (quality.value && pressure.value) {\r\n      inputsToDisable.push(temperature, specificVolume, internalEnergy, specificEnthalpy, specificEntropy);\r\n    } else if (quality.value) {\r\n      inputsToDisable.push(specificVolume, internalEnergy, specificEnthalpy, specificEntropy);\r\n    } else {\r\n      allInputs.forEach((input) => toggleInputDisable(input, false));\r\n    }\r\n    inputsToDisable.forEach((input) => toggleInputDisable(input));\r\n  });\r\n}\r\n","export default function () {\r\n  const result = {\r\n    substance: document.querySelector(\"select\").value,\r\n    temperature: document.querySelector(\"#temperature\").value,\r\n    pressure: document.querySelector(\"#pressure\").value,\r\n    specificVolume: document.querySelector(\"#specific-volume\").value,\r\n    internalEnergy: document.querySelector(\"#internal-energy\").value,\r\n    specificEnthalpy: document.querySelector(\"#specific-enthalpy\").value,\r\n    specificEntropy: document.querySelector(\"#specific-entropy\").value,\r\n    quality: document.querySelector(\"#quality\").value,\r\n  };\r\n  for (const prop in result) {\r\n    if (result[prop] === \"\") {\r\n      result[prop] = null;\r\n    } else {\r\n      result[prop] = Number(result[prop]);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n","export default function (x) {\r\n  document.querySelector(\"select\").value = x.substance;\r\n  document.querySelector(\"#temperature\").value = x.temperature;\r\n  document.querySelector(\"#pressure\").value = x.pressure;\r\n  document.querySelector(\"#specific-volume\").value = x.specificVolume;\r\n  document.querySelector(\"#internal-energy\").value = x.internalEnergy;\r\n  document.querySelector(\"#specific-enthalpy\").value = x.specificEnthalpy;\r\n  document.querySelector(\"#specific-entropy\").value = x.specificEntropy;\r\n  document.querySelector(\"#quality\").value = x.quality;\r\n}\r\n","import UI from \"./view/index.js\";\r\nimport controller from \"./controller/index.js\";\r\nUI.start();\r\n"],"names":["$f98ec7f8edde89b5$export$2e2bcd8739ae039","allInputs","document","querySelectorAll","forEach","input","input1","addEventListener","e","preventDefault","parentNode","querySelector","errorMassage","createElement","classList","add","textContent","validationMessage","after","message","remove","$b4fb6e7013ab25cb$export$2e2bcd8739ae039","b11","b12","b13","b14","b21","b22","b31","b32","b41","b42","b51","b52","b61","b62","b71","b72","$9016c6cb1ecfa263$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$6566b2b283ebda34$export$2e2bcd8739ae039","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","$b7ec81ad56ac3afa$export$2e2bcd8739ae039","iter","Symbol","iterator","Array","from","$a8946def989e0008$export$2e2bcd8739ae039","arr","len","arr2","$96bb682ab2caba70$export$2e2bcd8739ae039","o","minLen","n","prototype","toString","call","slice","constructor","name","test","$d8f1de7b5414126a$export$2e2bcd8739ae039","isArray","$6a3bb82cfe865dea$export$2e2bcd8739ae039","TypeError","$34b9cab1170e67a9$export$2e2bcd8739ae039","$f250c78b932b8ffa$export$2e2bcd8739ae039","$9f2e4295173f3c9b$export$2e2bcd8739ae039","$8e1fe9088dc9e1d0$export$2e2bcd8739ae039","$42fcd1d40a282e09$export$2e2bcd8739ae039","table","propertyName","type","undefined","console","error","$d56d749ec2921ea4$export$2e2bcd8739ae039","propertyValue","index","Number","isFinite","ref","firstInTable","lastInTable","sort","a","b","$97427298ab63fbb5$export$2e2bcd8739ae039","isInTable","beforeOrAfter","statusCode","statusMessage","result","found","find","surrounding","rowSize","testRow","push","temporaryTable","testIndex","findIndex","$852d709be23183e7$export$2e2bcd8739ae039","$b3f6437da806f463$export$2e2bcd8739ae039","x","x1","x2","y1","y2","$195d6892b72e9ad4$export$2e2bcd8739ae039","log","y","$754898d019038ce0$export$2e2bcd8739ae039","number","$eddc52ef5666e8b0$export$2e2bcd8739ae039","tables","inputValues","phase","temperature","pressure","substance","tempResult","pressResults","interpValue","apply","substanceName","phase1","tempResult1","interpValue1","$3667d11fe305c4d9$export$2e2bcd8739ae039","quality","satLiquidIndex","satVaporIndex","valueToCompare","specificVolume","internalEnergy","specificEnthalpy","specificEntropy","satLiquid","satVapor","temperatureIndex","satLiquid1","satVapor1","$f6392aa732bab381$export$2e2bcd8739ae039","pressResult","pressureIndex","join","$42b559769791c410$export$2e2bcd8739ae039","$540548be29bee17b$export$2e2bcd8739ae039","secondPropName","secondPropValue","$4973e3b8ba029937$export$2e2bcd8739ae039","secondSearch","pressureBefore","pressureAfter","$ac0e545189609aa5$export$2e2bcd8739ae039","$5752f67d74cfe526$export$2e2bcd8739ae039","firstPropName","firstPropValue","pressureBuckets","Set","map","pressureNumber","firstExact","firstSurrounding","bucket","lesser","greater","conclusion","Error","$bc7a8c8f627a8b6b$export$2e2bcd8739ae039","$906266a57849caff$export$2e2bcd8739ae039","$d969912aa7d152ba$export$2e2bcd8739ae039","propsToStart","firstValueIndex","firstValue","secondValueIndex","secondValue","firstConclusion","secondConclusion","finalConclusion","_element","array","$5379c2517f481ef6$export$2e2bcd8739ae039","output","$f90fd83604ba0826$export$2e2bcd8739ae039","outputValues","tempIndex","pressIndex","vIndex","uIndex","hIndex","sIndex","_pressure","_specificVolume","_internalEnergy","_specificEnthalpy","_specificEntropy","res","_pressure1","_specificVolume1","_internalEnergy1","_specificEnthalpy1","_specificEntropy1","temp","res1","table1","tempIndex1","pressIndex1","vIndex1","uIndex1","hIndex1","sIndex1","_pressure2","_specificVolume2","_internalEnergy2","_specificEnthalpy2","_specificEntropy2","res2","_pressure3","_specificVolume3","_internalEnergy3","_specificEnthalpy3","_specificEntropy3","temp1","res3","table2","tempIndex2","pressIndex2","vIndex2","uIndex2","hIndex2","sIndex2","tempResult2","_pressure4","_specificVolume4","_internalEnergy4","_specificEnthalpy4","_specificEntropy4","res4","_pressure5","_specificVolume5","_internalEnergy5","_specificEnthalpy5","_specificEntropy5","temp2","res5","table3","tempIndex3","pressIndex3","vIndex3","uIndex3","hIndex3","sIndex3","tempResult3","_pressure6","_specificVolume6","_internalEnergy6","_specificEnthalpy6","_specificEntropy6","res6","_pressure7","_specificVolume7","_internalEnergy7","_specificEnthalpy7","_specificEntropy7","temp3","res7","$63deee50c93f2a08$export$2e2bcd8739ae039","finalResult","searchResult","middleValueIndex","middleValue","$66ad2b42ffd48958$export$2e2bcd8739ae039","results","exactResults","secondSurrounding","interpSurrounding","$ca32af5c3cbaca03$export$2e2bcd8739ae039","$d8941a13a2c5f6de$export$2e2bcd8739ae039","$db5c2039db94f958$export$2e2bcd8739ae039","$fe421c99f92dabb3$export$2e2bcd8739ae039","$a6a889c548f117c9$export$2e2bcd8739ae039","vf","vfg","uf","ufg","quality1","hf","hfg","quality2","sf","sfg","quality3","quality4","vf1","vfg1","v","uf1","ufg1","u","hf1","hfg1","h","sf1","sfg1","s","vfIndex","vfgIndex","vf2","vfg2","quality5","ufIndex","ufgIndex","uf2","ufg2","quality6","hfIndex","hfgIndex","hf2","hfg2","quality7","sfIndex","sfgIndex","sf2","sfg2","quality8","quality9","vfIndex1","vfgIndex1","vf3","vfg3","v1","ufIndex1","ufgIndex1","uf3","ufg3","u1","hfIndex1","hfgIndex1","hf3","hfg3","h1","sfIndex1","sfgIndex1","sf3","sfg3","s1","vf4","vfg4","quality10","uf4","ufg4","quality11","hf4","hfg4","quality12","sf4","sfg4","quality13","quality14","vf5","vfg5","v2","uf5","ufg5","u2","hf5","hfg5","h2","sf5","sfg5","s2","pressure1","vfIndex2","vfgIndex2","vf6","vfg6","quality15","ufIndex2","ufgIndex2","uf6","ufg6","quality16","hfIndex2","hfgIndex2","hf6","hfg6","quality17","sfIndex2","sfgIndex2","sf6","sfg6","quality18","quality19","vfIndex3","vfgIndex3","vf7","vfg7","v3","ufIndex3","ufgIndex3","uf7","ufg7","u3","hfIndex3","hfgIndex3","hf7","hfg7","h3","sfIndex3","sfgIndex3","sf7","sfg7","s3","pressure2","pressResult1","vf8","vfg8","quality20","uf8","ufg8","quality21","hf8","hfg8","quality22","sf8","sfg8","quality23","quality24","vf9","vfg9","v4","uf9","ufg9","u4","hf9","hfg9","h4","sf9","sfg9","s4","temperature1","vfIndex4","vfgIndex4","vf10","vfg10","quality25","ufIndex4","ufgIndex4","uf10","ufg10","quality26","hfIndex4","hfgIndex4","hf10","hfg10","quality27","sfIndex4","sfgIndex4","sf10","sfg10","quality28","quality29","vfIndex5","vfgIndex5","vf11","vfg11","v5","ufIndex5","ufgIndex5","uf11","ufg11","u5","hfIndex5","hfgIndex5","hf11","hfg11","h5","sfIndex5","sfgIndex5","sf11","sfg11","s5","$0bf29b844ac2d678$export$2e2bcd8739ae039","$dfa2dec2964e7b3a$export$2e2bcd8739ae039","update","finalOutput","prop","toPrecision","$b19d97422c0157ef$export$2e2bcd8739ae039","$195d6892b72e9ad4$var$UI","start","select","checkbox","calculationElement","toggleInputDisable","temperatureLabel","checked","style","display","removeAttribute","inputElement","disable","disabled","required","inputsToDisable","this","control","_this","clear","$58ec241bd09f5a52$export$2e2bcd8739ae039","insertAdjacentText"],"version":3,"file":"index.0bb7ab94.js.map"}